@model object
@{
    ViewData["Title"] = "Admin Dashboard - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .growth-indicator {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.25rem 0.5rem;
            border-radius: 0.375rem;
        }

        .growth-indicator.positive {
            color: #10b981;
            background-color: rgba(16, 185, 129, 0.1);
        }

        .growth-indicator.negative {
            color: #ef4444;
            background-color: rgba(239, 68, 68, 0.1);
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            padding: 1rem;
            z-index: 1000;
            min-width: 300px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.error {
            border-left: 4px solid #ef4444;
        }

        .toast.success {
            border-left: 4px solid #10b981;
        }

        .toast.info {
            border-left: 4px solid #3b82f6;
        }

        .btn-secondary {
            background-color: #6b7280;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            cursor: pointer;
            font-size: 0.875rem;
            transition: background-color 0.2s;
        }

        .btn-secondary:hover:not(:disabled) {
            background-color: #4b5563;
        }

        .btn-disabled {
            background-color: #d1d5db;
            color: #9ca3af;
            cursor: not-allowed;
        }

        .pagination-controls button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link active">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                    <span class="nav-badge" id="salesCount">0</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                    <span class="nav-badge" id="lowStockCount">0</span>
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                    <span class="nav-badge" id="unreadMessagesCount">0</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Customer Management</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                    <span class="nav-badge" id="pendingRequestsCount">0</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("CartManagement", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Cart Management
                    <span class="nav-badge" id="activeCartsCount">0</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("WishlistManagement", "Admin")" class="nav-link">
                    <i class="fas fa-heart"></i>
                    Wishlist Management
                    <span class="nav-badge" id="activeWishlistsCount">0</span>
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Dashboard</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search anything...">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Dashboard Content -->
    <div class="dashboard-content">
        <!-- Stats Grid -->
        <div class="stats-grid">
            <div class="stat-card" style="--card-color: #3b82f6;">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="stat-trend positive" id="salesTrend">
                        <i class="fas fa-arrow-up"></i>
                        +0.0%
                    </div>
                </div>
                <div class="stat-value" id="totalSalesValue">KSh 0</div>
                <div class="stat-label">Total Sales</div>
            </div>

            <div class="stat-card" style="--card-color: #10b981;">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-shopping-cart"></i>
                    </div>
                    <div class="stat-trend positive">
                        <i class="fas fa-arrow-up"></i>
                        +8.2%
                    </div>
                </div>
                <div class="stat-value" id="totalOrdersValue">0</div>
                <div class="stat-label">Total Orders</div>
            </div>

            <div class="stat-card" style="--card-color: #f59e0b;">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="stat-trend positive" id="profitTrend">
                        <i class="fas fa-arrow-up"></i>
                        +0.0%
                    </div>
                </div>
                <div class="stat-value" id="profitValue">KSh 0</div>
                <div class="stat-label">Today's Profit</div>
            </div>

            <div class="stat-card" style="--card-color: #8b5cf6;">
                <div class="stat-header">
                    <div class="stat-icon">
                        <i class="fas fa-warehouse"></i>
                    </div>
                    <div class="stat-trend positive" id="stockTrend">
                        <i class="fas fa-arrow-up"></i>
                        +0.0%
                    </div>
                </div>
                <div class="stat-value" id="stockValue">KSh 0</div>
                <div class="stat-label">Stock Value</div>
            </div>
        </div>

        <!-- Charts Grid -->
        <div class="charts-grid">
            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h3 class="chart-title">Sales Overview</h3>
                        <p class="chart-subtitle">Monthly sales performance</p>
                    </div>
                </div>
                <canvas id="salesChart" width="400" height="200"></canvas>
            </div>

            <div class="chart-card">
                <div class="chart-header">
                    <div>
                        <h3 class="chart-title">Top 7 Selling Products</h3>
                        <p class="chart-subtitle">Most sold products by quantity</p>
                    </div>
                </div>
                <canvas id="productsChart" width="400" height="200"></canvas>
            </div>
        </div>

        <!-- Recent Activity Table -->
        <div class="table-card">
            <div class="table-header">
                <h3 class="table-title">Recent Sales</h3>
                <div class="table-actions">
                    <button class="btn-primary" onclick="createNewSale()">
                        <i class="fas fa-plus"></i>
                        New Sale
                    </button>
                    <button class="btn-secondary" onclick="viewSalesHistory()" style="margin-left: 0.5rem;">
                        <i class="fas fa-history"></i>
                        View Sales History
                    </button>
                </div>
            </div>
            <table class="data-table">
                <thead>
                    <tr>
                        <th>Sale ID</th>
                        <th>Customer</th>
                        <th>Product</th>
                        <th>Amount</th>
                        <th>Status</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="recentSalesTable">
                    <!-- Sales data will be loaded dynamically -->
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
    <script src="~/js/dashboard.js"></script>

    <script>
        // Additional custom functions for this page
        function createNewSale() {
            window.location.href = '@Url.Action("Sales", "Admin")';
        }

        function viewSale(saleId) {
            window.location.href = '@Url.Action("Details", "Sales")?id=' + saleId;
        }

        function viewSalesHistory() {
            window.location.href = '@Url.Action("SalesHistory", "Admin")';
        }

        function printSale(saleId) {
            window.open('@Url.Action("Receipt", "Sales")?id=' + saleId, '_blank');
        }

        let chartsInitialized = false;

        // Load real-time data from database
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing dashboard...');
            
            // Initialize charts first
            initializeCharts();
            
            // Auto-refresh data every 30 seconds
            setInterval(function() {
                loadDashboardData();
            }, 30000);
        });

        function updateChartsData(chartData) {
            if (!chartsInitialized) {
                console.log('Charts not initialized yet');
                return;
            }

            console.log('Updating charts with data:', chartData);

            // Update Sales Chart
            if (salesChart && chartData.salesData && Array.isArray(chartData.salesData)) {
                console.log('Updating sales chart with:', chartData.salesData);
                salesChart.data.labels = chartData.salesData.map(item => item.date);
                salesChart.data.datasets[0].data = chartData.salesData.map(item => item.amount);
                salesChart.update('active');
                console.log('Sales chart updated successfully');
            } else {
                console.error('Sales chart data is invalid:', chartData.salesData);
            }

            // Update Products Chart
            if (productsChart && chartData.topProducts && Array.isArray(chartData.topProducts)) {
                console.log('Updating products chart with:', chartData.topProducts);
                productsChart.data.labels = chartData.topProducts.map(item => item.name || item.productName);
                productsChart.data.datasets[0].data = chartData.topProducts.map(item => item.quantitySold);
                productsChart.data.datasets[0].backgroundColor = [
                    '#3b82f6', '#10b981', '#f59e0b', '#ef4444', 
                    '#8b5cf6', '#06b6d4', '#f97316'
                ];
                productsChart.update('active');
                console.log('Products chart updated successfully');
            } else {
                console.error('Products chart data is invalid:', chartData.topProducts);
                // Show empty state for products chart
                if (productsChart) {
                    productsChart.data.labels = ['No Data'];
                    productsChart.data.datasets[0].data = [1];
                    productsChart.data.datasets[0].backgroundColor = ['#e5e7eb'];
                    productsChart.update('active');
                }
            }
        }

        function initializeCharts() {
            console.log('Initializing charts...');
            
            // Destroy existing charts if they exist
            if (salesChart && typeof salesChart.destroy === 'function') {
                console.log('Destroying existing sales chart');
                salesChart.destroy();
                salesChart = null;
            }
            if (productsChart && typeof productsChart.destroy === 'function') {
                console.log('Destroying existing products chart');
                productsChart.destroy();
                productsChart = null;
            }

            // Sales Overview Chart
            const salesCtx = document.getElementById('salesChart');
            if (salesCtx) {
                console.log('Creating sales chart...');
                salesChart = new Chart(salesCtx, {
                    type: 'line',
                    data: {
                        labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
                        datasets: [{
                            label: 'Monthly Sales (KSh)',
                            data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                            borderColor: '#3b82f6',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            borderWidth: 2,
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: '#f3f4f6'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return 'KSh ' + value.toLocaleString();
                                    }
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                }
                            }
                        }
                    }
                });
                console.log('Sales chart created successfully');
            }

            // Top Products Chart
            const productsCtx = document.getElementById('productsChart');
            if (productsCtx) {
                console.log('Creating products chart...');
                productsChart = new Chart(productsCtx, {
                    type: 'pie',
                    data: {
                        labels: ['No Data'],
                        datasets: [{
                            label: 'Quantity Sold',
                            data: [1],
                            backgroundColor: [
                                '#3b82f6', '#10b981', '#f59e0b', '#ef4444', 
                                '#8b5cf6', '#06b6d4', '#f97316'
                            ],
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1);
                                        return context.label + ': ' + context.parsed + ' units (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
                console.log('Products chart created successfully');
            }

            chartsInitialized = true;
            console.log('Charts initialization completed, chartsInitialized:', chartsInitialized);
            
            // Test charts with sample data
            testChartsWithSampleData();
        }

        function testChartsWithSampleData() {
            console.log('Testing charts with sample data...');
            
            if (salesChart) {
                salesChart.data.labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'];
                salesChart.data.datasets[0].data = [10000, 15000, 12000, 18000, 22000, 25000];
                salesChart.update();
                console.log('Sales chart updated with test data');
            }
            
            if (productsChart) {
                productsChart.data.labels = ['Product A', 'Product B', 'Product C'];
                productsChart.data.datasets[0].data = [5, 3, 2];
                productsChart.data.datasets[0].backgroundColor = ['#3b82f6', '#10b981', '#f59e0b'];
                productsChart.update();
                console.log('Products chart updated with test data');
            }
            
            // Load real data after charts are initialized
            setTimeout(() => {
                loadDashboardData();
            }, 1000);
        }

        async function loadDashboardData() {
            try {
                console.log('Fetching dashboard data...');
                const response = await fetch('@Url.Action("GetDashboardData", "Admin")');
                if (!response.ok) {
                    throw new Error('Failed to fetch dashboard data');
                }
                
                const data = await response.json();
                console.log('Dashboard data loaded:', data);
                console.log('Charts data:', data.charts);
                console.log('Sales data for chart:', data.charts?.salesData);
                console.log('Products data for chart:', data.charts?.topProducts);
                console.log('Data types - salesData:', typeof data.charts?.salesData, 'topProducts:', typeof data.charts?.topProducts);
                
                // Update statistics
                updateStatistics(data.stats);
                
                // Update charts with detailed logging
                if (data.charts && data.charts.salesData && data.charts.topProducts) {
                    console.log('Calling updateChartsData with valid data structure');
                    updateChartsData(data.charts);
                } else {
                    console.error('Charts data missing or invalid structure:', {
                        hasCharts: !!data.charts,
                        hasSalesData: !!(data.charts?.salesData),
                        hasTopProducts: !!(data.charts?.topProducts),
                        salesDataType: typeof data.charts?.salesData,
                        topProductsType: typeof data.charts?.topProducts
                    });
                }
                
                // Update recent sales table
                updateRecentSalesTable(data.recentSales);
                
                // Update sidebar counts
                updateSidebarCounts(data.sidebarCounts);
                
            } catch (error) {
                console.error('Error loading dashboard data:', error);
                showToast('Error loading dashboard data', 'error');
            }
        }

        function updateSidebarCounts(counts) {
            if (!counts) return;
            
            // Update sales count (today's sales)
            const salesCountEl = document.getElementById('salesCount');
            if (salesCountEl && counts.todaySales !== undefined) {
                salesCountEl.textContent = counts.todaySales;
                salesCountEl.style.display = counts.todaySales > 0 ? 'inline' : 'none';
            }
            
            // Update low stock count
            const lowStockEl = document.getElementById('lowStockCount');
            if (lowStockEl && counts.lowStock !== undefined) {
                lowStockEl.textContent = counts.lowStock;
                lowStockEl.style.display = counts.lowStock > 0 ? 'inline' : 'none';
            }
            
            // Update pending requests count
            const pendingRequestsEl = document.getElementById('pendingRequestsCount');
            if (pendingRequestsEl && counts.pendingRequests !== undefined) {
                pendingRequestsEl.textContent = counts.pendingRequests;
                pendingRequestsEl.style.display = counts.pendingRequests > 0 ? 'inline' : 'none';
            }
            
            // Update unread messages count
            const unreadMessagesEl = document.getElementById('unreadMessagesCount');
            if (unreadMessagesEl && counts.unreadMessages !== undefined) {
                unreadMessagesEl.textContent = counts.unreadMessages;
                unreadMessagesEl.style.display = counts.unreadMessages > 0 ? 'inline' : 'none';
            }
        }

        function updateStatistics(stats) {
            console.log('Updating statistics with:', stats);
            
            // Update Total Sales - use todaySales
            const totalSalesElement = document.getElementById('totalSalesValue');
            if (totalSalesElement && stats.todaySales !== undefined) {
                animateValue(totalSalesElement, 0, stats.todaySales, 2000, true);
            }

            // Update Total Orders - use todayOrders
            const totalOrdersElement = document.getElementById('totalOrdersValue');
            if (totalOrdersElement && stats.todayOrders !== undefined) {
                animateValue(totalOrdersElement, 0, stats.todayOrders, 2000, false);
            }

            // Update Today's Profit
            const profitElement = document.getElementById('profitValue');
            if (profitElement && stats.todayProfit !== undefined) {
                animateValue(profitElement, 0, stats.todayProfit, 2000, true);
            }

            // Update Stock Value
            const stockElement = document.getElementById('stockValue');
            if (stockElement && stats.stockValue !== undefined) {
                animateValue(stockElement, 0, stats.stockValue, 2000, true);
            }

            // Update growth indicators
            updateGrowthIndicators(stats);
        }

        function updateGrowthIndicators(stats) {
            // Update sales growth indicator
            const salesTrend = document.getElementById('salesTrend');
            if (salesTrend && stats.salesGrowth !== undefined) {
                const growth = stats.salesGrowth || 0;
                const isPositive = growth >= 0;
                salesTrend.className = `stat-trend ${isPositive ? 'positive' : 'negative'}`;
                salesTrend.innerHTML = `
                    <i class="fas fa-arrow-${isPositive ? 'up' : 'down'}"></i>
                    ${isPositive ? '+' : ''}${growth.toFixed(1)}%
                `;
            }
        }

        function animateValue(element, start, end, duration, isCurrency = false) {
            let startTimestamp = null;
            const step = (timestamp) => {
                if (!startTimestamp) startTimestamp = timestamp;
                const progress = Math.min((timestamp - startTimestamp) / duration, 1);
                const current = Math.floor(progress * (end - start) + start);

                if (isCurrency) {
                    element.textContent = 'KSh ' + current.toLocaleString();
                } else {
                    element.textContent = current.toLocaleString();
                }

                if (progress < 1) {
                    window.requestAnimationFrame(step);
                }
            };
            window.requestAnimationFrame(step);
        }


        // Pagination variables
        let currentPage = 1;
        let itemsPerPage = 10;
        let allSalesData = [];

        function updateRecentSalesTable(recentSales) {
            allSalesData = recentSales || [];
            displaySalesPage(currentPage);
        }

        function displaySalesPage(page) {
            const tableBody = document.getElementById('recentSalesTable');
            if (!tableBody) return;

            tableBody.innerHTML = '';

            if (!allSalesData || allSalesData.length === 0) {
                tableBody.innerHTML = '<tr><td colspan="7" style="text-align: center; padding: 2rem; color: #6b7280;">No recent sales found</td></tr>';
                updatePaginationControls(0);
                return;
            }

            const startIndex = (page - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;
            const pageData = allSalesData.slice(startIndex, endIndex);

            pageData.forEach(sale => {
                const row = document.createElement('tr');
                
                const statusClass = sale.status === 'Completed' ? 'status-active' : 'status-pending';
                const formattedDate = new Date(sale.saleDate).toLocaleDateString('en-GB');
                
                row.innerHTML = `
                    <td>${sale.saleNumber || '#' + sale.saleId}</td>
                    <td>${sale.customerName || 'Walk-in Customer'}</td>
                    <td>${sale.productName}</td>
                    <td>KSh ${sale.totalAmount.toLocaleString()}</td>
                    <td><span class="status-badge ${statusClass}">${sale.status}</span></td>
                    <td>${formattedDate}</td>
                    <td>
                        <a href="@Url.Action("Receipt", "Admin")?saleId=${sale.saleId}" 
                           class="action-btn btn-view" 
                           target="_blank"
                           title="Generate Receipt">
                            <i class="fas fa-receipt"></i>
                        </a>
                    </td>
                `;
                
                tableBody.appendChild(row);
            });

            updatePaginationControls(allSalesData.length);
        }

        function updatePaginationControls(totalItems) {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            let paginationHtml = '';

            if (totalPages > 1) {
                paginationHtml = `
                    <div class="pagination-controls" style="display: flex; justify-content: center; align-items: center; gap: 1rem; margin-top: 1rem;">
                        <button class="btn ${currentPage === 1 ? 'btn-disabled' : 'btn-secondary'}" 
                                onclick="changePage(${currentPage - 1})" 
                                ${currentPage === 1 ? 'disabled' : ''}>
                            <i class="fas fa-chevron-left"></i> Previous
                        </button>
                        <span style="color: #6b7280; font-size: 0.875rem;">
                            Page ${currentPage} of ${totalPages} (${totalItems} items)
                        </span>
                        <button class="btn ${currentPage === totalPages ? 'btn-disabled' : 'btn-secondary'}" 
                                onclick="changePage(${currentPage + 1})" 
                                ${currentPage === totalPages ? 'disabled' : ''}>
                            Next <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                `;
            }

            // Add pagination controls after the table
            let paginationContainer = document.getElementById('paginationContainer');
            if (!paginationContainer) {
                paginationContainer = document.createElement('div');
                paginationContainer.id = 'paginationContainer';
                const tableCard = document.querySelector('.table-card');
                if (tableCard) {
                    tableCard.appendChild(paginationContainer);
                }
            }
            paginationContainer.innerHTML = paginationHtml;
        }

        function changePage(newPage) {
            const totalPages = Math.ceil(allSalesData.length / itemsPerPage);
            if (newPage >= 1 && newPage <= totalPages) {
                currentPage = newPage;
                displaySalesPage(currentPage);
            }
        }

        function debugCharts() {
            console.log('=== CHART DEBUG INFO ===');
            console.log('Charts initialized:', chartsInitialized);
            console.log('Sales chart exists:', !!salesChart);
            console.log('Products chart exists:', !!productsChart);
            
            if (salesChart) {
                console.log('Sales chart data:', salesChart.data);
                console.log('Sales chart labels:', salesChart.data.labels);
                console.log('Sales chart values:', salesChart.data.datasets[0].data);
            }
            
            if (productsChart) {
                console.log('Products chart data:', productsChart.data);
                console.log('Products chart labels:', productsChart.data.labels);
                console.log('Products chart values:', productsChart.data.datasets[0].data);
            }
            
            // Force reload dashboard data
            console.log('Forcing dashboard data reload...');
            loadDashboardData();
        }

        function showToast(message, type = 'info') {
            // Create toast container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    z-index: 10000;
                    pointer-events: none;
                `;
                document.body.appendChild(toastContainer);
            }

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.style.cssText = `
                background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                margin-bottom: 0.5rem;
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
                transform: translateX(100%);
                transition: transform 0.3s ease;
                pointer-events: auto;
                max-width: 300px;
                word-wrap: break-word;
            `;
            toast.textContent = message;
            toastContainer.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.style.transform = 'translateX(0)';
            }, 100);

            // Hide and remove toast
            setTimeout(() => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => {
                    if (toastContainer.contains(toast)) {
                        toastContainer.removeChild(toast);
                    }
                }, 300);
            }, 3000);
        }

        // Debug function to check data structure
        function debugDashboardData(data) {
            console.log('=== DASHBOARD DATA DEBUG ===');
            console.log('Stats:', data.stats);
            console.log('Charts:', data.charts);
            console.log('Recent Sales:', data.recentSales);
            
            // Check if elements exist
            console.log('Elements check:');
            console.log('totalSalesValue:', document.getElementById('totalSalesValue'));
            console.log('totalOrdersValue:', document.getElementById('totalOrdersValue'));
            console.log('productsSoldValue:', document.getElementById('productsSoldValue'));
            console.log('newCustomersValue:', document.getElementById('newCustomersValue'));
            console.log('salesChart canvas:', document.getElementById('salesChart'));
            console.log('productsChart canvas:', document.getElementById('productsChart'));
            console.log('recentSalesTable:', document.getElementById('recentSalesTable'));
        }

        // Enhanced error handling
        window.addEventListener('error', function(e) {
            console.error('Global error:', e.error);
        });

        // Chart.js error handling
        Chart.defaults.onError = function(chart, args, options) {
            console.error('Chart.js error:', args);
        };
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>