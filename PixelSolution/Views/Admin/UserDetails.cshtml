@model PixelSolution.ViewModels.EmployeeDetailsViewModel
@{
    ViewData["Title"] = $"Employee Details - {Model.FullName} - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .user-details-container {
            background: #f8fafc;
            min-height: auto;
            padding-bottom: 1rem;
            max-height: none;
            overflow: visible;
        }

        /* Header Styles */
        .details-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            position: relative;
            overflow: hidden;
        }

            .details-header::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -20%;
                width: 200px;
                height: 200px;
                background: rgba(255,255,255,0.1);
                border-radius: 50%;
            }

        .header-content {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .employee-avatar-large {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: 700;
            backdrop-filter: blur(10px);
            border: 3px solid rgba(255,255,255,0.3);
            position: relative;
            flex-shrink: 0;
        }

        .status-indicator-large {
            position: absolute;
            bottom: 5px;
            right: 5px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
        }

            .status-indicator-large.active {
                background: #10b981;
            }

            .status-indicator-large.inactive {
                background: #ef4444;
            }

        .employee-info-large h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .employee-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }

        .header-badges {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .header-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
        }

        .quick-actions {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .quick-action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 8px;
            background: rgba(255,255,255,0.2);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .quick-action-btn:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
            }

        /* Content Grid */
        .content-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .info-panel, .actions-panel {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 6px rgba(0,0,0,0.08);
        }

        .panel-header {
            display: flex;
            align-items: center;
            justify-content: between;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .panel-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .panel-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
        }

        /* Info Sections */
        .info-section {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            border-left: 3px solid #667eea;
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e2e8f0;
            font-size: 0.9rem;
        }

            .info-item:last-child {
                border-bottom: none;
            }

        .info-label {
            font-weight: 600;
            color: #374151;
        }

        .info-value {
            color: #6b7280;
            text-align: right;
        }

            .info-value.highlight {
                color: #059669;
                font-weight: 600;
            }

            .info-value.warning {
                color: #dc2626;
                font-weight: 600;
            }

        /* Action Cards */
        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .action-card {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

            .action-card:hover {
                border-color: #667eea;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
            }

        .action-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.75rem;
            font-size: 1.2rem;
        }

        .action-title {
            font-size: 0.95rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .action-description {
            color: #6b7280;
            font-size: 0.8rem;
        }

        /* Overview Grid Styles */
        .overview-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

            .overview-grid .full-width {
                grid-column: 1 / -1;
            }

        .summary-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            transition: transform 0.3s ease;
        }

            .summary-card:hover {
                transform: translateY(-2px);
            }

        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
        }

            .card-header h4 {
                margin: 0;
                font-size: 1.1rem;
                font-weight: 600;
            }

        .card-body {
            padding: 1.5rem;
        }

        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            background: white;
        }

        .fine-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }

            .btn-primary:hover {
                background-color: #2563eb;
            }

        .btn-danger {
            background-color: #ef4444;
            color: white;
        }

            .btn-danger:hover {
                background-color: #dc2626;
            }

        .fine-description {
            display: block;
            font-style: italic;
            color: #6b7280;
            margin-top: 0.25rem;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

            .summary-item:last-child {
                border-bottom: none;
            }

            .summary-item .label {
                color: #64748b;
                font-weight: 500;
            }

            .summary-item .value {
                font-weight: 600;
                color: #2d3748;
            }

                .summary-item .value.success {
                    color: #059669;
                }

                .summary-item .value.warning {
                    color: #d97706;
                }

        /* Action Buttons */
        .action-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
        }

        .action-btn {
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

            .action-btn.primary {
                background: #667eea;
                color: white;
            }

                .action-btn.primary:hover {
                    background: #5a67d8;
                }

            .action-btn.warning {
                background: #ed8936;
                color: white;
            }

                .action-btn.warning:hover {
                    background: #dd6b20;
                }

            .action-btn.success {
                background: #48bb78;
                color: white;
            }

                .action-btn.success:hover {
                    background: #38a169;
                }

            .action-btn.info {
                background: #4299e1;
                color: white;
            }

                .action-btn.info:hover {
                    background: #3182ce;
                }

            .action-btn.secondary {
                background: #e2e8f0;
                color: #4a5568;
            }

                .action-btn.secondary:hover {
                    background: #cbd5e0;
                }

        /* Activity Timeline */
        .activity-timeline {
            max-height: 400px;
            overflow-y: auto;
        }

        .timeline-item {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

            .timeline-item:last-child {
                border-bottom: none;
            }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.9rem;
            flex-shrink: 0;
        }

            .timeline-icon.salary {
                background: #48bb78;
            }

            .timeline-icon.fine {
                background: #ed8936;
            }

            .timeline-icon.payment {
                background: #4299e1;
            }

        .timeline-content h6 {
            margin: 0 0 0.25rem 0;
            color: #2d3748;
            font-weight: 600;
        }

        .timeline-content p {
            margin: 0 0 0.25rem 0;
            color: #4a5568;
            font-size: 0.9rem;
        }

        .timeline-content small {
            color: #64748b;
            font-size: 0.8rem;
        }

        .no-activity {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

            .no-activity i {
                font-size: 2rem;
                margin-bottom: 0.5rem;
                display: block;
            }

        /* Tab Header */
        .tab-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #e2e8f0;
        }

            .tab-header h3 {
                margin: 0;
                color: #2d3748;
                font-size: 1.5rem;
                font-weight: 600;
            }

        .tabs-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 1px 6px rgba(0,0,0,0.08);
        }

        .tabs-header {
            display: flex;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-button {
            flex: 1;
            padding: 1rem;
            border: none;
            background: transparent;
            color: #6b7280;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            font-size: 0.9rem;
        }

            .tab-button.active {
                color: #667eea;
                background: white;
            }

                .tab-button.active::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2px;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                }

        .tab-content {
            padding: 1.5rem;
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        /* Data Tables */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            font-size: 0.85rem;
        }

            .data-table th {
                background: #f8fafc;
                padding: 0.75rem;
                text-align: left;
                font-weight: 600;
                color: #374151;
                border-bottom: 1px solid #e2e8f0;
            }

            .data-table td {
                padding: 0.75rem;
                border-bottom: 1px solid #f1f5f9;
            }

            .data-table tr:hover {
                background: #f8fafc;
            }

        /* Status Badges */
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
        }

            .status-badge.active {
                background: #dcfce7;
                color: #166534;
            }

            .status-badge.pending {
                background: #fef3c7;
                color: #92400e;
            }

            .status-badge.paid {
                background: #dcfce7;
                color: #166534;
            }

            .status-badge.failed {
                background: #fef2f2;
                color: #991b1b;
            }

        /* MODERN MODAL STYLES */
        .modal {
            display: none;
            position: fixed;
            inset: 0;
            z-index: 9999;
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(12px);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

            .modal.show {
                display: flex;
                align-items: center;
                justify-content: center;
                opacity: 1;
                padding: 1rem;
            }

        .modal-container {
            background: white;
            border-radius: 24px;
            box-shadow: 0 32px 64px rgba(0, 0, 0, 0.12), 0 0 0 1px rgba(255, 255, 255, 0.05);
            width: 100%;
            max-width: 600px;
            max-height: 90vh;
            overflow: hidden;
            transform: scale(0.95) translateY(20px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .modal.show .modal-container {
            transform: scale(1) translateY(0);
        }

        /* Modern Modal Header */
        .modern-modal-header {
            position: relative;
            padding: 2rem 2rem 1.5rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            overflow: hidden;
        }

            .modern-modal-header.salary-theme {
                background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            }

            .modern-modal-header.fine-theme {
                background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
            }

            .modern-modal-header.department-theme {
                background: linear-gradient(135deg, #3b82f6 0%, #2563eb 100%);
            }

            .modern-modal-header::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -20%;
                width: 200px;
                height: 200px;
                background: rgba(255, 255, 255, 0.1);
                border-radius: 50%;
            }

        .modern-modal-header-content {
            position: relative;
            z-index: 2;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .modern-modal-title-section {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .modern-modal-icon {
            width: 56px;
            height: 56px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.5rem;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .modern-modal-title-text h2 {
            color: white;
            font-size: 1.75rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .modern-modal-subtitle {
            color: rgba(255, 255, 255, 0.8);
            font-size: 0.95rem;
            font-weight: 500;
        }

        .modern-modal-close {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 12px;
            width: 44px;
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }

            .modern-modal-close:hover {
                background: rgba(255, 255, 255, 0.3);
                transform: scale(1.05);
            }

        /* Modern Modal Body */
        .modern-modal-body {
            padding: 2rem;
            max-height: 60vh;
            overflow-y: auto;
        }

            .modern-modal-body::-webkit-scrollbar {
                width: 6px;
            }

            .modern-modal-body::-webkit-scrollbar-track {
                background: #f1f5f9;
                border-radius: 3px;
            }

            .modern-modal-body::-webkit-scrollbar-thumb {
                background: #cbd5e1;
                border-radius: 3px;
            }

        /* Modern Form Styles */
        .modern-form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

            .modern-form-grid.full-width {
                grid-template-columns: 1fr;
            }

        .modern-form-group {
            margin-bottom: 1.5rem;
        }

        .modern-form-label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 600;
            color: #1e293b;
            font-size: 0.9rem;
            margin-bottom: 0.75rem;
        }

            .modern-form-label i {
                font-size: 1rem;
                color: #667eea;
            }

        .modern-form-control {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 500;
            background: #fafbfc;
            transition: all 0.3s ease;
            color: #1e293b;
        }

            .modern-form-control:focus {
                outline: none;
                border-color: #667eea;
                background: white;
                box-shadow: 0 0 0 4px rgba(102, 126, 234, 0.1);
                transform: translateY(-1px);
            }

            .modern-form-control:hover:not(:focus) {
                border-color: #cbd5e1;
                background: white;
            }

        textarea.modern-form-control {
            resize: vertical;
            min-height: 100px;
        }

        select.modern-form-control {
            cursor: pointer;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.75rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 3rem;
            appearance: none;
        }

        /* Modern Department Selection */
        .modern-department-list {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 16px;
            padding: 1.5rem;
            max-height: 300px;
            overflow-y: auto;
        }

        .modern-department-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 1rem;
            background: white;
            border: 2px solid transparent;
            border-radius: 12px;
            margin-bottom: 0.75rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .modern-department-item:hover {
                border-color: #667eea;
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
            }

            .modern-department-item.selected {
                border-color: #667eea;
                background: linear-gradient(135deg, #eff6ff, #f0f9ff);
            }

        .modern-department-checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            background: white;
            position: relative;
            transition: all 0.3s ease;
        }

        .modern-department-item.selected .modern-department-checkbox {
            background: #667eea;
            border-color: #667eea;
        }

            .modern-department-item.selected .modern-department-checkbox::after {
                content: '✓';
                position: absolute;
                inset: 0;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 0.75rem;
                font-weight: bold;
            }

        .modern-department-info {
            flex: 1;
        }

        .modern-department-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .modern-department-desc {
            color: #64748b;
            font-size: 0.875rem;
        }

        /* Modern Action Buttons */
        .modern-modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            padding-top: 1.5rem;
            border-top: 1px solid #e2e8f0;
            margin-top: 2rem;
        }

        .modern-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.875rem 1.75rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            position: relative;
            overflow: hidden;
        }

            .modern-btn::before {
                content: '';
                position: absolute;
                inset: 0;
                background: linear-gradient(45deg, transparent 30%, rgba(255, 255, 255, 0.3) 50%, transparent 70%);
                transform: translateX(-100%);
                transition: transform 0.6s ease;
            }

            .modern-btn:hover::before {
                transform: translateX(100%);
            }

        .modern-btn-secondary {
            background: #f1f5f9;
            color: #475569;
            border: 2px solid #e2e8f0;
        }

            .modern-btn-secondary:hover {
                background: #e2e8f0;
                border-color: #cbd5e1;
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            }

        .modern-btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: 2px solid transparent;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
        }

            .modern-btn-primary:hover {
                background: linear-gradient(135deg, #5a67d8, #6b46c1);
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(102, 126, 234, 0.5);
            }

        .modern-btn-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            border: 2px solid transparent;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.4);
        }

            .modern-btn-success:hover {
                background: linear-gradient(135deg, #059669, #047857);
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(16, 185, 129, 0.5);
            }

        .modern-btn-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            border: 2px solid transparent;
            box-shadow: 0 4px 15px rgba(245, 158, 11, 0.4);
        }

            .modern-btn-warning:hover {
                background: linear-gradient(135deg, #d97706, #b45309);
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(245, 158, 11, 0.5);
            }

        .modern-btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border: 2px solid transparent;
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.4);
        }

            .modern-btn-danger:hover {
                background: linear-gradient(135deg, #dc2626, #b91c1c);
                transform: translateY(-2px);
                box-shadow: 0 8px 30px rgba(239, 68, 68, 0.5);
            }

        /* Loading States */
        .loading {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

            .loading i {
                animation: spin 1s linear infinite;
            }

            @@keyframes spin {
            0%

        {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }

        }

        /* Form Validation */
        .modern-form-control.error {
            border-color: #ef4444;
            background: #fef2f2;
        }

            .modern-form-control.error:focus {
                border-color: #ef4444;
                box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);
            }

        .error-message {
            color: #ef4444;
            font-size: 0.875rem;
            margin-top: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Success Message */
        .success-message {
            background: linear-gradient(135deg, #dcfce7, #bbf7d0);
            color: #166534;
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            border: 2px solid #86efac;
        }

        /* Pagination Styles */
        .pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 0.5rem;
            margin-top: 1rem;
            padding: 1rem 0;
        }

        .pagination-btn {
            padding: 0.5rem 0.75rem;
            border: 1px solid #d1d5db;
            background: white;
            color: #374151;
            border-radius: 0.375rem;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 0.875rem;
        }

            .pagination-btn:hover {
                background: #f3f4f6;
                border-color: #9ca3af;
            }

            .pagination-btn.active {
                background: #3b82f6;
                color: white;
                border-color: #3b82f6;
            }

            .pagination-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

        .pagination-info {
            font-size: 0.875rem;
            color: #6b7280;
            margin: 0 1rem;
        }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            font-size: 0.85rem;
        }

            .toast.success {
                background: linear-gradient(135deg, #10b981, #059669);
            }

            .toast.error {
                background: linear-gradient(135deg, #ef4444, #dc2626);
            }

            .toast.warning {
                background: linear-gradient(135deg, #f59e0b, #d97706);
            }

            .toast.info {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
            }

        /* Responsive Design */
        @@media (max-width: 1024px) {
            .content-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .tabs-header {
                overflow-x: auto;
                white-space: nowrap;
            }
            
            .tab-button {
                min-width: 120px;
            }
        }
        
        @@media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                text-align: center;
                gap: 1rem;
            }
            
            .quick-actions {
                position: static;
                justify-content: center;
                margin-top: 1rem;
            }
            
            .actions-grid {
                grid-template-columns: 1fr;
            }
            
            .overview-grid {
                grid-template-columns: 1fr;
            }
        }
        
        @@media (max-width: 640px) {
            .modal-container {
                max-width: calc(100vw - 2rem);
                margin: 1rem;
            }

            .modern-modal-header {
                padding: 1.5rem 1.5rem 1rem;
            }

            .modern-modal-body {
                padding: 1.5rem;
            }

            .modern-form-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }

            .modern-modal-actions {
                flex-direction: column-reverse;
            }

            .modern-btn {
                width: 100%;
                justify-content: center;
            }
            
            .tabs-header {
                flex-wrap: wrap;
            }
            
            .tab-button {
                flex: 1;
                min-width: 100px;
                font-size: 0.8rem;
            }
        }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@(User.Identity.Name?.Length >= 2 ? User.Identity.Name.Substring(0, 2).ToUpper() : "U")</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>@(User.IsInRole("Admin") ? "System Administrator" : User.IsInRole("Manager") ? "Manager" : "Employee")</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Employee"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                        <i class="fas fa-shopping-cart"></i>
                        Sales
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                        <i class="fas fa-box"></i>
                        Inventory
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Users", "Admin")" class="nav-link active">
                        <i class="fas fa-users"></i>
                        Employees
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                        <i class="fas fa-building"></i>
                        Departments
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                        <i class="fas fa-truck"></i>
                        Suppliers
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                        <i class="fas fa-tags"></i>
                        Categories
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Products", "Admin")" class="nav-link">
                        <i class="fas fa-cube"></i>
                        Products
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                        <i class="fas fa-file-invoice"></i>
                        Purchase Requests
                    </a>
                </div>
            }
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                        <i class="fas fa-chart-bar"></i>
                        Reports
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Employee Details</h1>
        </div>
        <div class="header-right">
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <div class="dashboard-content user-details-container">
        <!-- Employee Header -->
        <div class="details-header">
            <div class="header-content">
                <div class="employee-avatar-large">
                    @Model.UserInitials
                    <div class="status-indicator-large @Model.Status.ToLower()"></div>
                </div>
                <div class="employee-info-large">
                    <h1>@Model.FullName</h1>
                    <div class="employee-subtitle">
                        @if (!string.IsNullOrEmpty(Model.Position))
                        {
                            <span>@Model.Position</span>
                        }
                        else
                        {
                            <span>@Model.UserType</span>
                        }
                        @if (!string.IsNullOrEmpty(Model.EmployeeNumber))
                        {
                            <span> • @Model.EmployeeNumber</span>
                        }
                    </div>
                    <div class="header-badges">
                        <span class="header-badge">@Model.Status</span>
                        <span class="header-badge">@Model.UserType</span>
                        @if (!string.IsNullOrEmpty(Model.EmploymentStatus) && Model.EmploymentStatus != "Active")
                        {
                            <span class="header-badge">@Model.EmploymentStatus</span>
                        }
                        @if (!string.IsNullOrEmpty(Model.DepartmentNames))
                        {
                            <span class="header-badge">@Model.DepartmentNames</span>
                        }
                    </div>
                </div>
                <div class="quick-actions">
                    <button class="quick-action-btn" onclick="sendMessage()" title="Send Message">
                        <i class="fas fa-envelope"></i>
                    </button>
                    <button class="quick-action-btn" onclick="printProfile()" title="Print Profile">
                        <i class="fas fa-print"></i>
                    </button>
                    <a href="@Url.Action("Users", "Admin")" class="quick-action-btn" title="Back to Users">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="content-grid">
            <!-- Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <div class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        Employee Information
                    </div>
                </div>

                <!-- Personal Information -->
                <div class="info-section">
                    <div class="section-title">
                        <i class="fas fa-id-card"></i>
                        Personal Details
                    </div>
                    <div class="info-item">
                        <span class="info-label">Full Name</span>
                        <span class="info-value">@Model.FullName</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Email</span>
                        <span class="info-value">@Model.Email</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Phone))
                    {
                        <div class="info-item">
                            <span class="info-label">Phone</span>
                            <span class="info-value">@Model.Phone</span>
                        </div>
                    }
                    <div class="info-item">
                        <span class="info-label">User Type</span>
                        <span class="info-value">@Model.UserType</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Status</span>
                        <span class="info-value">@Model.Status</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Account Created</span>
                        <span class="info-value">@Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>

                @if (Model.HasEmployeeProfile)
                {
                    <!-- Employment Information -->
                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-briefcase"></i>
                            Employment Details
                        </div>
                        @if (!string.IsNullOrEmpty(Model.EmployeeNumber))
                        {
                            <div class="info-item">
                                <span class="info-label">Employee Number</span>
                                <span class="info-value">@Model.EmployeeNumber</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Position))
                        {
                            <div class="info-item">
                                <span class="info-label">Position</span>
                                <span class="info-value">@Model.Position</span>
                            </div>
                        }
                        @if (Model.HireDate.HasValue)
                        {
                            <div class="info-item">
                                <span class="info-label">Hire Date</span>
                                <span class="info-value">@Model.HireDate.Value.ToString("MMM dd, yyyy")</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.PaymentFrequency))
                        {
                            <div class="info-item">
                                <span class="info-label">Payment Frequency</span>
                                <span class="info-value">@Model.PaymentFrequency</span>
                            </div>
                        }
                        <div class="info-item">
                            <span class="info-label">Department</span>
                            <span class="info-value">@Model.DepartmentNames</span>
                            <button class="btn btn-sm btn-outline-primary" onclick="openAssignDepartmentModal(@Model.UserId)" style="margin-left: 10px;">
                                <i class="fas fa-edit"></i> Assign
                            </button>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Employment Status</span>
                            <span class="info-value">@Model.EmploymentStatus</span>
                        </div>
                    </div>

                    <!-- Financial Information -->
                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-money-bill-wave"></i>
                            Financial Summary
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current Salary</span>
                            <span class="info-value highlight">KSh @Model.CurrentSalary.ToString("N2")</span>
                        </div>
                        @if (Model.OutstandingFines > 0)
                        {
                            <div class="info-item">
                                <span class="info-label">Outstanding Fines</span>
                                <span class="info-value warning">KSh @Model.OutstandingFines.ToString("N2")</span>
                            </div>
                        }
                        <div class="info-item">
                            <span class="info-label">Total Paid</span>
                            <span class="info-value">KSh @Model.TotalPaid.ToString("N2")</span>
                        </div>
                    </div>
                }

                <!-- Performance Metrics -->
                <div class="info-section">
                    <div class="section-title">
                        <i class="fas fa-chart-line"></i>
                        Performance
                    </div>
                    <div class="info-item">
                        <span class="info-label">Total Sales</span>
                        <span class="info-value highlight">@Model.TotalSales</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Sales Value</span>
                        <span class="info-value highlight">KSh @Model.TotalSalesAmount.ToString("N2")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Today's Sales</span>
                        <span class="info-value">@Model.SalesToday</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Monthly Sales</span>
                        <span class="info-value">@Model.SalesThisMonth</span>
                    </div>
                </div>
            </div>

            <!-- Actions Panel -->
            <div class="actions-panel">
                <div class="panel-header">
                    <div class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-tools"></i>
                        </div>
                        Quick Actions
                    </div>
                </div>

                <div class="actions-grid">
                    @if (!Model.HasEmployeeProfile)
                    {
                        <div class="action-card" onclick="createEmployeeProfile()">
                            <div class="action-icon">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <div class="action-title">Create Profile</div>
                            <div class="action-description">Set up employee profile and salary</div>
                        </div>
                    }
                    else
                    {
                        <div class="action-card" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-dollar-sign"></i>
                            </div>
                            <div class="action-title">Manage Salary</div>
                            <div class="action-description">Update salary or add bonuses</div>
                        </div>

                        <div class="action-card" onclick="manageEmployeeFines(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="action-title">Manage Fines</div>
                            <div class="action-description">Issue or manage fines</div>
                        </div>

                        <div class="action-card" onclick="processEmployeePayment(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div class="action-title">Process Payment</div>
                            <div class="action-description">Record salary payments</div>
                        </div>
                    }

                    <div class="action-card" onclick="generateReport()">
                        <div class="action-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="action-title">Generate Report</div>
                        <div class="action-description">Performance and activity reports</div>
                    </div>

                    <div class="action-card" onclick="viewSales()">
                        <div class="action-icon">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <div class="action-title">View Sales</div>
                        <div class="action-description">Check sales history</div>
                    </div>

                    <div class="action-card" onclick="sendEmailToEmployee(@Model.UserId, '@Model.FullName')">
                        <div class="action-icon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <div class="action-title">Send Email</div>
                        <div class="action-description">Send email to employee</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee Management Tabs Section -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="switchTab('overview')">
                    <i class="fas fa-chart-pie"></i>
                    Overview
                </button>
                <button class="tab-button" onclick="switchTab('salary')">
                    <i class="fas fa-money-bill-wave"></i>
                    Salary Management
                </button>
                <button class="tab-button" onclick="switchTab('fines')">
                    <i class="fas fa-exclamation-triangle"></i>
                    Fines & Deductions
                </button>
                <button class="tab-button" onclick="switchTab('payments')">
                    <i class="fas fa-credit-card"></i>
                    Payment History
                </button>
                <button class="tab-button" onclick="switchTab('performance')">
                    <i class="fas fa-chart-line"></i>
                    Performance Analytics
                </button>
            </div>

            <!-- Overview Tab -->
            <div id="overview-tab" class="tab-content active">
                <div class="overview-grid">
                    <!-- Financial Summary Card -->
                    <div class="summary-card">
                        <div class="card-header">
                            <h4><i class="fas fa-wallet"></i> Financial Summary</h4>
                        </div>
                        <div class="card-body">
                            <div class="summary-item">
                                <span class="label">Current Salary</span>
                                <span class="value">KSh @(Model.BaseSalary?.ToString("N2") ?? "0.00")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Total Paid</span>
                                <span class="value success">KSh @Model.TotalSalariesPaid.ToString("N2")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Outstanding Fines</span>
                                <span class="value warning">KSh @Model.OutstandingFines.ToString("N2")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Total Fines</span>
                                <span class="value">KSh @Model.TotalFines.ToString("N2")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Actions Card -->
                    <div class="summary-card">
                        <div class="card-header">
                            <h4><i class="fas fa-tools"></i> Quick Actions</h4>
                        </div>
                        <div class="card-body">
                            <div class="action-buttons">
                                @if (Model.HasEmployeeProfile)
                                {
                                    <button class="action-btn primary" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-dollar-sign"></i>
                                        Update Salary
                                    </button>
                                    <button class="action-btn warning" onclick="manageEmployeeFines(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Issue Fine
                                    </button>
                                    <button class="action-btn success" onclick="processEmployeePayment(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-credit-card"></i>
                                        Process Payment
                                    </button>
                                }
                                else
                                {
                                    <button class="action-btn primary" onclick="createEmployeeProfile()">
                                        <i class="fas fa-user-plus"></i>
                                        Create Employee Profile
                                    </button>
                                }
                                <button class="action-btn info" onclick="sendEmailToEmployee(@Model.UserId, '@Model.FullName')">
                                    <i class="fas fa-envelope"></i>
                                    Send Email
                                </button>
                                <button class="action-btn secondary" onclick="generateReport()">
                                    <i class="fas fa-file-alt"></i>
                                    Generate Report
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity Card -->
                    <div class="summary-card full-width">
                        <div class="card-header">
                            <h4><i class="fas fa-clock"></i> Recent Activity</h4>
                        </div>
                        <div class="card-body">
                            <div class="activity-timeline">
                                @if (Model.RecentSalaries?.Any() == true)
                                {
                                    @foreach (var salary in Model.RecentSalaries.Take(3))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon salary">
                                                <i class="fas fa-money-bill-wave"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Salary Update</h6>
                                                <p>@salary.SalaryType salary set to KSh @salary.Amount.ToString("N2")</p>
                                                <small>@salary.EffectiveDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (Model.RecentFines?.Any() == true)
                                {
                                    @foreach (var fine in Model.RecentFines.Take(2))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon fine">
                                                <i class="fas fa-exclamation-triangle"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Fine Issued</h6>
                                                <p>@fine.Reason - KSh @fine.Amount.ToString("N2")</p>
                                                <small>@fine.IssuedDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (Model.RecentPayments?.Any() == true)
                                {
                                    @foreach (var payment in Model.RecentPayments.Take(2))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon payment">
                                                <i class="fas fa-credit-card"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Payment Processed</h6>
                                                <p>@payment.PaymentPeriod - KSh @payment.NetPay.ToString("N2")</p>
                                                <small>@payment.PaymentDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (!(Model.RecentSalaries?.Any() == true || Model.RecentFines?.Any() == true || Model.RecentPayments?.Any() == true))
                                {
                                    <div class="no-activity">
                                        <i class="fas fa-inbox"></i>
                                        <p>No recent activity found</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Salary Management Tab -->
            <div id="salary-tab" class="tab-content">
                <div class="tab-header">
                    <h3>Salary Management</h3>
                    @if (Model.HasEmployeeProfile)
                    {
                        <button class="btn btn-primary" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                            <i class="fas fa-plus"></i> Add New Salary
                        </button>
                    }
                </div>
                @if (Model.SalaryHistory?.Any() == true)
                {
                    <div id="salaryTableContainer">
                        <table class="data-table" id="salaryTable">
                            <thead>
                                <tr>
                                    <th>Effective Date</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Notes</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="salaryTableBody">
                                @foreach (var salary in Model.SalaryHistory)
                                {
                                    <tr class="salary-row">
                                        <td>@salary.EffectiveDate.ToString("MMM dd, yyyy")</td>
                                        <td>@salary.SalaryType</td>
                                        <td>KSh @salary.Amount.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @(salary.Status?.ToLower() == "active" ? "active" : "")">
                                                @(salary.Status ?? "Inactive")
                                            </span>
                                        </td>
                                        <td>@(salary.Notes ?? "N/A")</td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="btn btn-sm btn-primary"
                                                        onclick="editSalary(@salary.SalaryId, @salary.Amount, '@salary.SalaryType', '@salary.EffectiveDate.ToString("yyyy-MM-dd")', '@(salary.Status ?? "Active")', '@(salary.Notes ?? "")')"
                                                        title="Edit Salary">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger"
                                                        onclick="deleteSalary(@salary.SalaryId)"
                                                        title="Delete Salary">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="pagination-controls" id="salaryPagination"></div>
                    </div>
                }
                else
                {
                    <p>No salary history found.</p>
                }
            </div>

            <!-- Fines Tab -->
            <div id="fines-tab" class="tab-content">
                <h3>Fines & Deductions</h3>
                @if (Model.FineHistory?.Any() == true)
                {
                    <div id="fineTableContainer">
                        <table class="data-table" id="fineTable">
                            <thead>
                                <tr>
                                    <th>Issue Date</th>
                                    <th>Reason</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Issued By</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="fineTableBody">
                                @foreach (var fine in Model.FineHistory)
                                {
                                    <tr class="fine-row">
                                        <td>@fine.IssuedDate.ToString("MMM dd, yyyy")</td>
                                        <td>@fine.Reason</td>
                                        <td>KSh @fine.Amount.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @fine.Status.ToLower()">
                                                @fine.Status
                                            </span>
                                        </td>
                                        <td>@fine.IssuedByUserName</td>
                                        <td>
                                            <div class="action-buttons">
                                                <button class="btn btn-sm btn-primary"
                                                        onclick="editFine(@fine.FineId, @fine.Amount, '@fine.Reason', '@(fine.Description ?? "")', '@(fine.DueDate?.ToString("yyyy-MM-dd") ?? "")', '@fine.Status')"
                                                        title="Edit Fine">
                                                    <i class="fas fa-edit"></i>
                                                </button>
                                                <button class="btn btn-sm btn-danger"
                                                        onclick="deleteFine(@fine.FineId)"
                                                        title="Delete Fine">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="pagination-controls" id="finePagination"></div>
                    </div>
                }
                else
                {
                    <p>No fines or deductions found.</p>
                }
            </div>

            <!-- Payments Tab -->
            <div id="payments-tab" class="tab-content">
                <h3>Payment History</h3>
                @if (Model.PaymentHistory?.Any() == true)
                {
                    <div id="paymentTableContainer">
                        <table class="data-table" id="paymentTable">
                            <thead>
                                <tr>
                                    <th>Payment Date</th>
                                    <th>Payment #</th>
                                    <th>Period</th>
                                    <th>Gross Pay</th>
                                    <th>Net Pay</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="paymentTableBody">
                                @foreach (var payment in Model.PaymentHistory)
                                {
                                    <tr class="payment-row">
                                        <td>@payment.PaymentDate.ToString("MMM dd, yyyy")</td>
                                        <td>@payment.PaymentNumber</td>
                                        <td>@payment.PaymentPeriod</td>
                                        <td>KSh @payment.GrossPay.ToString("N2")</td>
                                        <td>KSh @payment.NetPay.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @payment.Status.ToLower()">
                                                @payment.Status
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <div class="pagination-controls" id="paymentPagination"></div>
                    </div>
                }
                else
                {
                    <p>No payment history found.</p>
                }
            </div>

            <!-- Performance Tab -->
            <div id="performance-tab" class="tab-content">
                <h3>Performance Analytics</h3>
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-trophy"></i>
                            Sales Performance
                        </div>
                        <div class="info-item">
                            <span class="info-label">Total Sales</span>
                            <span class="info-value highlight">@Model.TotalSales</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Total Value</span>
                            <span class="info-value highlight">KSh @Model.TotalSalesAmount.ToString("N2")</span>
                        </div>
                        @if (Model.TotalSales > 0)
                        {
                            <div class="info-item">
                                <span class="info-label">Average Sale</span>
                                <span class="info-value">KSh @Model.AverageSaleAmount.ToString("N2")</span>
                            </div>
                        }
                    </div>

                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-calendar-day"></i>
                            Recent Activity
                        </div>
                        <div class="info-item">
                            <span class="info-label">Today's Sales</span>
                            <span class="info-value">@Model.SalesToday</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Today's Value</span>
                            <span class="info-value">KSh @Model.SalesTodayAmount.ToString("N2")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Monthly Sales</span>
                            <span class="info-value">@Model.SalesThisMonth</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- MODERN EDIT SALARY MODAL -->
<div class="modal" id="editSalaryModal">
    <div class="modal-container">
        <div class="modern-modal-header salary-theme">
            <div class="modern-modal-header-content">
                <div class="modern-modal-title-section">
                    <div class="modern-modal-icon">
                        <i class="fas fa-dollar-sign"></i>
                    </div>
                    <div class="modern-modal-title-text">
                        <h2>Edit Salary</h2>
                        <p class="modern-modal-subtitle">Update employee compensation details</p>
                    </div>
                </div>
                <button class="modern-modal-close" onclick="closeEditSalaryModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <div class="modern-modal-body">
            <form id="editSalaryForm">
                <input type="hidden" id="editSalaryId">

                <div class="modern-form-grid">
                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-money-bill-wave"></i>
                            Salary Amount (KSh)
                        </label>
                        <input type="number" id="editSalaryAmount" class="modern-form-control"
                               step="0.01" min="0" required placeholder="Enter amount">
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-tag"></i>
                            Salary Type
                        </label>
                        <select id="editSalaryType" class="modern-form-control" required>
                            <option value="">Select type</option>
                            <option value="Base">Base Salary</option>
                            <option value="Bonus">Bonus</option>
                            <option value="Overtime">Overtime</option>
                            <option value="Commission">Commission</option>
                            <option value="Allowance">Allowance</option>
                        </select>
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-calendar"></i>
                            Effective Date
                        </label>
                        <input type="date" id="editSalaryEffectiveDate" class="modern-form-control" required>
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-info-circle"></i>
                            Status
                        </label>
                        <select id="editSalaryStatus" class="modern-form-control" required>
                            <option value="">Select status</option>
                            <option value="Active">Active</option>
                            <option value="Inactive">Inactive</option>
                            <option value="Pending">Pending</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                </div>

                <div class="modern-form-group">
                    <label class="modern-form-label">
                        <i class="fas fa-sticky-note"></i>
                        Notes (Optional)
                    </label>
                    <textarea id="editSalaryNotes" class="modern-form-control" rows="3"
                              placeholder="Add any relevant notes about this salary entry..."></textarea>
                </div>

                <div class="modern-modal-actions">
                    <button type="button" class="modern-btn modern-btn-secondary" onclick="closeEditSalaryModal()">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button type="button" class="modern-btn modern-btn-success" onclick="submitSalaryEdit()">
                        <i class="fas fa-save"></i>
                        Update Salary
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- MODERN EDIT FINE MODAL -->
<div class="modal" id="editFineModal">
    <div class="modal-container">
        <div class="modern-modal-header fine-theme">
            <div class="modern-modal-header-content">
                <div class="modern-modal-title-section">
                    <div class="modern-modal-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="modern-modal-title-text">
                        <h2>Edit Fine</h2>
                        <p class="modern-modal-subtitle">Update employee fine details</p>
                    </div>
                </div>
                <button class="modern-modal-close" onclick="closeEditFineModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <div class="modern-modal-body">
            <form id="editFineForm">
                <input type="hidden" id="editFineId">

                <div class="modern-form-grid">
                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-money-bill" style="color: #f59e0b;"></i>
                            Fine Amount (KSh)
                        </label>
                        <input type="number" id="editFineAmount" class="modern-form-control"
                               step="0.01" min="0" required placeholder="Enter fine amount">
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-clipboard-list" style="color: #d97706;"></i>
                            Fine Reason
                        </label>
                        <select id="editFineReason" class="modern-form-control" required>
                            <option value="">Select reason</option>
                            <option value="Lateness">Lateness</option>
                            <option value="Absence">Unauthorized Absence</option>
                            <option value="Misconduct">Misconduct</option>
                            <option value="Damage">Property Damage</option>
                            <option value="Uniform">Uniform Violation</option>
                            <option value="Policy">Policy Violation</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-calendar" style="color: #3b82f6;"></i>
                            Due Date
                        </label>
                        <input type="date" id="editFineDueDate" class="modern-form-control" required>
                    </div>

                    <div class="modern-form-group">
                        <label class="modern-form-label">
                            <i class="fas fa-info-circle" style="color: #10b981;"></i>
                            Status
                        </label>
                        <select id="editFineStatus" class="modern-form-control" required>
                            <option value="">Select status</option>
                            <option value="Pending">Pending</option>
                            <option value="Paid">Paid</option>
                            <option value="Waived">Waived</option>
                            <option value="Overdue">Overdue</option>
                            <option value="Cancelled">Cancelled</option>
                        </select>
                    </div>
                </div>

                <div class="modern-form-group">
                    <label class="modern-form-label">
                        <i class="fas fa-align-left" style="color: #8b5cf6;"></i>
                        Description
                    </label>
                    <textarea id="editFineDescription" class="modern-form-control" rows="4" required
                              placeholder="Provide detailed description of the violation and circumstances..."></textarea>
                </div>

                <div class="modern-modal-actions">
                    <button type="button" class="modern-btn modern-btn-secondary" onclick="closeEditFineModal()">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button type="button" class="modern-btn modern-btn-danger" onclick="deleteFineEntry()">
                        <i class="fas fa-trash"></i>
                        Delete Fine
                    </button>
                    <button type="button" class="modern-btn modern-btn-warning" onclick="submitFineEdit()">
                        <i class="fas fa-save"></i>
                        Update Fine
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- MODERN ASSIGN DEPARTMENTS MODAL -->
<div class="modal" id="assignDepartmentModal">
    <div class="modal-container">
        <div class="modern-modal-header department-theme">
            <div class="modern-modal-header-content">
                <div class="modern-modal-title-section">
                    <div class="modern-modal-icon">
                        <i class="fas fa-building"></i>
                    </div>
                    <div class="modern-modal-title-text">
                        <h2>Assign Departments</h2>
                        <p class="modern-modal-subtitle">Manage employee department assignments</p>
                    </div>
                </div>
                <button class="modern-modal-close" onclick="closeAssignDepartmentModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>

        <div class="modern-modal-body">
            <form id="assignDepartmentForm">
                <div class="modern-form-group">
                    <label class="modern-form-label">
                        <i class="fas fa-users" style="color: #3b82f6;"></i>
                        Available Departments
                    </label>
                    <p style="color: #64748b; font-size: 0.9rem; margin-bottom: 1rem;">
                        Select one or more departments to assign to this employee
                    </p>

                    <div class="modern-department-list" id="modernDepartmentList">
                        <!-- Departments will be loaded here dynamically -->
                    </div>
                </div>

                <div class="modern-modal-actions">
                    <button type="button" class="modern-btn modern-btn-secondary" onclick="closeAssignDepartmentModal()">
                        <i class="fas fa-times"></i>
                        Cancel
                    </button>
                    <button type="button" class="modern-btn modern-btn-primary" onclick="submitDepartmentAssignment()">
                        <i class="fas fa-check"></i>
                        Assign Departments
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
                var currentUserId = @Model.UserId;
                var currentUserName = '@Model.FullName';

                console.log('DEBUG: currentUserId =', currentUserId);
                console.log('DEBUG: Model.UserId =', @Model.UserId);
                console.log('DEBUG: currentUserName =', currentUserName);

                function switchTab(tabName) {
                    // Hide all tab contents
                    document.querySelectorAll('.tab-content').forEach(tab => {
                        tab.classList.remove('active');
                    });

                    // Remove active class from all tab buttons
                    document.querySelectorAll('.tab-button').forEach(btn => {
                        btn.classList.remove('active');
                    });

                    // Show selected tab and mark button as active
                    document.getElementById(tabName + '-tab').classList.add('active');
                    event.target.classList.add('active');
                }

                // MODERN MODAL FUNCTIONS
                function openEditSalaryModal(salaryId, amount, salaryType, effectiveDate, status, notes) {
                    const modal = document.getElementById('editSalaryModal');

                    // Populate form with existing data if editing
                    if (salaryId) {
                        document.getElementById('editSalaryId').value = salaryId;
                        document.getElementById('editSalaryAmount').value = amount || '';
                        document.getElementById('editSalaryType').value = salaryType || '';
                        document.getElementById('editSalaryEffectiveDate').value = effectiveDate ? effectiveDate.split('T')[0] : '';
                        document.getElementById('editSalaryStatus').value = status || '';
                        document.getElementById('editSalaryNotes').value = notes || '';
                    } else {
                        // Clear form for new entry
                        document.getElementById('editSalaryForm').reset();
                        document.getElementById('editSalaryId').value = '';
                        document.getElementById('editSalaryEffectiveDate').value = new Date().toISOString().split('T')[0];
                    }

                    modal.classList.add('show');
                }

                function closeEditSalaryModal() {
                    document.getElementById('editSalaryModal').classList.remove('show');
                    clearFormErrors();
                }

                function openEditFineModal(fineId, amount, reason, description, dueDate, status) {
                    const modal = document.getElementById('editFineModal');

                    // Populate form with existing data if editing
                    if (fineId) {
                        document.getElementById('editFineId').value = fineId;
                        document.getElementById('editFineAmount').value = amount || '';
                        document.getElementById('editFineReason').value = reason || '';
                        document.getElementById('editFineDescription').value = description || '';
                        document.getElementById('editFineDueDate').value = dueDate ? dueDate.split('T')[0] : '';
                        document.getElementById('editFineStatus').value = status || '';
                    } else {
                        // Clear form for new entry
                        document.getElementById('editFineForm').reset();
                        document.getElementById('editFineId').value = '';
                        // Set due date to 30 days from now
                        const dueDate = new Date();
                        dueDate.setDate(dueDate.getDate() + 30);
                        document.getElementById('editFineDueDate').value = dueDate.toISOString().split('T')[0];
                    }

                    modal.classList.add('show');
                }

                function closeEditFineModal() {
                    document.getElementById('editFineModal').classList.remove('show');
                    clearFormErrors();
                }

                function openAssignDepartmentModal(userId) {
                    const modal = document.getElementById('assignDepartmentModal');

                    // Load departments dynamically
                    loadDepartments(userId);

                    modal.classList.add('show');
                }

                function closeAssignDepartmentModal() {
                    document.getElementById('assignDepartmentModal').classList.remove('show');
                }

                // FORM SUBMISSION FUNCTIONS
                function submitSalaryEdit() {
                    if (!validateSalaryForm()) {
                        return;
                    }

                    const formData = {
                        SalaryId: parseInt(document.getElementById('editSalaryId').value) || 0,
                        UserId: currentUserId,
                        Amount: parseFloat(document.getElementById('editSalaryAmount').value),
                        SalaryType: document.getElementById('editSalaryType').value,
                        EffectiveDate: document.getElementById('editSalaryEffectiveDate').value,
                        Status: document.getElementById('editSalaryStatus').value,
                        Notes: document.getElementById('editSalaryNotes').value
                    };

                    console.log('DEBUG: Salary data being sent:', formData);

                    // Show loading state
                    const button = event.target;
                    const originalText = button.innerHTML;
                    button.innerHTML = '<span class="loading"><i class="fas fa-spinner"></i>Updating...</span>';
                    button.disabled = true;

                    const isEdit = formData.SalaryId > 0;
                    const url = isEdit ? '/Admin/UpdateEmployeeSalaryEntry' : '/Admin/UpdateEmployeeSalary';

                    fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify(formData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('DEBUG: Response data:', data);
                        if (data.success) {
                            showSuccessMessage('Salary updated successfully!');
                            setTimeout(() => {
                                closeEditSalaryModal();
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('Error: ' + (data.message || 'Failed to update fine'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('DEBUG: Fetch error:', error);
                        showToast('Error updating fine: ' + error.message, 'error');
                    })
                    .finally(() => {
                        // Reset button
                        button.innerHTML = originalText;
                        button.disabled = false;
                    });
                }

                function deleteFineEntry() {
                    const fineId = document.getElementById('editFineId').value;

                    if (!fineId || !confirm('Are you sure you want to delete this fine? This action cannot be undone.')) {
                        return;
                    }

                    // Show loading state
                    const button = event.target;
                    const originalText = button.innerHTML;
                    button.innerHTML = '<span class="loading"><i class="fas fa-spinner"></i>Deleting...</span>';
                    button.disabled = true;

                    fetch('/Admin/DeleteEmployeeFine', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({ FineId: parseInt(fineId) })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showSuccessMessage('Fine deleted successfully!');
                            setTimeout(() => {
                                closeEditFineModal();
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('Error: ' + (data.message || 'Failed to delete fine'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error deleting fine: ' + error.message, 'error');
                    })
                    .finally(() => {
                        // Reset button
                        button.innerHTML = originalText;
                        button.disabled = false;
                    });
                }

                function submitDepartmentAssignment() {
                    const selectedDepartments = [];
                    document.querySelectorAll('.modern-department-item.selected').forEach(item => {
                        const deptId = parseInt(item.dataset.departmentId);
                        if (deptId) {
                            selectedDepartments.push(deptId);
                        }
                    });

                    const assignmentData = {
                        UserId: currentUserId,
                        DepartmentIds: selectedDepartments
                    };

                    console.log('DEBUG: Department assignment data:', assignmentData);

                    // Show loading state
                    const button = event.target;
                    const originalText = button.innerHTML;
                    button.innerHTML = '<span class="loading"><i class="fas fa-spinner"></i>Assigning...</span>';
                    button.disabled = true;

                    fetch('/Admin/AssignUserToDepartments', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify(assignmentData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showSuccessMessage(`${selectedDepartments.length} department(s) assigned successfully!`);
                            setTimeout(() => {
                                closeAssignDepartmentModal();
                                location.reload();
                            }, 1500);
                        } else {
                            showToast('Error: ' + (data.message || 'Failed to assign departments'), 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('Error assigning departments: ' + error.message, 'error');
                    })
                    .finally(() => {
                        // Reset button
                        button.innerHTML = originalText;
                        button.disabled = false;
                    });
                }

                // DEPARTMENT MANAGEMENT
                function toggleModernDepartment(element) {
                    element.classList.toggle('selected');
                }

                async function loadDepartments(userId) {
                    try {
                        const response = await fetch('/Admin/GetAllDepartments');
                        if (!response.ok) {
                            throw new Error('Failed to fetch departments');
                        }
                        const departments = await response.json();

                        // Get user's current departments
                        const userDeptResponse = await fetch(`/Admin/GetUserDepartments?userId=${userId}`);
                        let userDepartments = [];
                        if (userDeptResponse.ok) {
                            userDepartments = await userDeptResponse.json();
                        }

                        const departmentList = document.getElementById('modernDepartmentList');
                        departmentList.innerHTML = '';

                        departments.forEach(dept => {
                            const isSelected = userDepartments.some(ud => ud.departmentId === dept.departmentId);

                            const departmentDiv = document.createElement('div');
                            departmentDiv.className = 'modern-department-item' + (isSelected ? ' selected' : '');
                            departmentDiv.dataset.departmentId = dept.departmentId;
                            departmentDiv.onclick = () => toggleModernDepartment(departmentDiv);

                            departmentDiv.innerHTML = `
                                <div class="modern-department-checkbox"></div>
                                <div class="modern-department-info">
                                    <div class="modern-department-name">
                                        <i class="fas fa-building" style="color: #3b82f6; margin-right: 0.5rem;"></i>
                                        ${dept.name}
                                    </div>
                                    <div class="modern-department-desc">${dept.description || 'No description available'}</div>
                                </div>
                            `;

                            departmentList.appendChild(departmentDiv);
                        });
                    } catch (error) {
                        console.error('Error loading departments:', error);
                        showToast('Error loading departments', 'error');
                    }
                }

                // FORM VALIDATION FUNCTIONS
                function validateSalaryForm() {
                    const amount = document.getElementById('editSalaryAmount');
                    const type = document.getElementById('editSalaryType');
                    const date = document.getElementById('editSalaryEffectiveDate');
                    const status = document.getElementById('editSalaryStatus');

                    let isValid = true;

                    // Clear previous errors
                    clearFormErrors();

                    if (!amount.value || parseFloat(amount.value) <= 0) {
                        showFieldError(amount, 'Please enter a valid amount');
                        isValid = false;
                    }

                    if (!type.value) {
                        showFieldError(type, 'Please select a salary type');
                        isValid = false;
                    }

                    if (!date.value) {
                        showFieldError(date, 'Please select an effective date');
                        isValid = false;
                    }

                    if (!status.value) {
                        showFieldError(status, 'Please select a status');
                        isValid = false;
                    }

                    return isValid;
                }

                function validateFineForm() {
                    const amount = document.getElementById('editFineAmount');
                    const reason = document.getElementById('editFineReason');
                    const description = document.getElementById('editFineDescription');
                    const dueDate = document.getElementById('editFineDueDate');
                    const status = document.getElementById('editFineStatus');

                    let isValid = true;

                    // Clear previous errors
                    clearFormErrors();

                    if (!amount.value || parseFloat(amount.value) <= 0) {
                        showFieldError(amount, 'Please enter a valid fine amount');
                        isValid = false;
                    }

                    if (!reason.value) {
                        showFieldError(reason, 'Please select a reason');
                        isValid = false;
                    }

                    if (!description.value || description.value.trim().length < 10) {
                        showFieldError(description, 'Please provide a detailed description (minimum 10 characters)');
                        isValid = false;
                    }

                    if (!dueDate.value) {
                        showFieldError(dueDate, 'Please select a due date');
                        isValid = false;
                    }

                    if (!status.value) {
                        showFieldError(status, 'Please select a status');
                        isValid = false;
                    }

                    return isValid;
                }

                function showFieldError(field, message) {
                    field.classList.add('error');

                    // Remove existing error message
                    const existingError = field.parentNode.querySelector('.error-message');
                    if (existingError) {
                        existingError.remove();
                    }

                    // Add error message
                    const errorDiv = document.createElement('div');
                    errorDiv.className = 'error-message';
                    errorDiv.innerHTML = `<i class="fas fa-exclamation-circle"></i>${message}`;
                    field.parentNode.appendChild(errorDiv);
                }

                function clearFormErrors() {
                    // Remove error classes
                    document.querySelectorAll('.modern-form-control.error').forEach(field => {
                        field.classList.remove('error');
                    });

                    // Remove error messages
                    document.querySelectorAll('.error-message').forEach(error => {
                        error.remove();
                    });
                }

                function showSuccessMessage(message) {
                    // Remove existing success messages
                    document.querySelectorAll('.success-message').forEach(msg => msg.remove());

                    // Create success message
                    const successDiv = document.createElement('div');
                    successDiv.className = 'success-message';
                    successDiv.innerHTML = `<i class="fas fa-check-circle"></i>${message}`;

                    // Insert at the top of the active modal body
                    const activeModal = document.querySelector('.modal.show .modern-modal-body');
                    if (activeModal) {
                        activeModal.insertBefore(successDiv, activeModal.firstChild);

                        // Remove after 3 seconds
                        setTimeout(() => {
                            if (successDiv.parentNode) {
                                successDiv.remove();
                            }
                        }, 3000);
                    }
                }

                // EXISTING FUNCTIONS INTEGRATION
                function sendEmailToEmployee(userId, userName) {
                    console.log('Sending email to user:', userId, userName);

                    // Create and show email modal
                    const emailModal = document.createElement('div');
                    emailModal.className = 'modal show';
                    emailModal.id = 'emailModal';
                    emailModal.innerHTML = `
                        <div class="modal-container">
                            <div class="modern-modal-header">
                                <div class="modern-modal-header-content">
                                    <div class="modern-modal-title-section">
                                        <div class="modern-modal-icon">
                                            <i class="fas fa-envelope"></i>
                                        </div>
                                        <div class="modern-modal-title-text">
                                            <h2>Send Email to ${userName}</h2>
                                            <p class="modern-modal-subtitle">Send professional communication</p>
                                        </div>
                                    </div>
                                    <button class="modern-modal-close" onclick="closeEmailModal()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="modern-modal-body">
                                <div class="modern-form-group">
                                    <label class="modern-form-label">Email Templates</label>
                                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 0.5rem; margin-bottom: 1rem;">
                                        <button type="button" class="modern-btn modern-btn-secondary" onclick="useWelcomeTemplate()">
                                            <i class="fas fa-hand-wave"></i> Welcome
                                        </button>
                                        <button type="button" class="modern-btn modern-btn-secondary" onclick="usePaymentDelayTemplate()">
                                            <i class="fas fa-clock"></i> Payment Delay
                                        </button>
                                        <button type="button" class="modern-btn modern-btn-secondary" onclick="useTerminationTemplate()">
                                            <i class="fas fa-user-times"></i> Termination
                                        </button>
                                    </div>
                                </div>
                                <form id="emailForm">
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Subject *</label>
                                        <input type="text" id="emailSubject" class="modern-form-control" required>
                                    </div>
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Message *</label>
                                        <textarea id="emailBody" class="modern-form-control" rows="8" required></textarea>
                                    </div>
                                    <div class="modern-modal-actions">
                                        <button type="button" class="modern-btn modern-btn-secondary" onclick="closeEmailModal()">Cancel</button>
                                        <button type="button" class="modern-btn modern-btn-primary" onclick="sendEmail(${userId})">
                                            <i class="fas fa-paper-plane"></i> Send Email
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    `;
                    document.body.appendChild(emailModal);
                }

                function useWelcomeTemplate() {
                    document.getElementById('emailSubject').value = 'Welcome to PixelSolution POS Team!';
                    document.getElementById('emailBody').value = `Dear ${currentUserName},

        Welcome to the PixelSolution POS team! We are excited to have you join our organization.

        As a new member of our team, you will have access to our comprehensive point-of-sale system and employee management platform. Your account has been set up and you can now access all the features relevant to your role.

        Here are some important details:
        • Your employee profile has been created
        • You can access the system using your provided credentials
        • Training materials and resources are available in your dashboard
        • Your direct supervisor will contact you shortly with additional information

        We look forward to working with you and wish you success in your new role.

        If you have any questions or need assistance, please don't hesitate to contact your manager or the HR department.

        Best regards,
        PixelSolution Management Team`;
                }

                function usePaymentDelayTemplate() {
                    document.getElementById('emailSubject').value = 'Important Notice: Payment Delay Notification';
                    document.getElementById('emailBody').value = `Dear ${currentUserName},

        We hope this message finds you well.

        We are writing to inform you that there will be a slight delay in processing salary payments this month due to unavoidable circumstances beyond our control.

        Important Details:
        • Payment delay: Approximately 3-5 business days
        • Reason: Technical issues with our banking partner
        • Expected payment date: [Please specify date]
        • All payments will be processed with full amounts as scheduled

        We sincerely apologize for any inconvenience this may cause and appreciate your understanding during this time. We are working diligently to resolve the issue and ensure this does not happen again in the future.

        If you have any urgent financial concerns or questions regarding this delay, please contact the HR department immediately.

        Thank you for your patience and continued dedication to PixelSolution.

        Best regards,
        PixelSolution Management Team`;
                }

                function useTerminationTemplate() {
                    document.getElementById('emailSubject').value = 'Important Notice: Employment Status Update';
                    document.getElementById('emailBody').value = `Dear ${currentUserName},

        We regret to inform you that your employment with PixelSolution POS will be terminated effective [Date].

        This decision was made after careful consideration and is final. Your access to company systems and facilities will be deactivated on your last day of employment.

        Final Employment Details:
        • Last working day: [Please specify date]
        • Final paycheck: Will be processed according to company policy
        • Company property: Must be returned before your last day
        • Benefits: Will continue as per company policy and applicable laws

        If you believe this decision was made in error or have concerns about the termination process, you have the right to contact your direct manager or the business owner to discuss the matter further.

        We wish you the best in your future endeavors.

        Please contact the HR department if you have any questions regarding your final paycheck, benefits, or the transition process.

        Sincerely,
        PixelSolution Management Team`;
                }

                function closeEmailModal() {
                    const modal = document.getElementById('emailModal');
                    if (modal) {
                        modal.remove();
                    }
                }

                function sendEmail(userId) {
                    const subject = document.getElementById('emailSubject').value;
                    const body = document.getElementById('emailBody').value;

                    if (!subject || !body) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    fetch('/Admin/SendEmployeeEmail', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify({
                            UserId: userId,
                            Subject: subject,
                            Body: body
                        })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message || 'Email sent successfully!', 'success');
                            closeEmailModal();
                        } else {
                            showToast(data.message || 'Failed to send email', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while sending email', 'error');
                    });
                }

                function generateReport() {
                    showToast('Generating PDF report...', 'info');

                    // Create a form to submit for PDF generation
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Admin/GenerateEmployeeReport';
                    form.target = '_blank';

                    const userIdInput = document.createElement('input');
                    userIdInput.type = 'hidden';
                    userIdInput.name = 'userId';
                    userIdInput.value = currentUserId;

                    form.appendChild(userIdInput);
                    document.body.appendChild(form);
                    form.submit();
                    document.body.removeChild(form);
                }

                function createEmployeeProfile() {
                    // Create and show employee profile creation modal
                    const profileModal = document.createElement('div');
                    profileModal.className = 'modal show';
                    profileModal.id = 'createProfileModal';
                    profileModal.innerHTML = `
                        <div class="modal-container">
                            <div class="modern-modal-header">
                                <div class="modern-modal-header-content">
                                    <div class="modern-modal-title-section">
                                        <div class="modern-modal-icon">
                                            <i class="fas fa-user-plus"></i>
                                        </div>
                                        <div class="modern-modal-title-text">
                                            <h2>Create Employee Profile for ${currentUserName}</h2>
                                            <p class="modern-modal-subtitle">Set up comprehensive employee details</p>
                                        </div>
                                    </div>
                                    <button class="modern-modal-close" onclick="closeCreateProfileModal()">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="modern-modal-body">
                                <form id="createProfileForm">
                                    <div class="modern-form-grid">
                                        <div class="modern-form-group">
                                            <label class="modern-form-label">Hire Date *</label>
                                            <input type="date" id="profileHireDate" class="modern-form-control" required>
                                        </div>
                                        <div class="modern-form-group">
                                            <label class="modern-form-label">Position *</label>
                                            <input type="text" id="profilePosition" class="modern-form-control" required placeholder="e.g., Sales Associate">
                                        </div>
                                    </div>
                                    <div class="modern-form-group">
                                        <label class="modern-form-label">Manager Name</label>
                                        <input type="text" id="profileManager" class="modern-form-control" placeholder="Direct supervisor name">
                                    </div>
                                    <div class="modern-form-grid">
                                        <div class="modern-form-group">
                                            <label class="modern-form-label">Emergency Contact Name</label>
                                            <input type="text" id="profileEmergencyName" class="modern-form-control" placeholder="Emergency contact person">
                                        </div>
                                        <div class="modern-form-group">
                                            <label class="modern-form-label">Emergency Contact Phone</label>
                                            <input type="tel" id="profileEmergencyPhone" class="modern-form-control" placeholder="Emergency contact number">
                                        </div>
                                    </div>
                                    <div class="modern-modal-actions">
                                        <button type="button" class="modern-btn modern-btn-secondary" onclick="closeCreateProfileModal()">Cancel</button>
                                        <button type="button" class="modern-btn modern-btn-primary" onclick="submitCreateProfile()">
                                            <i class="fas fa-user-plus"></i> Create Profile
                                        </button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    `;
                    document.body.appendChild(profileModal);

                    // Set today's date as default hire date
                    document.getElementById('profileHireDate').value = new Date().toISOString().split('T')[0];
                }

                function closeCreateProfileModal() {
                    const modal = document.getElementById('createProfileModal');
                    if (modal) {
                        modal.remove();
                    }
                }

                function submitCreateProfile() {
                    const hireDate = document.getElementById('profileHireDate').value;
                    const position = document.getElementById('profilePosition').value;
                    const manager = document.getElementById('profileManager').value;
                    const emergencyName = document.getElementById('profileEmergencyName').value;
                    const emergencyPhone = document.getElementById('profileEmergencyPhone').value;

                    if (!hireDate || !position) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    const requestData = {
                        UserId: parseInt(currentUserId),
                        HireDate: hireDate,
                        Position: position,
                        ManagerName: manager,
                        EmergencyContactName: emergencyName,
                        EmergencyContactPhone: emergencyPhone
                    };

                    fetch('/Admin/CreateEmployeeProfile', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': getAntiForgeryToken()
                        },
                        body: JSON.stringify(requestData)
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message || 'Employee profile created successfully!', 'success');
                            closeCreateProfileModal();
                            setTimeout(() => location.reload(), 1500);
                        } else {
                            showToast(data.message || 'Failed to create employee profile', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while creating employee profile', 'error');
                    });
                }

                // WRAPPER FUNCTIONS FOR EXISTING FUNCTIONALITY
                function manageEmployeeSalary(userId, userName) {
                    console.log('Managing salary for user:', userId, userName);
                    openEditSalaryModal(); // Open modern modal for new salary entry
                }

                function manageEmployeeFines(userId, userName) {
                    console.log('Managing fines for user:', userId, userName);
                    openEditFineModal(); // Open modern modal for new fine entry
                }

                function processEmployeePayment(userId, userName) {
                    console.log('Processing payment for user:', userId, userName);
                    showToast('Payment processing feature coming soon!', 'info');
                }

                function editSalary(salaryId, amount, salaryType, effectiveDate, status, notes) {
                    openEditSalaryModal(salaryId, amount, salaryType, effectiveDate, status, notes);
                }

                function editFine(fineId, amount, reason, description, dueDate, status) {
                    openEditFineModal(fineId, amount, reason, description, dueDate, status);
                }

                function deleteSalary(salaryId) {
                    if (confirm('Are you sure you want to delete this salary entry?')) {
                        fetch('/Admin/DeleteEmployeeSalaryEntry', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify({ SalaryId: salaryId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showToast('Salary entry deleted successfully!', 'success');
                                setTimeout(() => location.reload(), 1000);
                            } else {
                                showToast(data.message || 'Error deleting salary entry', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showToast('Error deleting salary entry', 'error');
                        });
                    }
                }

                function deleteFine(fineId) {
                    if (confirm('Are you sure you want to delete this fine?')) {
                        fetch('/Admin/DeleteEmployeeFine', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify({ FineId: fineId })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                showToast('Fine deleted successfully!', 'success');
                                setTimeout(() => location.reload(), 1000);
                            } else {
                                showToast(data.message || 'Error deleting fine', 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            showToast('Error deleting fine', 'error');
                        });
                    }
                }

                function sendMessage() {
                    window.location.href = '/admin/messages?recipient=' + currentUserId;
                }

                function printProfile() {
                    window.print();
                }

                function viewSales() {
                    window.location.href = '/Admin/Sales?userId=' + currentUserId;
                }

                // UTILITY FUNCTIONS
                function getAntiForgeryToken() {
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    return token ? token.value : '';
                }

                function showToast(message, type) {
                    // Remove existing toasts
                    var existingToasts = document.querySelectorAll('.toast');
                    existingToasts.forEach(function(toast) {
                        toast.remove();
                    });

                    var toast = document.createElement('div');
                    toast.className = 'toast ' + type;

                    var iconClass = 'info-circle';
                    if (type === 'success') iconClass = 'check-circle';
                    else if (type === 'error') iconClass = 'exclamation-circle';
                    else if (type === 'warning') iconClass = 'exclamation-triangle';

                    toast.innerHTML = '<div style="display: flex; align-items: center; gap: 0.5rem;"><i class="fas fa-' + iconClass + '"></i><span>' + message + '</span></div>';

                    document.body.appendChild(toast);

                    setTimeout(function() {
                        toast.style.opacity = '1';
                        toast.style.transform = 'translateX(0)';
                    }, 100);

                    setTimeout(function() {
                        toast.style.opacity = '0';
                        toast.style.transform = 'translateX(100%)';
                        setTimeout(function() {
                            if (toast.parentNode) {
                                toast.remove();
                            }
                        }, 300);
                    }, 4000);
                }

                // PAGINATION FUNCTIONS
                function initializePagination(tableType) {
                    const rows = document.querySelectorAll(`.${tableType}-row`);
                    const itemsPerPage = 10;
                    const totalPages = Math.ceil(rows.length / itemsPerPage);

                    if (totalPages <= 1) return; // No pagination needed

                    let currentPage = 1;

                    function showPage(page) {
                        rows.forEach((row, index) => {
                            const start = (page - 1) * itemsPerPage;
                            const end = start + itemsPerPage;
                            row.style.display = (index >= start && index < end) ? '' : 'none';
                        });

                        updatePaginationControls(tableType, page, totalPages);
                    }

                    function updatePaginationControls(type, current, total) {
                        const container = document.getElementById(`${type}Pagination`);
                        if (!container) return;

                        container.innerHTML = `
                            <button class="pagination-btn" onclick="changePage('${type}', ${current - 1})" ${current === 1 ? 'disabled' : ''}>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            <span class="pagination-info">Page ${current} of ${total}</span>
                            <button class="pagination-btn" onclick="changePage('${type}', ${current + 1})" ${current === total ? 'disabled' : ''}>
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                        `;
                    }

                    // Store pagination state
                    window[`${tableType}CurrentPage`] = currentPage;
                    window[`${tableType}TotalPages`] = totalPages;

                    showPage(currentPage);
                }

                function changePage(tableType, newPage) {
                    const totalPages = window[`${tableType}TotalPages`];
                    if (newPage < 1 || newPage > totalPages) return;

                    window[`${tableType}CurrentPage`] = newPage;

                    const rows = document.querySelectorAll(`.${tableType}-row`);
                    const itemsPerPage = 10;

                    rows.forEach((row, index) => {
                        const start = (newPage - 1) * itemsPerPage;
                        const end = start + itemsPerPage;
                        row.style.display = (index >= start && index < end) ? '' : 'none';
                    });

                    updatePaginationControls(tableType, newPage, totalPages);
                }

                function updatePaginationControls(type, current, total) {
                    const container = document.getElementById(`${type}Pagination`);
                    if (!container) return;

                    container.innerHTML = `
                        <button class="pagination-btn" onclick="changePage('${type}', ${current - 1})" ${current === 1 ? 'disabled' : ''}>
                            <i class="fas fa-chevron-left"></i> Previous
                        </button>
                        <span class="pagination-info">Page ${current} of ${total}</span>
                        <button class="pagination-btn" onclick="changePage('${type}', ${current + 1})" ${current === total ? 'disabled' : ''}>
                            Next <i class="fas fa-chevron-right"></i>
                        </button>
                    `;
                }

                // EVENT LISTENERS
                document.addEventListener('DOMContentLoaded', function() {
                    initializePagination('salary');
                    initializePagination('fine');
                    initializePagination('payment');
                });

                // Close modals when clicking outside
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('modal')) {
                        e.target.classList.remove('show');
                    }
                });

                // Close modals with Escape key
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        document.querySelectorAll('.modal.show').forEach(modal => {
                            modal.classList.remove('show');
                        });
                    }
                });
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>