@model PixelSolution.ViewModels.EmployeeDetailsViewModel
@{
    ViewData["Title"] = $"Employee Details - {Model.FullName} - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .user-details-container {
            background: #f8fafc;
            min-height: calc(100vh - 80px);
        }

        /* Header Styles */
        .details-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 1.5rem;
            position: relative;
            overflow: hidden;
        }

            .details-header::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -20%;
                width: 200px;
                height: 200px;
                background: rgba(255,255,255,0.1);
                border-radius: 50%;
            }

        .header-content {
            display: flex;
            align-items: center;
            gap: 1.5rem;
            position: relative;
            z-index: 2;
        }

        .employee-avatar-large {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
            font-weight: 700;
            backdrop-filter: blur(10px);
            border: 3px solid rgba(255,255,255,0.3);
            position: relative;
            flex-shrink: 0;
        }

        .status-indicator-large {
            position: absolute;
            bottom: 5px;
            right: 5px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
        }

            .status-indicator-large.active {
                background: #10b981;
            }

            .status-indicator-large.inactive {
                background: #ef4444;
            }

        .employee-info-large h1 {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .employee-subtitle {
            font-size: 1.1rem;
            opacity: 0.9;
            margin-bottom: 1rem;
        }

        .header-badges {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .header-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 15px;
            font-size: 0.8rem;
            font-weight: 600;
            background: rgba(255,255,255,0.2);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
        }

        .quick-actions {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .quick-action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 8px;
            background: rgba(255,255,255,0.2);
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.3);
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .quick-action-btn:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
            }

        /* Content Grid */
        .content-grid {
            display: grid;
            grid-template-columns: 1fr 2fr;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .info-panel, .actions-panel {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 1px 6px rgba(0,0,0,0.08);
        }

        .panel-header {
            display: flex;
            align-items: center;
            justify-content: between;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e2e8f0;
        }

        .panel-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .panel-icon {
            width: 32px;
            height: 32px;
            border-radius: 8px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9rem;
        }

        /* Info Sections */
        .info-section {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            border-left: 3px solid #667eea;
            margin-bottom: 1rem;
        }

        .section-title {
            font-size: 1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .info-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 0;
            border-bottom: 1px solid #e2e8f0;
            font-size: 0.9rem;
        }

            .info-item:last-child {
                border-bottom: none;
            }

        .info-label {
            font-weight: 600;
            color: #374151;
        }

        .info-value {
            color: #6b7280;
            text-align: right;
        }

            .info-value.highlight {
                color: #059669;
                font-weight: 600;
            }

            .info-value.warning {
                color: #dc2626;
                font-weight: 600;
            }

        /* Action Cards */
        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .action-card {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 1rem;
            text-align: center;
            transition: all 0.3s ease;
            cursor: pointer;
        }

            .action-card:hover {
                border-color: #667eea;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
            }

        .action-icon {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 0.75rem;
            font-size: 1.2rem;
        }

        .action-title {
            font-size: 0.95rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .action-description {
            color: #6b7280;
            font-size: 0.8rem;
        }

        /* Tabs */
        /* Overview Grid Styles */
        .overview-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .overview-grid .full-width {
            grid-column: 1 / -1;
        }

        .summary-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .summary-card:hover {
            transform: translateY(-2px);
        }

        .card-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
        }

        .card-header h4 {
            margin: 0;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .card-body {
            padding: 1.5rem;
        }

        .history-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            margin-bottom: 0.5rem;
            background: white;
        }

        .fine-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.875rem;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 0.25rem;
        }

        .btn-primary {
            background-color: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2563eb;
        }

        .btn-danger {
            background-color: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background-color: #dc2626;
        }

        .fine-description {
            display: block;
            font-style: italic;
            color: #6b7280;
            margin-top: 0.25rem;
        }

        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

        .summary-item:last-child {
            border-bottom: none;
        }

        .summary-item .label {
            color: #64748b;
            font-weight: 500;
        }

        .summary-item .value {
            font-weight: 600;
            color: #2d3748;
        }

        .summary-item .value.success {
            color: #059669;
        }

        .summary-item .value.warning {
            color: #d97706;
        }

        /* Action Buttons */
        .action-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
        }

        .action-btn {
            padding: 0.75rem 1rem;
            border: none;
            border-radius: 8px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            font-size: 0.9rem;
        }

        .action-btn.primary {
            background: #667eea;
            color: white;
        }

        .action-btn.primary:hover {
            background: #5a67d8;
        }

        .action-btn.warning {
            background: #ed8936;
            color: white;
        }

        .action-btn.warning:hover {
            background: #dd6b20;
        }

        .action-btn.success {
            background: #48bb78;
            color: white;
        }

        .action-btn.success:hover {
            background: #38a169;
        }

        .action-btn.info {
            background: #4299e1;
            color: white;
        }

        .action-btn.info:hover {
            background: #3182ce;
        }

        .action-btn.secondary {
            background: #e2e8f0;
            color: #4a5568;
        }

        .action-btn.secondary:hover {
            background: #cbd5e0;
        }

        /* Activity Timeline */
        .activity-timeline {
            max-height: 400px;
            overflow-y: auto;
        }

        .timeline-item {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            padding: 1rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

        .timeline-item:last-child {
            border-bottom: none;
        }

        .timeline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.9rem;
            flex-shrink: 0;
        }

        .timeline-icon.salary {
            background: #48bb78;
        }

        .timeline-icon.fine {
            background: #ed8936;
        }

        .timeline-icon.payment {
            background: #4299e1;
        }

        .timeline-content h6 {
            margin: 0 0 0.25rem 0;
            color: #2d3748;
            font-weight: 600;
        }

        .timeline-content p {
            margin: 0 0 0.25rem 0;
            color: #4a5568;
            font-size: 0.9rem;
        }

        .timeline-content small {
            color: #64748b;
            font-size: 0.8rem;
        }

        .no-activity {
            text-align: center;
            padding: 2rem;
            color: #64748b;
        }

        .no-activity i {
            font-size: 2rem;
            margin-bottom: 0.5rem;
            display: block;
        }

        /* Tab Header */
        .tab-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 2px solid #e2e8f0;
        }

        .tab-header h3 {
            margin: 0;
            color: #2d3748;
            font-size: 1.5rem;
            font-weight: 600;
        }

        .tabs-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 1px 6px rgba(0,0,0,0.08);
        }

        .tabs-header {
            display: flex;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-button {
            flex: 1;
            padding: 1rem;
            border: none;
            background: transparent;
            color: #6b7280;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            font-size: 0.9rem;
        }

            .tab-button.active {
                color: #667eea;
                background: white;
            }

                .tab-button.active::after {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    left: 0;
                    right: 0;
                    height: 2px;
                    background: linear-gradient(135deg, #667eea, #764ba2);
                }

        .tab-content {
            padding: 1.5rem;
            display: none;
        }

            .tab-content.active {
                display: block;
            }

        /* Data Tables */
        .data-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
            font-size: 0.85rem;
        }

            .data-table th {
                background: #f8fafc;
                padding: 0.75rem;
                text-align: left;
                font-weight: 600;
                color: #374151;
                border-bottom: 1px solid #e2e8f0;
            }

            .data-table td {
                padding: 0.75rem;
                border-bottom: 1px solid #f1f5f9;
            }

            .data-table tr:hover {
                background: #f8fafc;
            }

        /* Status Badges */
        .status-badge {
            padding: 0.25rem 0.5rem;
            border-radius: 10px;
            font-size: 0.7rem;
            font-weight: 600;
            text-transform: uppercase;
        }

            .status-badge.active {
                background: #dcfce7;
                color: #166534;
            }

            .status-badge.pending {
                background: #fef3c7;
                color: #92400e;
            }

            .status-badge.paid {
                background: #dcfce7;
                color: #166534;
            }

            .status-badge.failed {
                background: #fef2f2;
                color: #991b1b;
            }

        /* Modals */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

            .modal.show {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 1rem;
            }

        .modal-content {
            background: white;
            padding: 0;
            border-radius: 12px;
            width: 100%;
            max-width: 600px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            max-height: 85vh;
            overflow-y: auto;
        }

        .modal-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: all 0.3s ease;
        }

            .modal-close:hover {
                background: rgba(255,255,255,0.2);
            }

        .modal-body {
            padding: 1.5rem;
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
            font-size: 0.85rem;
        }

        .form-control {
            width: 100%;
            padding: 0.6rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.85rem;
            transition: all 0.3s ease;
            box-sizing: border-box;
        }

            .form-control:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.1);
            }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        /* Buttons */
        .btn {
            padding: 0.6rem 1.2rem;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            justify-content: center;
            font-size: 0.85rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
            margin-right: 0.5rem;
        }

            .btn-secondary:hover {
                background: #4b5563;
            }

        .btn-success {
            background: #10b981;
            color: white;
        }

        .btn-warning {
            background: #f59e0b;
            color: white;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }

        .btn-outline-primary {
            background: transparent;
            color: #667eea;
            border: 1px solid #667eea;
        }

            .btn-outline-primary:hover {
                background: #667eea;
                color: white;
            }

        /* Toast Notifications */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 10000;
            padding: 0.75rem 1rem;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
            max-width: 300px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            font-size: 0.85rem;
        }

            .toast.success {
                background: linear-gradient(135deg, #10b981, #059669);
            }

            .toast.error {
                background: linear-gradient(135deg, #ef4444, #dc2626);
            }

            .toast.warning {
                background: linear-gradient(135deg, #f59e0b, #d97706);
            }

            .toast.info {
                background: linear-gradient(135deg, #3b82f6, #2563eb);
            }

        /* Loading States */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 2rem;
            color: #64748b;
        }

        .loading i {
            margin-right: 0.5rem;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@(User.Identity.Name?.Length >= 2 ? User.Identity.Name.Substring(0, 2).ToUpper() : "U")</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>@(User.IsInRole("Admin") ? "System Administrator" : User.IsInRole("Manager") ? "Manager" : "Employee")</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Employee"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                        <i class="fas fa-shopping-cart"></i>
                        Sales
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                        <i class="fas fa-box"></i>
                        Inventory
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Users", "Admin")" class="nav-link active">
                        <i class="fas fa-users"></i>
                        Employees
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                        <i class="fas fa-building"></i>
                        Departments
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                        <i class="fas fa-truck"></i>
                        Suppliers
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                        <i class="fas fa-tags"></i>
                        Categories
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Products", "Admin")" class="nav-link">
                        <i class="fas fa-cube"></i>
                        Products
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                        <i class="fas fa-file-invoice"></i>
                        Purchase Requests
                    </a>
                </div>
            }
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                        <i class="fas fa-chart-bar"></i>
                        Reports
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Employee Details</h1>
        </div>
        <div class="header-right">
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <div class="dashboard-content user-details-container">
        <!-- Employee Header -->
        <div class="details-header">
            <div class="header-content">
                <div class="employee-avatar-large">
                    @Model.UserInitials
                    <div class="status-indicator-large @Model.Status.ToLower()"></div>
                </div>
                <div class="employee-info-large">
                    <h1>@Model.FullName</h1>
                    <div class="employee-subtitle">
                        @if (!string.IsNullOrEmpty(Model.Position))
                        {
                            <span>@Model.Position</span>
                        }
                        else
                        {
                            <span>@Model.UserType</span>
                        }
                        @if (!string.IsNullOrEmpty(Model.EmployeeNumber))
                        {
                            <span> • @Model.EmployeeNumber</span>
                        }
                    </div>
                    <div class="header-badges">
                        <span class="header-badge">@Model.Status</span>
                        <span class="header-badge">@Model.UserType</span>
                        @if (!string.IsNullOrEmpty(Model.EmploymentStatus) && Model.EmploymentStatus != "Active")
                        {
                            <span class="header-badge">@Model.EmploymentStatus</span>
                        }
                        @if (!string.IsNullOrEmpty(Model.DepartmentNames))
                        {
                            <span class="header-badge">@Model.DepartmentNames</span>
                        }
                    </div>
                </div>
                <div class="quick-actions">
                    <button class="quick-action-btn" onclick="sendMessage()" title="Send Message">
                        <i class="fas fa-envelope"></i>
                    </button>
                    <button class="quick-action-btn" onclick="printProfile()" title="Print Profile">
                        <i class="fas fa-print"></i>
                    </button>
                    <a href="@Url.Action("Users", "Admin")" class="quick-action-btn" title="Back to Users">
                        <i class="fas fa-arrow-left"></i>
                    </a>
                </div>
            </div>
        </div>

        <!-- Main Content Grid -->
        <div class="content-grid">
            <!-- Information Panel -->
            <div class="info-panel">
                <div class="panel-header">
                    <div class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        Employee Information
                    </div>
                </div>

                <!-- Personal Information -->
                <div class="info-section">
                    <div class="section-title">
                        <i class="fas fa-id-card"></i>
                        Personal Details
                    </div>
                    <div class="info-item">
                        <span class="info-label">Full Name</span>
                        <span class="info-value">@Model.FullName</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Email</span>
                        <span class="info-value">@Model.Email</span>
                    </div>
                    @if (!string.IsNullOrEmpty(Model.Phone))
                    {
                        <div class="info-item">
                            <span class="info-label">Phone</span>
                            <span class="info-value">@Model.Phone</span>
                        </div>
                    }
                    <div class="info-item">
                        <span class="info-label">User Type</span>
                        <span class="info-value">@Model.UserType</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Status</span>
                        <span class="info-value">@Model.Status</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Account Created</span>
                        <span class="info-value">@Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>

                @if (Model.HasEmployeeProfile)
                {
                    <!-- Employment Information -->
                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-briefcase"></i>
                            Employment Details
                        </div>
                        @if (!string.IsNullOrEmpty(Model.EmployeeNumber))
                        {
                            <div class="info-item">
                                <span class="info-label">Employee Number</span>
                                <span class="info-value">@Model.EmployeeNumber</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.Position))
                        {
                            <div class="info-item">
                                <span class="info-label">Position</span>
                                <span class="info-value">@Model.Position</span>
                            </div>
                        }
                        @if (Model.HireDate.HasValue)
                        {
                            <div class="info-item">
                                <span class="info-label">Hire Date</span>
                                <span class="info-value">@Model.HireDate.Value.ToString("MMM dd, yyyy")</span>
                            </div>
                        }
                        @if (!string.IsNullOrEmpty(Model.PaymentFrequency))
                        {
                            <div class="info-item">
                                <span class="info-label">Payment Frequency</span>
                                <span class="info-value">@Model.PaymentFrequency</span>
                            </div>
                        }
                        <div class="info-item">
                            <span class="info-label">Employment Status</span>
                            <span class="info-value">@Model.EmploymentStatus</span>
                        </div>
                    </div>

                    <!-- Financial Information -->
                    <div class="info-section">
                        <div class="section-title">
                            <i class="fas fa-money-bill-wave"></i>
                            Financial Summary
                        </div>
                        <div class="info-item">
                            <span class="info-label">Current Salary</span>
                            <span class="info-value highlight">KSh @Model.CurrentSalary.ToString("N2")</span>
                        </div>
                        @if (Model.OutstandingFines > 0)
                        {
                            <div class="info-item">
                                <span class="info-label">Outstanding Fines</span>
                                <span class="info-value warning">KSh @Model.OutstandingFines.ToString("N2")</span>
                            </div>
                        }
                        <div class="info-item">
                            <span class="info-label">Total Paid</span>
                            <span class="info-value">KSh @Model.TotalPaid.ToString("N2")</span>
                        </div>
                    </div>
                }

                <!-- Performance Metrics -->
                <div class="info-section">
                    <div class="section-title">
                        <i class="fas fa-chart-line"></i>
                        Performance
                    </div>
                    <div class="info-item">
                        <span class="info-label">Total Sales</span>
                        <span class="info-value highlight">@Model.TotalSales</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Sales Value</span>
                        <span class="info-value highlight">KSh @Model.TotalSalesAmount.ToString("N2")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Today's Sales</span>
                        <span class="info-value">@Model.SalesToday</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Monthly Sales</span>
                        <span class="info-value">@Model.SalesThisMonth</span>
                    </div>
                </div>
            </div>

            <!-- Actions Panel -->
            <div class="actions-panel">
                <div class="panel-header">
                    <div class="panel-title">
                        <div class="panel-icon">
                            <i class="fas fa-tools"></i>
                        </div>
                        Quick Actions
                    </div>
                </div>

                <div class="actions-grid">
                    @if (!Model.HasEmployeeProfile)
                    {
                        <div class="action-card" onclick="createEmployeeProfile()">
                            <div class="action-icon">
                                <i class="fas fa-user-plus"></i>
                            </div>
                            <div class="action-title">Create Profile</div>
                            <div class="action-description">Set up employee profile and salary</div>
                        </div>
                    }
                    else
                    {
                        <div class="action-card" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-dollar-sign"></i>
                            </div>
                            <div class="action-title">Manage Salary</div>
                            <div class="action-description">Update salary or add bonuses</div>
                        </div>

                        <div class="action-card" onclick="manageEmployeeFines(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <div class="action-title">Manage Fines</div>
                            <div class="action-description">Issue or manage fines</div>
                        </div>

                        <div class="action-card" onclick="processEmployeePayment(@Model.UserId, '@Model.FullName')">
                            <div class="action-icon">
                                <i class="fas fa-credit-card"></i>
                            </div>
                            <div class="action-title">Process Payment</div>
                            <div class="action-description">Record salary payments</div>
                        </div>
                    }

                    <div class="action-card" onclick="generateReport()">
                        <div class="action-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="action-title">Generate Report</div>
                        <div class="action-description">Performance and activity reports</div>
                    </div>

                    <div class="action-card" onclick="viewSales()">
                        <div class="action-icon">
                            <i class="fas fa-shopping-cart"></i>
                        </div>
                        <div class="action-title">View Sales</div>
                        <div class="action-description">Check sales history</div>
                    </div>

                    <div class="action-card" onclick="sendEmailToEmployee(@Model.UserId, '@Model.FullName')">
                        <div class="action-icon">
                            <i class="fas fa-envelope"></i>
                        </div>
                        <div class="action-title">Send Email</div>
                        <div class="action-description">Send email to employee</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Employee Management Tabs Section -->
        <div class="tabs-container">
            <div class="tabs-header">
                <button class="tab-button active" onclick="switchTab('overview')">
                    <i class="fas fa-chart-pie"></i>
                    Overview
                </button>
                <button class="tab-button" onclick="switchTab('salary')">
                    <i class="fas fa-money-bill-wave"></i>
                    Salary Management
                </button>
                <button class="tab-button" onclick="switchTab('fines')">
                    <i class="fas fa-exclamation-triangle"></i>
                    Fines & Deductions
                </button>
                <button class="tab-button" onclick="switchTab('payments')">
                    <i class="fas fa-credit-card"></i>
                    Payment History
                </button>
                <button class="tab-button" onclick="switchTab('performance')">
                    <i class="fas fa-chart-line"></i>
                    Performance Analytics
                </button>
            </div>

            <!-- Overview Tab -->
            <div id="overview-tab" class="tab-content active">
                <div class="overview-grid">
                    <!-- Financial Summary Card -->
                    <div class="summary-card">
                        <div class="card-header">
                            <h4><i class="fas fa-wallet"></i> Financial Summary</h4>
                        </div>
                        <div class="card-body">
                            <div class="summary-item">
                                <span class="label">Current Salary</span>
                                <span class="value">KSh @(Model.BaseSalary?.ToString("N2") ?? "0.00")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Total Paid</span>
                                <span class="value success">KSh @Model.TotalSalariesPaid.ToString("N2")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Outstanding Fines</span>
                                <span class="value warning">KSh @Model.OutstandingFines.ToString("N2")</span>
                            </div>
                            <div class="summary-item">
                                <span class="label">Total Fines</span>
                                <span class="value">KSh @Model.TotalFines.ToString("N2")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Quick Actions Card -->
                    <div class="summary-card">
                        <div class="card-header">
                            <h4><i class="fas fa-tools"></i> Quick Actions</h4>
                        </div>
                        <div class="card-body">
                            <div class="action-buttons">
                                @if (Model.HasEmployeeProfile)
                                {
                                    <button class="action-btn primary" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-dollar-sign"></i>
                                        Update Salary
                                    </button>
                                    <button class="action-btn warning" onclick="manageEmployeeFines(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-exclamation-triangle"></i>
                                        Issue Fine
                                    </button>
                                    <button class="action-btn success" onclick="processEmployeePayment(@Model.UserId, '@Model.FullName')">
                                        <i class="fas fa-credit-card"></i>
                                        Process Payment
                                    </button>
                                }
                                else
                                {
                                    <button class="action-btn primary" onclick="createEmployeeProfile()">
                                        <i class="fas fa-user-plus"></i>
                                        Create Employee Profile
                                    </button>
                                }
                                <button class="action-btn info" onclick="sendEmailToEmployee(@Model.UserId, '@Model.FullName')">
                                    <i class="fas fa-envelope"></i>
                                    Send Email
                                </button>
                                <button class="action-btn secondary" onclick="generateReport()">
                                    <i class="fas fa-file-alt"></i>
                                    Generate Report
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Recent Activity Card -->
                    <div class="summary-card full-width">
                        <div class="card-header">
                            <h4><i class="fas fa-clock"></i> Recent Activity</h4>
                        </div>
                        <div class="card-body">
                            <div class="activity-timeline">
                                @if (Model.RecentSalaries?.Any() == true)
                                {
                                    @foreach (var salary in Model.RecentSalaries.Take(3))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon salary">
                                                <i class="fas fa-money-bill-wave"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Salary Update</h6>
                                                <p>@salary.SalaryType salary set to KSh @salary.Amount.ToString("N2")</p>
                                                <small>@salary.EffectiveDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (Model.RecentFines?.Any() == true)
                                {
                                    @foreach (var fine in Model.RecentFines.Take(2))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon fine">
                                                <i class="fas fa-exclamation-triangle"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Fine Issued</h6>
                                                <p>@fine.Reason - KSh @fine.Amount.ToString("N2")</p>
                                                <small>@fine.IssuedDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (Model.RecentPayments?.Any() == true)
                                {
                                    @foreach (var payment in Model.RecentPayments.Take(2))
                                    {
                                        <div class="timeline-item">
                                            <div class="timeline-icon payment">
                                                <i class="fas fa-credit-card"></i>
                                            </div>
                                            <div class="timeline-content">
                                                <h6>Payment Processed</h6>
                                                <p>@payment.PaymentPeriod - KSh @payment.NetPay.ToString("N2")</p>
                                                <small>@payment.PaymentDate.ToString("MMM dd, yyyy")</small>
                                            </div>
                                        </div>
                                    }
                                }
                                @if (!(Model.RecentSalaries?.Any() == true || Model.RecentFines?.Any() == true || Model.RecentPayments?.Any() == true))
                                {
                                    <div class="no-activity">
                                        <i class="fas fa-inbox"></i>
                                        <p>No recent activity found</p>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Salary Management Tab -->
            <div id="salary-tab" class="tab-content">
                <div class="tab-header">
                    <h3>Salary Management</h3>
                    @if (Model.HasEmployeeProfile)
                    {
                        <button class="btn btn-primary" onclick="manageEmployeeSalary(@Model.UserId, '@Model.FullName')">
                            <i class="fas fa-plus"></i> Add New Salary
                        </button>
                    }
                </div>
                    @if (Model.SalaryHistory?.Any() == true)
                    {
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Effective Date</th>
                                    <th>Type</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Notes</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var salary in Model.SalaryHistory)
                                {
                                    <tr>
                                        <td>@salary.EffectiveDate.ToString("MMM dd, yyyy")</td>
                                        <td>@salary.SalaryType</td>
                                        <td>KSh @salary.Amount.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @(salary.IsActive ? "active" : "")">
                                                @(salary.IsActive ? "Active" : "Inactive")
                                            </span>
                                        </td>
                                        <td>@salary.Notes</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No salary history found.</p>
                    }
                </div>

                <!-- Fines Tab -->
                <div id="fines-tab" class="tab-content">
                    <h3>Fines & Deductions</h3>
                    @if (Model.FineHistory?.Any() == true)
                    {
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Issue Date</th>
                                    <th>Reason</th>
                                    <th>Amount</th>
                                    <th>Status</th>
                                    <th>Issued By</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var fine in Model.FineHistory)
                                {
                                    <tr>
                                        <td>@fine.IssuedDate.ToString("MMM dd, yyyy")</td>
                                        <td>@fine.Reason</td>
                                        <td>KSh @fine.Amount.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @fine.Status.ToLower()">
                                                @fine.Status
                                            </span>
                                        </td>
                                        <td>@fine.IssuedByUserName</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No fines or deductions found.</p>
                    }
                </div>

                <!-- Payments Tab -->
                <div id="payments-tab" class="tab-content">
                    <h3>Payment History</h3>
                    @if (Model.PaymentHistory?.Any() == true)
                    {
                        <table class="data-table">
                            <thead>
                                <tr>
                                    <th>Payment Date</th>
                                    <th>Payment #</th>
                                    <th>Period</th>
                                    <th>Gross Pay</th>
                                    <th>Net Pay</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var payment in Model.PaymentHistory)
                                {
                                    <tr>
                                        <td>@payment.PaymentDate.ToString("MMM dd, yyyy")</td>
                                        <td>@payment.PaymentNumber</td>
                                        <td>@payment.PaymentPeriod</td>
                                        <td>KSh @payment.GrossPay.ToString("N2")</td>
                                        <td>KSh @payment.NetPay.ToString("N2")</td>
                                        <td>
                                            <span class="status-badge @payment.Status.ToLower()">
                                                @payment.Status
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>No payment history found.</p>
                    }
                </div>

                <!-- Performance Tab -->
                <div id="performance-tab" class="tab-content">
                    <h3>Performance Analytics</h3>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 1rem;">
                        <div class="info-section">
                            <div class="section-title">
                                <i class="fas fa-trophy"></i>
                                Sales Performance
                            </div>
                            <div class="info-item">
                                <span class="info-label">Total Sales</span>
                                <span class="info-value highlight">@Model.TotalSales</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Total Value</span>
                                <span class="info-value highlight">KSh @Model.TotalSalesAmount.ToString("N2")</span>
                            </div>
                            @if (Model.TotalSales > 0)
                            {
                                <div class="info-item">
                                    <span class="info-label">Average Sale</span>
                                    <span class="info-value">KSh @Model.AverageSaleAmount.ToString("N2")</span>
                                </div>
                            }
                        </div>

                        <div class="info-section">
                            <div class="section-title">
                                <i class="fas fa-calendar-day"></i>
                                Recent Activity
                            </div>
                            <div class="info-item">
                                <span class="info-label">Today's Sales</span>
                                <span class="info-value">@Model.SalesToday</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Today's Value</span>
                                <span class="info-value">KSh @Model.SalesTodayAmount.ToString("N2")</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Monthly Sales</span>
                                <span class="info-value">@Model.SalesThisMonth</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<!-- Add Fine Modal -->
<div class="modal" id="addFineModal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title">Add Employee Fine</h2>
            <button class="close-btn" onclick="closeAddFineModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="addFineForm">
            <div class="form-group">
                <label class="form-label" for="fineAmount">Fine Amount (KSh) *</label>
                <input type="number" id="fineAmount" name="Amount" class="form-control" step="0.01" min="0" required>
            </div>
            <div class="form-group">
                <label class="form-label" for="fineReason">Reason *</label>
                <select id="fineReason" name="Reason" class="form-control" required>
                    <option value="">Select Reason</option>
                    <option value="Lateness">Lateness</option>
                    <option value="Absence">Unauthorized Absence</option>
                    <option value="Misconduct">Misconduct</option>
                    <option value="Damage">Property Damage</option>
                    <option value="Uniform">Uniform Violation</option>
                    <option value="Policy">Policy Violation</option>
                    <option value="Other">Other</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label" for="fineDescription">Description *</label>
                <textarea id="fineDescription" name="Description" class="form-control" rows="3" required 
                         placeholder="Provide detailed description of the violation..."></textarea>
            </div>
            <div class="form-group">
                <label class="form-label" for="fineDueDate">Due Date *</label>
                <input type="date" id="fineDueDate" name="DueDate" class="form-control" required>
            </div>
            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1.5rem;">
                <button type="button" class="btn btn-secondary" onclick="closeAddFineModal()">Cancel</button>
                <button type="button" class="btn btn-warning" onclick="submitFine()">
                    <i class="fas fa-exclamation-triangle"></i> Issue Fine
                </button>
            </div>
        </form>
    </div>
</div>

<!-- Employee Salary Management Modal -->
<div class="modal" id="salaryModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="salaryModalLabel">Employee Salary Management</h3>
            <button class="modal-close" onclick="closeSalaryModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div id="salaryContent">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #667eea;"></i>
                    <p style="margin-top: 1rem;">Loading salary information...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Employee Fines Management Modal -->
<div class="modal" id="finesModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="finesModalLabel">Employee Fines Management</h3>
            <button class="modal-close" onclick="closeFinesModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div id="finesContent">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #667eea;"></i>
                    <p style="margin-top: 1rem;">Loading fines information...</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Employee Payment Processing Modal -->
<div class="modal" id="paymentModal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title" id="paymentModalLabel">Employee Payment Processing</h3>
            <button class="modal-close" onclick="closePaymentModal()">&times;</button>
        </div>
        <div class="modal-body">
            <div id="paymentContent">
                <div class="text-center">
                    <i class="fas fa-spinner fa-spin" style="font-size: 2rem; color: #667eea;"></i>
                    <p style="margin-top: 1rem;">Loading payment information...</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        var currentUserId = @Model.UserId;
        var currentUserName = '@Model.FullName';
        
        console.log('DEBUG: currentUserId =', currentUserId);
        console.log('DEBUG: Model.UserId =', @Model.UserId);
        console.log('DEBUG: currentUserName =', currentUserName);

        function switchTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });

            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-button').forEach(btn => {
                btn.classList.remove('active');
            });

            // Show selected tab and mark button as active
            document.getElementById(tabName + '-tab').classList.add('active');
            event.target.classList.add('active');
        }

        function sendEmailToEmployee(userId, userName) {
            console.log('Sending email to user:', userId, userName);
            
            // Create and show email modal
            const emailModal = document.createElement('div');
            emailModal.className = 'modal show';
            emailModal.id = 'emailModal';
            emailModal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Send Email to ${userName}</h3>
                        <button class="modal-close" onclick="closeEmailModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="form-group">
                            <label class="form-label">Email Templates</label>
                            <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 0.5rem; margin-bottom: 1rem;">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="useWelcomeTemplate()">
                                    <i class="fas fa-hand-wave"></i> Welcome
                                </button>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="usePaymentDelayTemplate()">
                                    <i class="fas fa-clock"></i> Payment Delay
                                </button>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="useTerminationTemplate()">
                                    <i class="fas fa-user-times"></i> Termination
                                </button>
                            </div>
                        </div>
                        <form id="emailForm">
                            <div class="form-group">
                                <label class="form-label">Subject *</label>
                                <input type="text" id="emailSubject" class="form-control" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Message *</label>
                                <textarea id="emailBody" class="form-control" rows="8" required></textarea>
                            </div>
                            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1.5rem;">
                                <button type="button" class="btn btn-secondary" onclick="closeEmailModal()">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="sendEmail(${userId})">
                                    <i class="fas fa-paper-plane"></i> Send Email
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            document.body.appendChild(emailModal);
        }

        function useWelcomeTemplate() {
            document.getElementById('emailSubject').value = 'Welcome to PixelSolution POS Team!';
            document.getElementById('emailBody').value = `Dear ${currentUserName},

Welcome to the PixelSolution POS team! We are excited to have you join our organization.

As a new member of our team, you will have access to our comprehensive point-of-sale system and employee management platform. Your account has been set up and you can now access all the features relevant to your role.

Here are some important details:
• Your employee profile has been created
• You can access the system using your provided credentials
• Training materials and resources are available in your dashboard
• Your direct supervisor will contact you shortly with additional information

We look forward to working with you and wish you success in your new role.

If you have any questions or need assistance, please don't hesitate to contact your manager or the HR department.

Best regards,
PixelSolution Management Team`;
        }

        function usePaymentDelayTemplate() {
            document.getElementById('emailSubject').value = 'Important Notice: Payment Delay Notification';
            document.getElementById('emailBody').value = `Dear ${currentUserName},

We hope this message finds you well.

We are writing to inform you that there will be a slight delay in processing salary payments this month due to unavoidable circumstances beyond our control.

Important Details:
• Payment delay: Approximately 3-5 business days
• Reason: Technical issues with our banking partner
• Expected payment date: [Please specify date]
• All payments will be processed with full amounts as scheduled

We sincerely apologize for any inconvenience this may cause and appreciate your understanding during this time. We are working diligently to resolve the issue and ensure this does not happen again in the future.

If you have any urgent financial concerns or questions regarding this delay, please contact the HR department immediately.

Thank you for your patience and continued dedication to PixelSolution.

Best regards,
PixelSolution Management Team`;
        }

        function useTerminationTemplate() {
            document.getElementById('emailSubject').value = 'Important Notice: Employment Status Update';
            document.getElementById('emailBody').value = `Dear ${currentUserName},

We regret to inform you that your employment with PixelSolution POS will be terminated effective [Date].

This decision was made after careful consideration and is final. Your access to company systems and facilities will be deactivated on your last day of employment.

Final Employment Details:
• Last working day: [Please specify date]
• Final paycheck: Will be processed according to company policy
• Company property: Must be returned before your last day
• Benefits: Will continue as per company policy and applicable laws

If you believe this decision was made in error or have concerns about the termination process, you have the right to contact your direct manager or the business owner to discuss the matter further.

We wish you the best in your future endeavors.

Please contact the HR department if you have any questions regarding your final paycheck, benefits, or the transition process.

Sincerely,
PixelSolution Management Team`;
        }

        function closeEmailModal() {
            const modal = document.getElementById('emailModal');
            if (modal) {
                modal.remove();
            }
        }

        function sendEmail(userId) {
            const subject = document.getElementById('emailSubject').value;
            const body = document.getElementById('emailBody').value;

            if (!subject || !body) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            fetch('/Admin/SendEmail', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    UserId: userId,
                    Subject: subject,
                    Body: body
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message || 'Email sent successfully!', 'success');
                    closeEmailModal();
                } else {
                    showToast(data.message || 'Failed to send email', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while sending email', 'error');
            });
        }

        function generateReport() {
            showToast('Generating PDF report...', 'info');
            
            // Create a form to submit for PDF generation
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Admin/GenerateEmployeeReport';
            form.target = '_blank';
            
            const userIdInput = document.createElement('input');
            userIdInput.type = 'hidden';
            userIdInput.name = 'userId';
            userIdInput.value = currentUserId;
            
            form.appendChild(userIdInput);
            document.body.appendChild(form);
            form.submit();
            document.body.removeChild(form);
        }

        function createEmployeeProfile() {
            // Create and show employee profile creation modal
            const profileModal = document.createElement('div');
            profileModal.className = 'modal show';
            profileModal.id = 'createProfileModal';
            profileModal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title">Create Employee Profile for ${currentUserName}</h3>
                        <button class="modal-close" onclick="closeCreateProfileModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <form id="createProfileForm">
                            <div class="form-row">
                                <div class="form-group">
                                    <label class="form-label">Hire Date *</label>
                                    <input type="date" id="profileHireDate" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Position *</label>
                                    <input type="text" id="profilePosition" class="form-control" required placeholder="e.g., Sales Associate">
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Manager Name</label>
                                <input type="text" id="profileManager" class="form-control" placeholder="Direct supervisor name">
                            </div>
                            <div class="form-row">
                                <div class="form-group">
                                    <label class="form-label">Emergency Contact Name</label>
                                    <input type="text" id="profileEmergencyName" class="form-control" placeholder="Emergency contact person">
                                </div>
                                <div class="form-group">
                                    <label class="form-label">Emergency Contact Phone</label>
                                    <input type="tel" id="profileEmergencyPhone" class="form-control" placeholder="Emergency contact number">
                                </div>
                            </div>
                            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1.5rem;">
                                <button type="button" class="btn btn-secondary" onclick="closeCreateProfileModal()">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="submitCreateProfile()">
                                    <i class="fas fa-user-plus"></i> Create Profile
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            `;
            document.body.appendChild(profileModal);
            
            // Set today's date as default hire date
            document.getElementById('profileHireDate').value = new Date().toISOString().split('T')[0];
        }

        function closeCreateProfileModal() {
            const modal = document.getElementById('createProfileModal');
            if (modal) {
                modal.remove();
            }
        }

        function submitCreateProfile() {
            const hireDate = document.getElementById('profileHireDate').value;
            const position = document.getElementById('profilePosition').value;
            const manager = document.getElementById('profileManager').value;
            const emergencyName = document.getElementById('profileEmergencyName').value;
            const emergencyPhone = document.getElementById('profileEmergencyPhone').value;

            if (!hireDate || !position) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            console.log('DEBUG: About to send profile creation with UserId:', currentUserId);
            
            const requestData = {
                UserId: parseInt(currentUserId),
                HireDate: hireDate,
                Position: position,
                ManagerName: manager,
                EmergencyContactName: emergencyName,
                EmergencyContactPhone: emergencyPhone
            };
            
            console.log('DEBUG: Request data being sent:', requestData);
            console.log('DEBUG: JSON stringified:', JSON.stringify(requestData));
            
            fetch('/Admin/CreateEmployeeProfile', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(requestData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast(data.message || 'Employee profile created successfully!', 'success');
                    closeCreateProfileModal();
                    // Refresh the page to show the new profile
                    setTimeout(() => {
                        location.reload();
                    }, 1500);
                } else {
                    showToast(data.message || 'Failed to create employee profile', 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while creating employee profile', 'error');
            });
        }

        function editEmployee() {
            window.location.href = '@Url.Action("Edit", "Admin", new { id = Model.UserId })';
        }

        function sendMessage() {
            // Redirect to messages page with pre-filled recipient
            window.location.href = '/admin/messages?recipient=@Model.UserId';
        }

        function printProfile() {
            window.print();
        }

        function generateReport() {
            // Implementation for generating report
            showToast('Report generation functionality would be implemented here', 'info');
        }

        function viewSales() {
            // Redirect to sales view for this employee
            window.location.href = '@Url.Action("Sales", "Admin")?userId=@Model.UserId';
        }

        // Employee Management Functions from original Users.cshtml
        function manageEmployeeSalary(userId, userName) {
            console.log('Managing salary for user:', userId, userName);

            document.getElementById('salaryModalLabel').textContent = 'Salary Management - ' + userName;

            // Load salary data
            loadEmployeeSalaryData(userId);
            document.getElementById('salaryModal').classList.add('show');
        }

        function manageEmployeeFines(userId, userName) {
            console.log('Managing fines for user:', userId, userName);

            document.getElementById('finesModalLabel').textContent = 'Fines Management - ' + userName;

            // Load fines data
            loadEmployeeFinesData(userId);
            document.getElementById('finesModal').classList.add('show');
        }

        function processEmployeePayment(userId, userName) {
            console.log('Processing payment for user:', userId, userName);

            document.getElementById('paymentModalLabel').textContent = 'Payment Processing - ' + userName;

            // Load payment data
            loadEmployeePaymentData(userId);
            document.getElementById('paymentModal').classList.add('show');
        }

        function loadEmployeeSalaryData(userId) {
            var content = document.getElementById('salaryContent');
            content.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem;">
                    <div>
                        <h6 style="color: #059669; margin-bottom: 1rem;"><i class="fas fa-plus-circle"></i> Set New Salary</h6>
                        <form id="salaryForm">
                            <div class="form-group">
                                <label class="form-label">Salary Amount (KSh)</label>
                                <input type="number" class="form-control" id="salaryAmount" step="0.01" min="0" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Salary Type</label>
                                <select class="form-control" id="salaryType" required>
                                    <option value="Base">Base Salary</option>
                                    <option value="Bonus">Bonus</option>
                                    <option value="Overtime">Overtime</option>
                                    <option value="Commission">Commission</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Effective Date</label>
                                <input type="date" class="form-control" id="effectiveDate" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Notes</label>
                                <textarea class="form-control" id="salaryNotes" rows="2"></textarea>
                            </div>
                            <button type="button" class="btn btn-success" onclick="updateEmployeeSalary(${userId})">
                                <i class="fas fa-save"></i> Update Salary
                            </button>
                        </form>
                    </div>
                    <div>
                        <h6 style="color: #3b82f6; margin-bottom: 1rem;"><i class="fas fa-history"></i> Salary History</h6>
                        <div id="salaryHistory">
                            <div class="text-center">
                                <i class="fas fa-spinner fa-spin" style="color: #667eea;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Set hire date as default, fallback to today
            const hireDate = '@(Model.HireDate?.ToString("yyyy-MM-dd") ?? "")';
            document.getElementById('effectiveDate').value = hireDate || new Date().toISOString().split('T')[0];

            // Load salary history
            loadSalaryHistory(userId);
        }

        function loadEmployeeFinesData(userId) {
            var content = document.getElementById('finesContent');
            content.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem;">
                    <div>
                        <h6 style="color: #f59e0b; margin-bottom: 1rem;"><i class="fas fa-plus-circle"></i> Issue New Fine</h6>
                        <form id="fineForm">
                            <div class="form-group">
                                <label class="form-label">Fine Amount (KSh)</label>
                                <input type="number" class="form-control" id="fineAmount" step="0.01" min="0" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Fine Type</label>
                                <select class="form-control" id="fineType" required>
                                    <option value="Lateness">Lateness</option>
                                    <option value="Absence">Absence</option>
                                    <option value="Misconduct">Misconduct</option>
                                    <option value="Damage">Property Damage</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Description</label>
                                <textarea class="form-control" id="fineDescription" rows="3" required></textarea>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Fine Date</label>
                                <input type="date" class="form-control" id="fineDate" required>
                            </div>
                            <button type="button" class="btn btn-warning" onclick="issueFine(${userId})">
                                <i class="fas fa-exclamation-triangle"></i> Issue Fine
                            </button>
                        </form>
                    </div>
                    <div>
                        <h6 style="color: #3b82f6; margin-bottom: 1rem;"><i class="fas fa-list"></i> Fine History</h6>
                        <div id="fineHistory">
                            <div class="text-center">
                                <i class="fas fa-spinner fa-spin" style="color: #667eea;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Set today's date as default
            document.getElementById('fineDate').value = new Date().toISOString().split('T')[0];

            // Load fine history
            loadFineHistory(userId);
        }

        function editFine(fineId, amount, reason, description, dueDate, status) {
            const modalContent = `
                <div class="modal-header">
                    <h3>Edit Employee Fine</h3>
                    <button class="modal-close" onclick="closeFinesModal()">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="editFineForm">
                        <div class="form-group">
                            <label class="form-label">Fine Amount (KSh)</label>
                            <input type="number" class="form-control" id="editFineAmount" step="0.01" min="0" value="${amount}" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Fine Type</label>
                            <select class="form-control" id="editFineType" required>
                                <option value="Lateness" ${reason === 'Lateness' ? 'selected' : ''}>Lateness</option>
                                <option value="Absence" ${reason === 'Absence' ? 'selected' : ''}>Absence</option>
                                <option value="Misconduct" ${reason === 'Misconduct' ? 'selected' : ''}>Misconduct</option>
                                <option value="Damage" ${reason === 'Damage' ? 'selected' : ''}>Property Damage</option>
                                <option value="Other" ${reason === 'Other' ? 'selected' : ''}>Other</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="editFineDescription" rows="3" required>${description}</textarea>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Due Date</label>
                            <input type="date" class="form-control" id="editFineDueDate" value="${new Date(dueDate).toISOString().split('T')[0]}" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Status</label>
                            <select class="form-control" id="editFineStatus" required>
                                <option value="Pending" ${status === 'Pending' ? 'selected' : ''}>Pending</option>
                                <option value="Paid" ${status === 'Paid' ? 'selected' : ''}>Paid</option>
                                <option value="Waived" ${status === 'Waived' ? 'selected' : ''}>Waived</option>
                                <option value="Overdue" ${status === 'Overdue' ? 'selected' : ''}>Overdue</option>
                            </select>
                        </div>
                        <div class="form-actions">
                            <button type="button" class="btn btn-success" onclick="updateFine(${fineId})">
                                <i class="fas fa-save"></i> Update Fine
                            </button>
                            <button type="button" class="btn btn-danger" onclick="deleteFine(${fineId})" style="margin-left: 10px;">
                                <i class="fas fa-trash"></i> Delete Fine
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            document.getElementById('finesModal').innerHTML = modalContent;
            document.getElementById('finesModal').classList.add('show');
        }

        function updateFine(fineId) {
            const fineData = {
                FineId: parseInt(fineId),
                Amount: parseFloat(document.getElementById('editFineAmount').value),
                Reason: document.getElementById('editFineType').value,
                Description: document.getElementById('editFineDescription').value,
                DueDate: document.getElementById('editFineDueDate').value,
                Status: document.getElementById('editFineStatus').value
            };

            console.log('DEBUG: Updating fine with data:', fineData);

            fetch('@Url.Action("UpdateEmployeeFine", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(fineData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Fine updated successfully!', 'success');
                    closeFinesModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Error: ' + (data.message || 'Failed to update fine'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error updating fine: ' + error.message, 'error');
            });
        }

        function deleteFine(fineId) {
            if (!confirm('Are you sure you want to delete this fine? This action cannot be undone.')) {
                return;
            }

            const deleteData = {
                FineId: parseInt(fineId)
            };

            console.log('DEBUG: Deleting fine with ID:', fineId);

            fetch('@Url.Action("DeleteEmployeeFine", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(deleteData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Fine deleted successfully!', 'success');
                    closeFinesModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Error: ' + (data.message || 'Failed to delete fine'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error deleting fine: ' + error.message, 'error');
            });
        }

        function loadEmployeePaymentData(userId) {
            var content = document.getElementById('paymentContent');
            content.innerHTML = `
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem;">
                    <div>
                        <h6 style="color: #059669; margin-bottom: 1rem;"><i class="fas fa-credit-card"></i> Process Payment</h6>
                        <form id="paymentForm">
                            <div class="form-group">
                                <label class="form-label">Payment Amount (KSh)</label>
                                <input type="number" class="form-control" id="paymentAmount" step="0.01" min="0" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Payment Type</label>
                                <select class="form-control" id="paymentType" required>
                                    <option value="Salary">Salary Payment</option>
                                    <option value="Bonus">Bonus Payment</option>
                                    <option value="Overtime">Overtime Payment</option>
                                    <option value="Advance">Salary Advance</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Payment Method</label>
                                <select class="form-control" id="paymentMethod" required>
                                    <option value="Bank Transfer">Bank Transfer</option>
                                    <option value="Cash">Cash</option>
                                    <option value="Mobile Money">Mobile Money</option>
                                    <option value="Cheque">Cheque</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Payment Date</label>
                                <input type="date" class="form-control" id="paymentDate" required>
                            </div>
                            <div class="form-group">
                                <label class="form-label">Notes</label>
                                <textarea class="form-control" id="paymentNotes" rows="2"></textarea>
                            </div>
                            <button type="button" class="btn btn-success" onclick="processPayment(${userId})">
                                <i class="fas fa-money-check"></i> Process Payment
                            </button>
                        </form>
                    </div>
                    <div>
                        <h6 style="color: #3b82f6; margin-bottom: 1rem;"><i class="fas fa-history"></i> Payment History</h6>
                        <div id="paymentHistory">
                            <div class="text-center">
                                <i class="fas fa-spinner fa-spin" style="color: #667eea;"></i>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            // Set today's date as default
            document.getElementById('paymentDate').value = new Date().toISOString().split('T')[0];

            // Load payment history
            loadPaymentHistory(userId);
        }

        // Modal close functions
        function closeSalaryModal() {
            document.getElementById('salaryModal').classList.remove('show');
        }

        function closeFinesModal() {
            document.getElementById('finesModal').classList.remove('show');
        }

        function closePaymentModal() {
            document.getElementById('paymentModal').classList.remove('show');
        }

        // Employee management functions
        function updateEmployeeSalary(userId) {
            console.log('DEBUG: updateEmployeeSalary called with userId:', userId);
            const form = document.getElementById('salaryForm');
            const salaryData = {
                UserId: parseInt(userId),
                Amount: parseFloat(document.getElementById('salaryAmount').value),
                SalaryType: document.getElementById('salaryType').value,
                EffectiveDate: document.getElementById('effectiveDate').value, // Send as string, not Date object
                Notes: document.getElementById('salaryNotes').value || ''
            };
            
            console.log('DEBUG: Salary data being sent:', salaryData);

            // Validate
            if (!salaryData.Amount || salaryData.Amount <= 0) {
                showToast('Please enter a valid salary amount', 'error');
                return;
            }
            if (!salaryData.SalaryType) {
                showToast('Please select a salary type', 'error');
                return;
            }
            if (!salaryData.EffectiveDate) {
                showToast('Please select an effective date', 'error');
                return;
            }

            console.log('DEBUG: Making fetch request to UpdateEmployeeSalary');
            fetch('@Url.Action("UpdateEmployeeSalary", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(salaryData)
            })
            .then(response => {
                console.log('DEBUG: Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('DEBUG: Response data:', data);
                if (data.success) {
                    showToast('Salary updated successfully and employee notified!', 'success');
                    closeSalaryModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Error: ' + (data.message || 'Failed to update salary'), 'error');
                }
            })
            .catch(error => {
                console.error('DEBUG: Fetch error:', error);
                showToast('Error updating salary: ' + error.message, 'error');
            });
        }

        function sendEmailToEmployee(userId, userName) {
            // Create email modal content
            const modalContent = `
                <div class="modal-body">
                    <form id="emailForm">
                        <div class="form-group">
                            <label class="form-label">Email Template</label>
                            <select class="form-control" id="emailTemplate" onchange="loadEmailTemplate()">
                                <option value="">Select a template...</option>
                                <option value="welcome">Welcome Message</option>
                                <option value="payment_delay">Payment Delay Notification</option>
                                <option value="termination">Termination Notice</option>
                                <option value="custom">Custom Message</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Subject</label>
                            <input type="text" class="form-control" id="emailSubject" required>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Message</label>
                            <textarea class="form-control" id="emailBody" rows="6" required></textarea>
                        </div>
                        <div class="form-group" style="display: flex; gap: 1rem; justify-content: flex-end;">
                            <button type="button" class="btn btn-secondary" onclick="closeEmailModal()">Cancel</button>
                            <button type="button" class="btn btn-success" onclick="sendEmail(${userId})">
                                <i class="fas fa-paper-plane"></i> Send Email
                            </button>
                        </div>
                    </form>
                </div>
            `;
            
            // Show modal with email form
            document.getElementById('salaryContent').innerHTML = modalContent;
            document.getElementById('salaryModalLabel').textContent = 'Send Email to ' + userName;
            document.getElementById('salaryModal').classList.add('show');
        }

        function loadEmailTemplate() {
            const template = document.getElementById('emailTemplate').value;
            const subjectField = document.getElementById('emailSubject');
            const bodyField = document.getElementById('emailBody');
            
            switch(template) {
                case 'welcome':
                    subjectField.value = 'Welcome to Pixel Solution Ltd';
                    bodyField.value = `Dear ${currentUserName},

Welcome to Pixel Solution Ltd! We are excited to have you join our team.

Your employee account has been set up and you can now access the system. Please contact HR if you have any questions about your role or need assistance getting started.

We look forward to working with you and wish you success in your new position.

Best regards,
HR Department
Pixel Solution Ltd`;
                    break;
                case 'payment_delay':
                    subjectField.value = 'Payment Processing Notification';
                    bodyField.value = `Dear ${currentUserName},

We hope this message finds you well. We are writing to inform you about a delay in processing your salary payment.

Due to administrative procedures, your payment will be processed within the next 2-3 business days. We sincerely apologize for any inconvenience this may cause.

If you have any urgent concerns or questions, please don't hesitate to contact the HR department.

Thank you for your understanding and patience.

Best regards,
HR Department
Pixel Solution Ltd`;
                    break;
                case 'termination':
                    subjectField.value = 'Employment Termination Notice';
                    bodyField.value = `Dear ${currentUserName},

We regret to inform you that your employment with Pixel Solution Ltd will be terminated effective [DATE].

This decision was made after careful consideration of [REASON]. Your final paycheck, including any accrued benefits, will be processed according to company policy.

Please return all company property, including access cards and equipment, by your last day of work.

If you have any questions about this decision or the termination process, you may contact HR or request a meeting to discuss.

We wish you the best in your future endeavors.

Sincerely,
Management Team
Pixel Solution Ltd`;
                    break;
                case 'custom':
                    subjectField.value = '';
                    bodyField.value = `Dear ${currentUserName},

[Your custom message here]

Best regards,
Pixel Solution Ltd`;
                    break;
                default:
                    subjectField.value = '';
                    bodyField.value = '';
            }
        }

        function sendEmail(userId) {
            console.log('DEBUG: sendEmail called with userId:', userId);
            console.log('DEBUG: currentUserId variable:', currentUserId);
            
            const emailData = {
                UserId: parseInt(userId) || parseInt(currentUserId),
                Subject: document.getElementById('emailSubject').value,
                Body: document.getElementById('emailBody').value
            };
            
            console.log('DEBUG: Email data being sent:', emailData);

            // Validate
            if (!emailData.Subject.trim()) {
                showToast('Please enter an email subject', 'error');
                return;
            }
            if (!emailData.Body.trim()) {
                showToast('Please enter an email message', 'error');
                return;
            }

            fetch('@Url.Action("SendEmployeeEmail", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(emailData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Email sent successfully!', 'success');
                    closeSalaryModal();
                } else {
                    showToast('Error: ' + (data.message || 'Failed to send email'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error sending email', 'error');
            });
        }

        function closeEmailModal() {
            closeSalaryModal();
        }

        function issueFine(userId) {
            // Show add fine modal
            document.getElementById('addFineModal').classList.add('show');
        }

        function processPayment(userId) {
            const form = document.getElementById('paymentForm');
            const formData = new FormData(form);
            
            const paymentData = {
                UserId: userId,
                Amount: parseFloat(document.getElementById('paymentAmount').value),
                PaymentType: document.getElementById('paymentType').value,
                PaymentMethod: document.getElementById('paymentMethod').value,
                PaymentDate: new Date(document.getElementById('paymentDate').value),
                Notes: document.getElementById('paymentNotes').value
            };

            // Validate
            if (!paymentData.Amount || paymentData.Amount <= 0) {
                showToast('Please enter a valid payment amount', 'error');
                return;
            }
            if (!paymentData.PaymentType) {
                showToast('Please select a payment type', 'error');
                return;
            }
            if (!paymentData.PaymentMethod) {
                showToast('Please select a payment method', 'error');
                return;
            }
            if (!paymentData.PaymentDate) {
                showToast('Please select a payment date', 'error');
                return;
            }

            fetch('@Url.Action("ProcessEmployeePayment", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(paymentData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Payment processed successfully and employee notified!', 'success');
                    closePaymentModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Error: ' + (data.message || 'Failed to process payment'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error processing payment', 'error');
            });
        }

        function sendPaymentReminder(userId) {
            if (confirm('Send payment reminder to this employee?')) {
                const requestData = {
                    UserId: userId,
                    SendEmail: true,
                    SendMessage: true
                };

                fetch('@Url.Action("SendPaymentReminder", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Payment reminder sent successfully!', 'success');
                    } else {
                        showToast('Error: ' + (data.message || 'Failed to send reminder'), 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error sending payment reminder', 'error');
                });
            }
        }

        function submitFine() {
            const form = document.getElementById('addFineForm');
            const formData = new FormData(form);
            
            const fineData = {
                UserId: @Model.UserId,
                Amount: parseFloat(formData.get('Amount')),
                Reason: formData.get('Reason'),
                Description: formData.get('Description'),
                DueDate: formData.get('DueDate')
            };

            // Validate
            if (!fineData.Amount || fineData.Amount <= 0) {
                showToast('Please enter a valid amount', 'error');
                return;
            }
            if (!fineData.Reason.trim()) {
                showToast('Please enter a reason for the fine', 'error');
                return;
            }
            if (!fineData.DueDate) {
                showToast('Please select a due date', 'error');
                return;
            }

            fetch('@Url.Action("AddEmployeeFine", "Admin")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(fineData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showToast('Fine added successfully and employee notified!', 'success');
                    closeAddFineModal();
                    setTimeout(() => location.reload(), 1500);
                } else {
                    showToast('Error: ' + (data.message || 'Failed to add fine'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('Error adding fine', 'error');
            });
        }

        function closeAddFineModal() {
            document.getElementById('addFineModal').classList.remove('show');
            document.getElementById('addFineForm').reset();
        }

        function loadSalaryHistory(userId) {
            const historyContainer = document.getElementById('salaryHistory');
            historyContainer.innerHTML = '<div class="loading">Loading salary history...</div>';
            
            // Display recent salaries from model
            const recentSalaries = @Html.Raw(Json.Serialize(Model.RecentSalaries ?? new List<EmployeeSalary>()));
            
            if (recentSalaries.length === 0) {
                historyContainer.innerHTML = '<p class="no-data">No salary history available</p>';
                return;
            }

            let historyHtml = '<div class="history-list">';
            recentSalaries.forEach(salary => {
                historyHtml += `
                    <div class="history-item">
                        <div class="history-details">
                            <strong>KSh ${salary.amount?.toLocaleString() || '0'}</strong>
                            <span class="history-date">${salary.effectiveDate ? new Date(salary.effectiveDate).toLocaleDateString() : 'Unknown'}</span>
                        </div>
                        <div class="history-meta">
                            <span class="frequency">${salary.paymentFrequency || 'Monthly'}</span>
                        </div>
                    </div>
                `;
            });
            historyHtml += '</div>';
            
            historyContainer.innerHTML = historyHtml;
        }

        function loadFineHistory(userId) {
            const historyContainer = document.getElementById('fineHistory');
            historyContainer.innerHTML = '<div class="loading">Loading fine history...</div>';
            
            // Use FineHistory from ViewModel
            const fineHistory = @Html.Raw(Json.Serialize(Model.FineHistory ?? new List<EmployeeFineViewModel>()));
            
            let historyHtml = '<div class="history-list">';
            
            if (fineHistory.length === 0) {
                historyContainer.innerHTML = '<p class="no-data">No fine history available</p>';
                return;
            } else {
                fineHistory.forEach(fine => {
                    const statusClass = fine.status === 'Paid' ? 'paid' : 'unpaid';
                    
                    historyHtml += `
                        <div class="history-item">
                            <div class="history-details">
                                <strong>KSh ${fine.amount?.toLocaleString() || '0'}</strong>
                                <span class="fine-reason">${fine.reason || 'No reason specified'}</span>
                                <span class="history-date">Issued: ${fine.issuedDate ? new Date(fine.issuedDate).toLocaleDateString() : 'Unknown'}</span>
                                ${fine.dueDate ? `<span class="due-date">Due: ${new Date(fine.dueDate).toLocaleDateString()}</span>` : ''}
                                ${fine.description ? `<span class="fine-description">${fine.description}</span>` : ''}
                            </div>
                            <div class="history-meta">
                                <span class="status ${statusClass}">${fine.status || 'Pending'}</span>
                                <div class="fine-actions">
                                    <button class="btn btn-sm btn-primary" onclick="editFine(${fine.fineId}, ${fine.amount}, '${fine.reason}', '${fine.description || ''}', '${fine.dueDate}', '${fine.status}')" title="Edit Fine">
                                        <i class="fas fa-edit"></i>
                                    </button>
                                    <button class="btn btn-sm btn-danger" onclick="deleteFine(${fine.fineId})" title="Delete Fine">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    `;
                });
            }
            historyHtml += '</div>';
            
            historyContainer.innerHTML = historyHtml;
        }

        function loadPaymentHistory(userId) {
            const historyContainer = document.getElementById('paymentHistory');
            historyContainer.innerHTML = '<div class="loading">Loading payment history...</div>';
            
            // Display recent payments from model
            const recentPayments = @Html.Raw(Json.Serialize(Model.RecentPayments ?? new List<EmployeePayment>()));
            
            if (recentPayments.length === 0) {
                historyContainer.innerHTML = '<p class="no-data">No payment history available</p>';
                return;
            }

            let historyHtml = '<div class="history-list">';
            recentPayments.forEach(payment => {
                historyHtml += `
                    <div class="history-item">
                        <div class="history-details">
                            <strong>KSh ${payment.netPay?.toLocaleString() || '0'}</strong>
                            <span class="payment-type">${payment.paymentPeriod || 'Salary'}</span>
                            <span class="history-date">${payment.paymentDate ? new Date(payment.paymentDate).toLocaleDateString() : 'Unknown'}</span>
                        </div>
                        <div class="history-meta">
                            <span class="method">${payment.paymentMethod || 'Bank Transfer'}</span>
                        </div>
                    </div>
                `;
            });
            historyHtml += '</div>';
            
            historyContainer.innerHTML = historyHtml;
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        function showToast(message, type) {
            // Remove existing toasts
            var existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(function(toast) {
                toast.remove();
            });

            var toast = document.createElement('div');
            toast.className = 'toast ' + type;

            var iconClass = 'info-circle';
            if (type === 'success') iconClass = 'check-circle';
            else if (type === 'error') iconClass = 'exclamation-circle';
            else if (type === 'warning') iconClass = 'exclamation-triangle';

            toast.innerHTML = '<div style="display: flex; align-items: center; gap: 0.5rem;"><i class="fas fa-' + iconClass + '"></i><span>' + message + '</span></div>';

            document.body.appendChild(toast);

            setTimeout(function() {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(function() {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(function() {
                    if (toast.parentNode) {
                        toast.remove();
                    }
                }, 300);
            }, 4000);
        }

        // Close modals when clicking outside
        window.addEventListener('click', function(event) {
            var modals = ['salaryModal', 'finesModal', 'paymentModal'];
            modals.forEach(function(modalId) {
                var modal = document.getElementById(modalId);
                if (event.target === modal) {
                    modal.classList.remove('show');
                }
            });
        });
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>