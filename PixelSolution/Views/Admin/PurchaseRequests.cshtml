@model List<PixelSolution.ViewModels.PurchaseRequestViewModel>
@{
    ViewData["Title"] = "Purchase Requests Management - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.8.3/angular.min.js"></script>
    <style>
        /* Custom animations and styles */
        @@keyframes slideInUp {
            from { transform: translateY(30px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @@keyframes slideInRight {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        @@keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        @@keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .animate-slide-in-up {
            animation: slideInUp 0.6s ease-out;
        }

        .animate-slide-in-right {
            animation: slideInRight 0.4s ease-out;
        }

        .animate-pulse {
            animation: pulse 2s infinite;
        }

        .shimmer {
            position: relative;
            overflow: hidden;
        }

        .shimmer::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            transform: translateX(-100%);
            animation: shimmer 2s infinite;
        }

        .card-hover {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        }

        .card-hover:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
        }

        .status-indicator {
            position: relative;
            overflow: hidden;
        }

        .status-indicator::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: left 0.5s;
        }

        .status-indicator:hover::before {
            left: 100%;
        }

        .glass-morphism {
            background: rgba(255, 255, 255, 0.25);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        .gradient-border {
            position: relative;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 1rem;
            padding: 2px;
        }

        .gradient-border-content {
            background: white;
            border-radius: 0.875rem;
            padding: 1.5rem;
        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: linear-gradient(45deg, #5a67d8, #6b46c1);
        }

        /* Responsive card grid */
        .cards-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 1.5rem;
            max-height: calc(100vh - 400px);
            overflow-y: auto;
            padding-right: 8px;
        }

        @@media (max-width: 768px) {
            .cards-container {
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 1rem;
                max-height: calc(100vh - 350px);
            }
        }

        @@media (max-width: 480px) {
            .cards-container {
                grid-template-columns: 1fr;
                gap: 0.75rem;
                max-height: calc(100vh - 300px);
            }
        }

        /* Modal styles */
        .modal-overlay {
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(8px);
        }

        .modal-content {
            max-height: 90vh;
            overflow-y: auto;
        }

        /* Checkbox animations */
        .checkbox-wrapper {
            position: relative;
            cursor: pointer;
        }

        .checkbox-wrapper input[type="checkbox"] {
            opacity: 0;
            position: absolute;
        }

        .checkbox-custom {
            width: 20px;
            height: 20px;
            border: 2px solid #e2e8f0;
            border-radius: 4px;
            background: white;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .checkbox-wrapper input[type="checkbox"]:checked + .checkbox-custom {
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-color: #667eea;
            transform: scale(1.1);
        }

        .checkbox-custom::after {
            content: 'âœ“';
            color: white;
            font-size: 12px;
            font-weight: bold;
            opacity: 0;
            transform: scale(0);
            transition: all 0.2s ease;
        }

        .checkbox-wrapper input[type="checkbox"]:checked + .checkbox-custom::after {
            opacity: 1;
            transform: scale(1);
        }

        /* Loading spinner */
        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #f3f4f6;
            border-top: 4px solid #667eea;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Pagination dots */
        .pagination-dots {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .pagination-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #cbd5e1;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .pagination-dot.active {
            background: linear-gradient(45deg, #667eea, #764ba2);
            transform: scale(1.2);
        }

        .pagination-dot:hover {
            background: #94a3b8;
            transform: scale(1.1);
        }
    </style>
}

<div ng-app="purchaseRequestsApp" ng-controller="PurchaseRequestsController" class="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
    
    <!-- Header Section -->
    <div class="glass-morphism rounded-3xl p-8 mb-8 shadow-2xl">
        <div class="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6">
            <div class="flex-1">
                <h1 class="text-4xl lg:text-5xl font-bold bg-gradient-to-r from-indigo-600 via-purple-600 to-blue-600 bg-clip-text text-transparent mb-3">
                    Purchase Requests Management
                </h1>
                <p class="text-slate-600 text-lg">Efficiently manage and track all customer purchase requests with real-time updates</p>
                
                <!-- Stats Overview -->
                <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mt-6">
                    <div class="bg-white/60 backdrop-blur-lg rounded-2xl p-4 border border-white/20 card-hover">
                        <div class="text-3xl font-bold text-indigo-600">{{stats.total}}</div>
                        <div class="text-sm text-slate-600 font-medium">Total Requests</div>
                    </div>
                    <div class="bg-white/60 backdrop-blur-lg rounded-2xl p-4 border border-white/20 card-hover">
                        <div class="text-3xl font-bold text-yellow-600">{{stats.pending}}</div>
                        <div class="text-sm text-slate-600 font-medium">Pending</div>
                    </div>
                    <div class="bg-white/60 backdrop-blur-lg rounded-2xl p-4 border border-white/20 card-hover">
                        <div class="text-3xl font-bold text-blue-600">{{stats.processing}}</div>
                        <div class="text-sm text-slate-600 font-medium">Processing</div>
                    </div>
                    <div class="bg-white/60 backdrop-blur-lg rounded-2xl p-4 border border-white/20 card-hover">
                        <div class="text-3xl font-bold text-green-600">{{stats.delivered}}</div>
                        <div class="text-sm text-slate-600 font-medium">Delivered</div>
                    </div>
                    <div class="bg-white/60 backdrop-blur-lg rounded-2xl p-4 border border-white/20 card-hover">
                        <div class="text-3xl font-bold text-purple-600">KSh {{stats.totalValue | number:0}}</div>
                        <div class="text-sm text-slate-600 font-medium">Total Value</div>
                    </div>
                </div>
            </div>
            
            <!-- Search -->
            <div class="relative w-full lg:w-80">
                <i class="fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400"></i>
                <input 
                    type="text" 
                    ng-model="searchTerm"
                    ng-change="filterRequests()"
                    placeholder="Search requests, customers..." 
                    class="w-full pl-12 pr-4 py-4 bg-white/80 backdrop-blur-lg border border-white/30 rounded-2xl focus:outline-none focus:ring-4 focus:ring-indigo-500/30 focus:border-indigo-500 transition-all duration-300 text-lg"
                />
            </div>
        </div>
    </div>

    <!-- Controls Section -->
    <div class="glass-morphism rounded-3xl p-6 mb-8 shadow-xl">
        <!-- View Toggles -->
        <div class="flex flex-wrap justify-center gap-3 mb-6">
            <button 
                ng-repeat="view in views"
                ng-click="setCurrentView(view.key)"
                ng-class="{'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg': currentView === view.key, 'bg-white/70 text-slate-700 hover:bg-white/90': currentView !== view.key}"
                class="px-6 py-3 rounded-xl font-semibold transition-all duration-300 flex items-center gap-2 card-hover">
                <i class="{{view.icon}}"></i>
                {{view.label}}
                <span class="bg-white/30 text-xs px-2 py-1 rounded-full ml-1">{{view.count}}</span>
            </button>
        </div>

        <!-- Filters -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 xl:grid-cols-6 gap-4 mb-6">
            <select ng-model="filters.status" ng-change="filterRequests()" 
                class="px-4 py-3 bg-white/80 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500/30">
                <option value="">All Status</option>
                <option value="Pending">Pending</option>
                <option value="Processing">Processing</option>
                <option value="Shipped">Shipped</option>
                <option value="Delivered">Delivered</option>
                <option value="Completed">Completed</option>
            </select>
            
            <select ng-model="filters.sortBy" ng-change="filterRequests()" 
                class="px-4 py-3 bg-white/80 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500/30">
                <option value="date">Sort by Date</option>
                <option value="amount">Sort by Amount</option>
                <option value="customer">Sort by Customer</option>
                <option value="status">Sort by Status</option>
            </select>

            <input type="date" ng-model="filters.dateFrom" ng-change="filterRequests()" 
                class="px-4 py-3 bg-white/80 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500/30">
            
            <input type="date" ng-model="filters.dateTo" ng-change="filterRequests()" 
                class="px-4 py-3 bg-white/80 border border-white/30 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500/30">

            <button ng-click="refreshData()" 
                class="px-6 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-xl font-semibold hover:from-green-600 hover:to-emerald-600 transition-all duration-300 flex items-center justify-center gap-2">
                <i class="fas fa-sync-alt"></i>
                Refresh
            </button>

            <button ng-click="exportRequests()" 
                class="px-6 py-3 bg-gradient-to-r from-slate-500 to-slate-600 text-white rounded-xl font-semibold hover:from-slate-600 hover:to-slate-700 transition-all duration-300 flex items-center justify-center gap-2">
                <i class="fas fa-download"></i>
                Export
            </button>
        </div>

        <!-- Bulk Actions -->
        <div ng-show="selectedRequests.length > 0" class="bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-2xl p-4 mb-4 animate-slide-in-up">
            <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                <div class="flex items-center gap-3">
                    <i class="fas fa-check-circle text-2xl"></i>
                    <span class="font-semibold text-lg">{{selectedRequests.length}} request(s) selected</span>
                </div>
                <div class="flex flex-wrap gap-2">
                    <button ng-click="bulkUpdateStatus('Processing')" 
                        class="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg font-medium transition-all duration-300">
                        <i class="fas fa-cog mr-2"></i>Set Processing
                    </button>
                    <button ng-click="bulkUpdateStatus('Shipped')" 
                        class="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg font-medium transition-all duration-300">
                        <i class="fas fa-shipping-fast mr-2"></i>Set Shipped
                    </button>
                    <button ng-click="bulkUpdateStatus('Delivered')" 
                        class="px-4 py-2 bg-white/20 hover:bg-white/30 rounded-lg font-medium transition-all duration-300">
                        <i class="fas fa-truck mr-2"></i>Set Delivered
                    </button>
                    <button ng-click="clearSelection()" 
                        class="px-4 py-2 bg-red-500/80 hover:bg-red-600/80 rounded-lg font-medium transition-all duration-300">
                        <i class="fas fa-times mr-2"></i>Clear
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Purchase Requests Cards -->
    <div class="cards-container" id="cardsContainer">
        <div ng-repeat="request in displayedRequests track by request.PurchaseRequestId" 
             class="gradient-border card-hover animate-slide-in-up">
            <div class="gradient-border-content">
                <!-- Card Header -->
                <div class="flex justify-between items-start mb-4">
                    <div class="flex items-center gap-3">
                        <label class="checkbox-wrapper">
                            <input type="checkbox" 
                                   ng-model="request.selected"
                                   ng-change="updateSelection()">
                            <div class="checkbox-custom"></div>
                        </label>
                        <div>
                            <h3 class="text-xl font-bold text-slate-800 mb-1">{{request.RequestNumber}}</h3>
                            <p class="text-sm text-slate-500">ID: #{{request.PurchaseRequestId}}</p>
                        </div>
                    </div>
                    <div class="status-indicator px-3 py-1 rounded-full text-xs font-bold uppercase tracking-wide"
                         ng-class="{
                             'bg-yellow-100 text-yellow-800': request.Status === 'Pending',
                             'bg-blue-100 text-blue-800': request.Status === 'Processing',
                             'bg-purple-100 text-purple-800': request.Status === 'Shipped',
                             'bg-green-100 text-green-800': request.Status === 'Delivered',
                             'bg-emerald-100 text-emerald-800': request.Status === 'Completed',
                             'bg-red-100 text-red-800': request.Status === 'Cancelled'
                         }">
                        {{request.Status}}
                    </div>
                </div>

                <!-- Customer Info -->
                <div class="flex items-center gap-4 mb-4 p-3 bg-slate-50 rounded-xl">
                    <div class="w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-lg">
                        {{getInitials(request.CustomerName)}}
                    </div>
                    <div class="flex-1">
                        <div class="font-semibold text-slate-800">{{request.CustomerName}}</div>
                        <div class="text-sm text-slate-600">{{request.CustomerEmail}}</div>
                    </div>
                </div>

                <!-- Request Details -->
                <div class="grid grid-cols-2 gap-4 mb-4 text-sm">
                    <div class="bg-gradient-to-r from-blue-50 to-indigo-50 p-3 rounded-lg">
                        <div class="text-slate-600 mb-1">Total Amount</div>
                        <div class="text-2xl font-bold text-indigo-600">KSh {{request.TotalAmount | number:0}}</div>
                    </div>
                    <div class="bg-gradient-to-r from-green-50 to-emerald-50 p-3 rounded-lg">
                        <div class="text-slate-600 mb-1">Items Count</div>
                        <div class="text-2xl font-bold text-emerald-600">{{request.TotalItems}}</div>
                    </div>
                    <div class="bg-gradient-to-r from-purple-50 to-pink-50 p-3 rounded-lg">
                        <div class="text-slate-600 mb-1">Request Date</div>
                        <div class="font-semibold text-purple-600">{{formatDate(request.RequestDate)}}</div>
                    </div>
                    <div class="bg-gradient-to-r from-yellow-50 to-orange-50 p-3 rounded-lg">
                        <div class="text-slate-600 mb-1">Payment Status</div>
                        <div class="font-semibold text-orange-600">{{request.PaymentStatus}}</div>
                    </div>
                </div>

                <!-- Delivery Address -->
                <div ng-if="request.DeliveryAddress" class="mb-4 p-3 bg-slate-50 rounded-xl">
                    <div class="flex items-start gap-2">
                        <i class="fas fa-map-marker-alt text-slate-500 mt-1"></i>
                        <div>
                            <div class="text-xs text-slate-500 uppercase tracking-wide font-medium mb-1">Delivery Address</div>
                            <div class="text-sm text-slate-700">{{request.DeliveryAddress}}</div>
                        </div>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex flex-wrap gap-2">
                    <button ng-click="viewRequest(request)" 
                        class="flex-1 px-4 py-2 bg-gradient-to-r from-indigo-500 to-blue-500 text-white rounded-lg font-medium hover:from-indigo-600 hover:to-blue-600 transition-all duration-300 flex items-center justify-center gap-2">
                        <i class="fas fa-eye"></i>
                        View Details
                    </button>
                    
                    <div class="flex gap-1">
                        <button ng-if="request.Status === 'Processing'" 
                            ng-click="updateRequestStatus(request.PurchaseRequestId, 'Shipped')"
                            class="px-3 py-2 bg-gradient-to-r from-purple-500 to-pink-500 text-white rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-300"
                            title="Mark as Shipped">
                            <i class="fas fa-shipping-fast"></i>
                        </button>
                        
                        <button ng-if="request.Status === 'Shipped'" 
                            ng-click="updateRequestStatus(request.PurchaseRequestId, 'Delivered')"
                            class="px-3 py-2 bg-gradient-to-r from-green-500 to-emerald-500 text-white rounded-lg font-medium hover:from-green-600 hover:to-emerald-600 transition-all duration-300"
                            title="Mark as Delivered">
                            <i class="fas fa-truck"></i>
                        </button>
                        
                        <button ng-if="request.Status === 'Delivered'" 
                            ng-click="updateRequestStatus(request.PurchaseRequestId, 'Completed')"
                            class="px-3 py-2 bg-gradient-to-r from-amber-500 to-yellow-500 text-white rounded-lg font-medium hover:from-amber-600 hover:to-yellow-600 transition-all duration-300"
                            title="Mark as Completed">
                            <i class="fas fa-star"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Pagination -->
    <div ng-if="totalPages > 1" class="pagination-dots">
        <div ng-repeat="page in getPaginationArray() track by $index" 
             ng-click="goToPage(page)"
             ng-class="{'active': currentPage === page}"
             class="pagination-dot"></div>
    </div>

    <!-- Empty State -->
    <div ng-if="displayedRequests.length === 0 && !loading" 
         class="text-center py-16 glass-morphism rounded-3xl">
        <i class="fas fa-file-invoice text-6xl text-slate-300 mb-4"></i>
        <h3 class="text-2xl font-bold text-slate-600 mb-2">No Purchase Requests Found</h3>
        <p class="text-slate-500">Try adjusting your search criteria or filters.</p>
    </div>

    <!-- Loading State -->
    <div ng-if="loading" class="text-center py-16">
        <div class="loading-spinner mx-auto mb-4"></div>
        <p class="text-slate-600 font-medium">Loading purchase requests...</p>
    </div>
</div>

<!-- Request Details Modal -->
<div ng-if="selectedRequest" 
     class="fixed inset-0 modal-overlay flex items-center justify-center z-50 p-4"
     ng-click="closeModal($event)">
    <div class="modal-content bg-white rounded-3xl shadow-2xl w-full max-w-4xl animate-slide-in-up"
         ng-click="$event.stopPropagation()">
        <!-- Modal Header -->
        <div class="bg-gradient-to-r from-indigo-500 to-purple-500 text-white p-6 rounded-t-3xl">
            <div class="flex justify-between items-center">
                <div>
                    <h2 class="text-2xl font-bold">Purchase Request Details</h2>
                    <p class="text-indigo-100">{{selectedRequest.RequestNumber}} - ID: #{{selectedRequest.PurchaseRequestId}}</p>
                </div>
                <button ng-click="closeModal()" 
                    class="text-white hover:bg-white/20 rounded-full p-2 transition-all duration-300">
                    <i class="fas fa-times text-xl"></i>
                </button>
            </div>
        </div>
        
        <!-- Modal Body -->
        <div class="p-6 max-h-96 overflow-y-auto">
            <!-- Request Information -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                <div class="bg-gradient-to-br from-blue-50 to-indigo-50 p-6 rounded-2xl">
                    <h3 class="text-lg font-bold text-slate-800 mb-4 flex items-center gap-2">
                        <i class="fas fa-file-invoice text-indigo-600"></i>
                        Request Information
                    </h3>
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-slate-600">Request Number:</span>
                            <span class="font-semibold">{{selectedRequest.RequestNumber}}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-slate-600">Status:</span>
                            <span class="font-semibold px-2 py-1 rounded-full text-xs"
                                  ng-class="{
                                      'bg-yellow-100 text-yellow-800': selectedRequest.Status === 'Pending',
                                      'bg-blue-100 text-blue-800': selectedRequest.Status === 'Processing',
                                      'bg-purple-100 text-purple-800': selectedRequest.Status === 'Shipped',
                                      'bg-green-100 text-green-800': selectedRequest.Status === 'Delivered',
                                      'bg-emerald-100 text-emerald-800': selectedRequest.Status === 'Completed'
                                  }">{{selectedRequest.Status}}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-slate-600">Request Date:</span>
                            <span class="font-semibold">{{formatDate(selectedRequest.RequestDate)}}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-slate-600">Total Amount:</span>
                            <span class="font-bold text-green-600 text-lg">KSh {{selectedRequest.TotalAmount | number:0}}</span>
                        </div>
                    </div>
                </div>
                
                <div class="bg-gradient-to-br from-green-50 to-emerald-50 p-6 rounded-2xl">
                    <h3 class="text-lg font-bold text-slate-800 mb-4 flex items-center gap-2">
                        <i class="fas fa-user text-emerald-600"></i>
                        Customer Information
                    </h3>
                    <div class="space-y-3">
                        <div class="flex justify-between">
                            <span class="text-slate-600">Name:</span>
                            <span class="font-semibold">{{selectedRequest.CustomerName}}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-slate-600">Email:</span>
                            <span class="font-semibold">{{selectedRequest.CustomerEmail}}</span>
                        </div>
                        <div class="flex justify-between">
                            <span class="text-slate-600">Payment Status:</span>
                            <span class="font-semibold">{{selectedRequest.PaymentStatus}}</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Items List -->
            <div class="bg-gradient-to-br from-purple-50 to-pink-50 rounded-2xl p-6">
                <h3 class="text-lg font-bold text-slate-800 mb-4 flex items-center gap-2">
                    <i class="fas fa-shopping-cart text-purple-600"></i>
                    Purchase Items ({{selectedRequest.Items.length}})
                </h3>
                
                <div class="overflow-x-auto">
                    <table class="w-full">
                        <thead class="bg-white/60 rounded-xl">
                            <tr>
                                <th class="text-left p-3 font-semibold text-slate-700">Product</th>
                                <th class="text-center p-3 font-semibold text-slate-700">Quantity</th>
                                <th class="text-right p-3 font-semibold text-slate-700">Unit Price</th>
                                <th class="text-right p-3 font-semibold text-slate-700">Total</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="item in selectedRequest.Items" class="border-b border-white/50">
                                <td class="p-3">
                                    <div class="flex items-center gap-3">
                                        <div class="w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-500 rounded-lg flex items-center justify-center text-white font-bold">
                                            {{item.ProductName.charAt(0)}}
                                        </div>
                                        <div>
                                            <div class="font-semibold text-slate-800">{{item.ProductName}}</div>
                                            <div class="text-sm text-slate-600">{{item.CategoryName}}</div>
                                        </div>
                                    </div>
                                </td>
                                <td class="p-3 text-center font-semibold">{{item.Quantity}}</td>
                                <td class="p-3 text-right">KSh {{item.UnitPrice | number:0}}</td>
                                <td class="p-3 text-right font-bold text-green-600">KSh {{item.TotalPrice | number:0}}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Modal Footer -->
        <div class="bg-slate-50 p-6 rounded-b-3xl flex justify-between items-center">
            <div class="text-lg">
                <span class="text-slate-600">Grand Total: </span>
                <span class="font-bold text-green-600 text-2xl">KSh {{selectedRequest.TotalAmount | number:0}}</span>
            </div>
            <div class="flex gap-3">
                <button ng-click="closeModal()" 
                    class="px-6 py-2 bg-slate-200 text-slate-700 rounded-xl font-semibold hover:bg-slate-300 transition-all duration-300">
                    Close
                </button>
                <button ng-if="canUpdateStatus(selectedRequest.Status)" 
                    ng-click="updateRequestStatus(selectedRequest.PurchaseRequestId, getNextStatus(selectedRequest.Status))"
                    class="px-6 py-2 bg-gradient-to-r from-indigo-500 to-purple-500 text-white rounded-xl font-semibold hover:from-indigo-600 hover:to-purple-600 transition-all duration-300">
                    <i class="fas fa-arrow-right mr-2"></i>
                    Update to {{getNextStatus(selectedRequest.Status)}}
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize Angular App
        angular.module('purchaseRequestsApp', [])
        .controller('PurchaseRequestsController', ['$scope', '$http', '$timeout', function($scope, $http, $timeout) {
            
            // Initialize data
            $scope.allRequests = @Html.Raw(Json.Serialize(Model));
            $scope.displayedRequests = [];
            $scope.selectedRequests = [];
            $scope.selectedRequest = null;
            $scope.loading = false;
            $scope.currentView = 'processing';
            $scope.currentPage = 1;
            $scope.itemsPerPage = 12;
            $scope.totalPages = 1;
            
            // Filters
            $scope.searchTerm = '';
            $scope.filters = {
                status: '',
                sortBy: 'date',
                dateFrom: '',
                dateTo: ''
            };
            
            // Views configuration
            $scope.views = [
                { key: 'processing', label: 'Processing Orders', icon: 'fas fa-cog', count: 0 },
                { key: 'shipped', label: 'Shipped Orders', icon: 'fas fa-shipping-fast', count: 0 },
                { key: 'delivered', label: 'Delivered Orders', icon: 'fas fa-truck', count: 0 },
                { key: 'completed', label: 'Completed Orders', icon: 'fas fa-star', count: 0 }
            ];
            
            // Statistics
            $scope.stats = {
                total: 0,
                pending: 0,
                processing: 0,
                delivered: 0,
                totalValue: 0
            };
            
            // Initialize
            $scope.init = function() {
                $scope.calculateStats();
                $scope.updateViewCounts();
                $scope.filterRequests();
            };
            
            // Calculate statistics
            $scope.calculateStats = function() {
                $scope.stats.total = $scope.allRequests.length;
                $scope.stats.pending = $scope.allRequests.filter(r => r.Status === 'Pending').length;
                $scope.stats.processing = $scope.allRequests.filter(r => r.Status === 'Processing').length;
                $scope.stats.delivered = $scope.allRequests.filter(r => r.Status === 'Delivered').length;
                $scope.stats.totalValue = $scope.allRequests.reduce((sum, r) => sum + r.TotalAmount, 0);
            };
            
            // Update view counts
            $scope.updateViewCounts = function() {
                $scope.views.forEach(view => {
                    switch(view.key) {
                        case 'processing':
                            view.count = $scope.allRequests.filter(r => ['Pending', 'Processing'].includes(r.Status)).length;
                            break;
                        case 'shipped':
                            view.count = $scope.allRequests.filter(r => r.Status === 'Shipped').length;
                            break;
                        case 'delivered':
                            view.count = $scope.allRequests.filter(r => r.Status === 'Delivered').length;
                            break;
                        case 'completed':
                            view.count = $scope.allRequests.filter(r => r.Status === 'Completed').length;
                            break;
                    }
                });
            };
            
            // Set current view
            $scope.setCurrentView = function(view) {
                $scope.currentView = view;
                $scope.currentPage = 1;
                $scope.filterRequests();
            };
            
            // Filter requests
            $scope.filterRequests = function() {
                let filtered = $scope.allRequests.filter(request => {
                    // Search filter
                    if ($scope.searchTerm) {
                        const searchLower = $scope.searchTerm.toLowerCase();
                        if (!request.RequestNumber.toLowerCase().includes(searchLower) &&
                            !request.CustomerName.toLowerCase().includes(searchLower) &&
                            !(request.DeliveryAddress && request.DeliveryAddress.toLowerCase().includes(searchLower))) {
                            return false;
                        }
                    }
                    
                    // View filter
                    switch($scope.currentView) {
                        case 'processing':
                            if (!['Pending', 'Processing'].includes(request.Status)) return false;
                            break;
                        case 'shipped':
                            if (request.Status !== 'Shipped') return false;
                            break;
                        case 'delivered':
                            if (request.Status !== 'Delivered') return false;
                            break;
                        case 'completed':
                            if (request.Status !== 'Completed') return false;
                            break;
                    }
                    
                    // Status filter
                    if ($scope.filters.status && request.Status !== $scope.filters.status) {
                        return false;
                    }
                    
                    // Date filters
                    if ($scope.filters.dateFrom || $scope.filters.dateTo) {
                        const requestDate = new Date(request.RequestDate);
                        if ($scope.filters.dateFrom && requestDate < new Date($scope.filters.dateFrom)) return false;
                        if ($scope.filters.dateTo && requestDate > new Date($scope.filters.dateTo + 'T23:59:59')) return false;
                    }
                    
                    return true;
                });
                
                // Sort
                switch($scope.filters.sortBy) {
                    case 'date':
                        filtered.sort((a, b) => new Date(b.RequestDate) - new Date(a.RequestDate));
                        break;
                    case 'amount':
                        filtered.sort((a, b) => b.TotalAmount - a.TotalAmount);
                        break;
                    case 'customer':
                        filtered.sort((a, b) => a.CustomerName.localeCompare(b.CustomerName));
                        break;
                    case 'status':
                        filtered.sort((a, b) => a.Status.localeCompare(b.Status));
                        break;
                }
                
                // Pagination
                $scope.totalPages = Math.ceil(filtered.length / $scope.itemsPerPage);
                const startIndex = ($scope.currentPage - 1) * $scope.itemsPerPage;
                $scope.displayedRequests = filtered.slice(startIndex, startIndex + $scope.itemsPerPage);
                
                // Auto-pagination for dynamic height
                $timeout(() => {
                    $scope.adjustPagination();
                }, 100);
            };
            
            // Adjust pagination based on container height
            $scope.adjustPagination = function() {
                const container = document.getElementById('cardsContainer');
                if (container && container.scrollHeight > container.clientHeight) {
                    // Reduce items per page if scrolling is needed
                    const visibleHeight = container.clientHeight;
                    const cardHeight = 400; // Approximate card height
                    const cardsPerRow = Math.floor(container.clientWidth / 420); // Card width + gap
                    const visibleRows = Math.floor(visibleHeight / (cardHeight + 24)); // Card height + gap
                    $scope.itemsPerPage = Math.max(6, cardsPerRow * visibleRows);
                    $scope.filterRequests();
                }
            };
            
            // Get pagination array
            $scope.getPaginationArray = function() {
                return Array.from({length: $scope.totalPages}, (_, i) => i + 1);
            };
            
            // Go to page
            $scope.goToPage = function(page) {
                $scope.currentPage = page;
                $scope.filterRequests();
            };
            
            // Get initials
            $scope.getInitials = function(name) {
                return name ? name.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2) : 'NA';
            };
            
            // Format date
            $scope.formatDate = function(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-US', { 
                    year: 'numeric', 
                    month: 'short', 
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            };
            
            // Update selection
            $scope.updateSelection = function() {
                $scope.selectedRequests = $scope.displayedRequests.filter(r => r.selected);
            };
            
            // Clear selection
            $scope.clearSelection = function() {
                $scope.displayedRequests.forEach(r => r.selected = false);
                $scope.selectedRequests = [];
            };
            
            // View request
            $scope.viewRequest = function(request) {
                $scope.selectedRequest = request;
                // Mock items data - replace with actual API call
                $scope.selectedRequest.Items = [
                    { ProductName: 'Sample Product 1', CategoryName: 'Electronics', Quantity: 2, UnitPrice: 5000, TotalPrice: 10000 },
                    { ProductName: 'Sample Product 2', CategoryName: 'Accessories', Quantity: 1, UnitPrice: 2500, TotalPrice: 2500 }
                ];
            };
            
            // Close modal
            $scope.closeModal = function(event) {
                if (!event || event.target === event.currentTarget) {
                    $scope.selectedRequest = null;
                }
            };
            
            // Can update status
            $scope.canUpdateStatus = function(status) {
                return ['Processing', 'Shipped', 'Delivered'].includes(status);
            };
            
            // Get next status
            $scope.getNextStatus = function(currentStatus) {
                const statusMap = {
                    'Processing': 'Shipped',
                    'Shipped': 'Delivered',
                    'Delivered': 'Completed'
                };
                return statusMap[currentStatus] || currentStatus;
            };
            
            // Update request status
            $scope.updateRequestStatus = function(requestId, newStatus) {
                if (!confirm(`Are you sure you want to change the status to ${newStatus}?`)) {
                    return;
                }
                
                $scope.loading = true;
                
                $http.post('/Admin/UpdateRequestStatus', {
                    requestId: requestId,
                    newStatus: newStatus
                }).then(function(response) {
                    if (response.data.success) {
                        // Update local data
                        const request = $scope.allRequests.find(r => r.PurchaseRequestId === requestId);
                        if (request) {
                            request.Status = newStatus;
                        }
                        
                        $scope.calculateStats();
                        $scope.updateViewCounts();
                        $scope.filterRequests();
                        
                        showToast(response.data.message || 'Status updated successfully', 'success');
                        
                        if ($scope.selectedRequest && $scope.selectedRequest.PurchaseRequestId === requestId) {
                            $scope.selectedRequest.Status = newStatus;
                        }
                    } else {
                        showToast(response.data.message || 'Failed to update status', 'error');
                    }
                }).catch(function(error) {
                    console.error('Error updating status:', error);
                    showToast('Error updating status. Please try again.', 'error');
                }).finally(function() {
                    $scope.loading = false;
                });
            };
            
            // Bulk update status
            $scope.bulkUpdateStatus = function(newStatus) {
                if ($scope.selectedRequests.length === 0) return;
                
                if (!confirm(`Are you sure you want to change the status of ${$scope.selectedRequests.length} request(s) to ${newStatus}?`)) {
                    return;
                }
                
                $scope.loading = true;
                
                const requestIds = $scope.selectedRequests.map(r => r.PurchaseRequestId);
                
                $http.post('/Admin/BulkUpdateRequestStatus', {
                    requestIds: requestIds,
                    newStatus: newStatus
                }).then(function(response) {
                    if (response.data.success) {
                        // Update local data
                        $scope.selectedRequests.forEach(request => {
                            request.Status = newStatus;
                            request.selected = false;
                        });
                        
                        $scope.selectedRequests = [];
                        $scope.calculateStats();
                        $scope.updateViewCounts();
                        $scope.filterRequests();
                        
                        showToast(response.data.message || 'Status updated successfully for all selected requests', 'success');
                    } else {
                        showToast(response.data.message || 'Failed to update status', 'error');
                    }
                }).catch(function(error) {
                    console.error('Error updating status:', error);
                    showToast('Error updating status. Please try again.', 'error');
                }).finally(function() {
                    $scope.loading = false;
                });
            };
            
            // Refresh data
            $scope.refreshData = function() {
                location.reload();
            };
            
            // Export requests
            $scope.exportRequests = function() {
                const exportData = $scope.displayedRequests.map(request => ({
                    'Request Number': request.RequestNumber,
                    'Customer': request.CustomerName,
                    'Status': request.Status,
                    'Payment Status': request.PaymentStatus,
                    'Total Amount': request.TotalAmount,
                    'Request Date': $scope.formatDate(request.RequestDate),
                    'Delivery Address': request.DeliveryAddress || ''
                }));

                const csv = $scope.convertToCSV(exportData);
                $scope.downloadCSV(csv, `purchase-requests-${new Date().toISOString().split('T')[0]}.csv`);
                showToast('Purchase requests exported successfully', 'success');
            };
            
            // Convert to CSV
            $scope.convertToCSV = function(data) {
                const headers = Object.keys(data[0]);
                const csvContent = [
                    headers.join(','),
                    ...data.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
                ].join('\n');
                return csvContent;
            };
            
            // Download CSV
            $scope.downloadCSV = function(csv, filename) {
                const blob = new Blob([csv], { type: 'text/csv' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.setAttribute('hidden', '');
                a.setAttribute('href', url);
                a.setAttribute('download', filename);
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
            };
            
            // Initialize the controller
            $scope.init();
            
            // Handle window resize for responsive pagination
            angular.element(window).on('resize', function() {
                $timeout(() => {
                    $scope.adjustPagination();
                }, 200);
            });
        }]);
        
        // Key bindings
        document.addEventListener('keydown', function(e) {
            const scope = angular.element(document.body).scope();
            if (e.key === 'Escape' && scope.selectedRequest) {
                scope.$apply(() => {
                    scope.closeModal();
                });
            }
        });
    </script>
}