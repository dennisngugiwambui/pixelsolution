@model List<PixelSolution.ViewModels.PurchaseRequestViewModel>
@{
    ViewData["Title"] = "Purchase Requests Management - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        /* Enhanced Professional Styling */
        .purchase-requests-container {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 2rem 0;
        }

        .content-wrapper {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        /* Clean Header without stats */
        .page-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            text-align: center;
        }

        .page-title {
            font-size: 2.5rem;
            font-weight: 800;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin: 0 0 0.5rem 0;
        }

        .page-subtitle {
            color: #64748b;
            font-size: 1.1rem;
            font-weight: 500;
            margin: 0;
        }

        /* Professional View Toggles */
        .view-toggles {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            justify-content: center;
            flex-wrap: wrap;
            padding: 0 1rem;
        }

        .view-toggle-btn {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255, 255, 255, 0.3);
            color: #667eea;
            padding: 1rem 2rem;
            border-radius: 15px;
            font-weight: 700;
            font-size: 0.95rem;
            cursor: pointer;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            display: flex;
            align-items: center;
            gap: 0.75rem;
            min-width: 150px;
            justify-content: center;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .view-toggle-btn:hover {
                transform: translateY(-3px);
                background: rgba(255, 255, 255, 1);
                border-color: #667eea;
                box-shadow: 0 10px 25px rgba(102, 126, 234, 0.2);
            }

            .view-toggle-btn.active {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                border-color: #667eea;
                box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
                transform: translateY(-2px);
            }

            .view-toggle-btn i {
                font-size: 1.1rem;
            }

        /* Mobile responsive toggles */
        @@media (max-width: 768px) {
            .view-toggles {
                gap: 0.75rem;
                padding: 0 0.5rem;
            }

            .view-toggle-btn {
                padding: 0.875rem 1.5rem;
                font-size: 0.875rem;
                min-width: 120px;
                flex: 1;
                max-width: calc(50% - 0.375rem);
            }
        }

        @@media (max-width: 480px) {
            .view-toggle-btn {
                flex: 1;
                max-width: 100%;
                font-size: 0.8rem;
                padding: 0.75rem 1rem;
            }
        }

        /* Controls Section */
        .controls-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .filters-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 1rem;
            align-items: end;
        }

        @@media (max-width: 768px) {
            .filters-row {
                grid-template-columns: 1fr;
                gap: 0.75rem;
            }
        }

        .filter-group select,
        .filter-group input {
            width: 100%;
            padding: 0.875rem;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            font-size: 0.9rem;
            background: white;
            transition: all 0.3s ease;
        }

            .filter-group select:focus,
            .filter-group input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .action-buttons {
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        @@media (max-width: 768px) {
            .action-buttons {
                flex-direction: column;
                gap: 0.75rem;
            }
        }

        .btn {
            padding: 0.875rem 1.75rem;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            text-decoration: none;
            font-size: 0.9rem;
        }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280, #4b5563);
            color: white;
        }

        .btn-sm {
            padding: 0.625rem 1.25rem;
            font-size: 0.8rem;
        }

        /* Bulk Actions */
        .bulk-actions {
            display: none;
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 15px;
            margin-bottom: 1.5rem;
            align-items: center;
            gap: 1rem;
            box-shadow: 0 8px 25px rgba(16, 185, 129, 0.3);
        }

            .bulk-actions.show {
                display: flex;
                flex-wrap: wrap;
            }

        .bulk-actions-left {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .bulk-actions-right {
            margin-left: auto;
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        @@media (max-width: 768px) {
            .bulk-actions {
                flex-direction: column;
                gap: 1rem;
                text-align: center;
            }

            .bulk-actions-right {
                margin-left: 0;
                justify-content: center;
                width: 100%;
            }
        }

        /* Professional Purchase Request Cards */
        .requests-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        @@media (max-width: 1200px) {
            .requests-grid {
                grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
                gap: 1.5rem;
            }
        }

        @@media (max-width: 768px) {
            .requests-grid {
                grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
                gap: 1rem;
            }
        }

        @@media (max-width: 480px) {
            .requests-grid {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }

        .request-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            border-left: 4px solid #667eea;
            position: relative;
            overflow: hidden;
        }

            .request-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 3px;
                background: linear-gradient(90deg, #667eea, #764ba2);
                opacity: 0;
                transition: opacity 0.3s ease;
            }

            .request-card:hover {
                transform: translateY(-8px);
                box-shadow: 0 15px 40px rgba(0, 0, 0, 0.15);
            }

                .request-card:hover::before {
                    opacity: 1;
                }

            .request-card.processing {
                border-left-color: #f59e0b;
            }

            .request-card.shipped {
                border-left-color: #8b5cf6;
            }

            .request-card.delivered {
                border-left-color: #06b6d4;
            }

            .request-card.completed {
                border-left-color: #10b981;
            }

            .request-card.cancelled {
                border-left-color: #ef4444;
                opacity: 0.8;
            }

        /* Card Header */
        .card-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1.25rem;
        }

        .request-info h3 {
            font-size: 1.25rem;
            font-weight: 800;
            color: #1e293b;
            margin: 0 0 0.25rem 0;
        }

        .request-id {
            font-size: 0.875rem;
            color: #64748b;
            font-weight: 600;
        }

        .status-badge {
            padding: 0.375rem 0.875rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-pending {
            background: #fef3c7;
            color: #92400e;
        }

        .status-processing {
            background: #fbbf24;
            color: #ffffff;
        }

        .status-shipped {
            background: #e0e7ff;
            color: #3730a3;
        }

        .status-delivered {
            background: #dcfce7;
            color: #166534;
        }

        .status-completed {
            background: #dcfce7;
            color: #166534;
        }

        .status-cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        /* Customer Section */
        .customer-section {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
            border-radius: 12px;
            padding: 1rem;
            margin-bottom: 1.25rem;
        }

        .customer-info {
            display: flex;
            align-items: center;
            gap: 0.875rem;
        }

        .customer-avatar {
            width: 48px;
            height: 48px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 800;
            font-size: 1.1rem;
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
        }

        .customer-details h4 {
            font-size: 1rem;
            font-weight: 700;
            color: #1e293b;
            margin: 0 0 0.25rem 0;
        }

        .customer-details p {
            font-size: 0.875rem;
            color: #64748b;
            margin: 0;
        }

        /* Amount Display */
        .amount-display {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1rem;
            border-radius: 12px;
            text-align: center;
            margin-bottom: 1.25rem;
            box-shadow: 0 4px 15px rgba(16, 185, 129, 0.2);
        }

        .amount-label {
            font-size: 0.875rem;
            opacity: 0.9;
            margin-bottom: 0.25rem;
        }

        .amount-value {
            font-size: 1.75rem;
            font-weight: 800;
            margin: 0;
        }

        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.75rem;
            margin-bottom: 1.25rem;
        }

        .stat-card {
            background: #f8fafc;
            border-radius: 10px;
            padding: 0.875rem;
            text-align: center;
            border: 1px solid #e2e8f0;
        }

        .stat-value {
            font-size: 1.125rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            font-size: 0.75rem;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Delivery Address */
        .delivery-address {
            background: #f0f9ff;
            border: 1px solid #e0f2fe;
            border-radius: 10px;
            padding: 0.875rem;
            margin-bottom: 1.25rem;
            font-size: 0.875rem;
            display: flex;
            align-items: flex-start;
            gap: 0.5rem;
        }

            .delivery-address i {
                color: #06b6d4;
                margin-top: 0.125rem;
            }

        /* Action Buttons */
        .card-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .action-btn {
            flex: 1;
            min-width: 80px;
            padding: 0.625rem 1rem;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            font-size: 0.8rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.375rem;
        }

            .action-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15);
            }

        .action-btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .action-btn-success {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .action-btn-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .action-btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
        }

        .action-btn-info {
            background: linear-gradient(135deg, #06b6d4, #0891b2);
            color: white;
        }

        /* Checkbox */
        .checkbox-container {
            position: absolute;
            top: 1rem;
            right: 1rem;
        }

            .checkbox-container input[type="checkbox"] {
                width: 18px;
                height: 18px;
                accent-color: #667eea;
                cursor: pointer;
            }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(8px);
        }

        .modal-content {
            background: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 20px;
            width: 90%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);
        }

        .modal-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 1.5rem;
            border-radius: 20px 20px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            background: rgba(255, 255, 255, 0.9);
            border-radius: 20px;
            backdrop-filter: blur(10px);
        }

            .empty-state i {
                font-size: 4rem;
                color: #667eea;
                opacity: 0.3;
                margin-bottom: 1rem;
            }

            .empty-state h3 {
                color: #1e293b;
                margin: 0 0 0.5rem 0;
                font-size: 1.5rem;
                font-weight: 700;
            }

            .empty-state p {
                color: #64748b;
                margin: 0;
            }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link active">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("CartManagement", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-basket"></i>
                    Cart Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("WishlistManagement", "Admin")" class="nav-link">
                    <i class="fas fa-heart"></i>
                    Wishlist Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search requests..." id="searchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Page Content -->
    <div class="dashboard-content">
        <!-- Clean Header -->
        <div class="page-header">
            <h1 class="page-title">Purchase Requests Management</h1>
            <p class="page-subtitle">Manage and track all customer purchase requests</p>
        </div>

        <!-- Professional View Toggles -->
        <div class="view-toggles">
            <button class="view-toggle-btn active" id="processingToggle" onclick="switchView('processing')">
                <i class="fas fa-clock"></i>
                <span>Processing</span>
            </button>
            <button class="view-toggle-btn" id="shippedToggle" onclick="switchView('shipped')">
                <i class="fas fa-shipping-fast"></i>
                <span>Shipped</span>
            </button>
            <button class="view-toggle-btn" id="deliveredToggle" onclick="switchView('delivered')">
                <i class="fas fa-truck"></i>
                <span>Delivered</span>
            </button>
            <button class="view-toggle-btn" id="completedToggle" onclick="switchView('completed')">
                <i class="fas fa-star"></i>
                <span>Completed</span>
            </button>
        </div>

        <!-- Controls Section -->
        <div class="controls-section">
            <div class="filters-row">
                <div class="filter-group">
                    <select id="statusFilter">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Completed">Completed</option>
                        <option value="Cancelled">Cancelled</option>
                    </select>
                </div>
                <div class="filter-group">
                    <select id="paymentFilter">
                        <option value="">All Payments</option>
                        <option value="Pending">Pending</option>
                        <option value="Processing">Processing</option>
                        <option value="Paid">Paid</option>
                    </select>
                </div>
                <div class="filter-group">
                    <select id="sortBy">
                        <option value="date">Sort by Date</option>
                        <option value="amount">Sort by Amount</option>
                        <option value="customer">Sort by Customer</option>
                        <option value="status">Sort by Status</option>
                    </select>
                </div>
                <div class="filter-group">
                    <input type="date" id="dateFrom">
                </div>
                <div class="filter-group">
                    <input type="date" id="dateTo">
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn btn-secondary btn-sm" onclick="exportRequests()">
                    <i class="fas fa-download"></i>
                    Export
                </button>
                <button class="btn btn-primary btn-sm" onclick="refreshData()">
                    <i class="fas fa-sync-alt"></i>
                    Refresh
                </button>
            </div>

            <!-- Bulk Actions -->
            <div id="bulkActions" class="bulk-actions">
                <div class="bulk-actions-left">
                    <i class="fas fa-check-circle"></i>
                    <span id="selectedCount">0</span> request(s) selected
                </div>
                <div class="bulk-actions-right">
                    <button class="btn btn-warning btn-sm" onclick="bulkUpdateStatus('Processing')">
                        <i class="fas fa-cog"></i> Processing
                    </button>
                    <button class="btn btn-info btn-sm" onclick="bulkUpdateStatus('Shipped')">
                        <i class="fas fa-shipping-fast"></i> Shipped
                    </button>
                    <button class="btn btn-success btn-sm" onclick="bulkUpdateStatus('Delivered')">
                        <i class="fas fa-truck"></i> Delivered
                    </button>
                    <button class="btn btn-secondary btn-sm" onclick="clearSelection()">
                        <i class="fas fa-times"></i> Clear
                    </button>
                </div>
            </div>
        </div>

        <!-- Purchase Requests Grid -->
        <div id="requestsGrid" class="requests-grid">
            @foreach (var request in Model)
            {
                <div class="request-card @request.Status.ToLower()" data-request-id="@request.PurchaseRequestId" data-status="@request.Status.ToLower()">
                    <!-- Selection Checkbox -->
                    <div class="checkbox-container">
                        <input type="checkbox" class="request-checkbox" value="@request.PurchaseRequestId" onchange="updateSelection()">
                    </div>

                    <!-- Card Header -->
                    <div class="card-header">
                        <div class="request-info">
                            <h3>@request.RequestNumber</h3>
                            <div class="request-id">ID: #@request.PurchaseRequestId</div>
                        </div>
                        <div class="status-badge status-@request.Status.ToLower()">
                            @request.Status
                        </div>
                    </div>

                    <!-- Customer Section -->
                    <div class="customer-section">
                        <div class="customer-info">
                            <div class="customer-avatar">
                                @request.CustomerName.Substring(0, 2).ToUpper()
                            </div>
                            <div class="customer-details">
                                <h4>@request.CustomerName</h4>
                                <p>@request.CustomerEmail</p>
                            </div>
                        </div>
                    </div>

                    <!-- Amount Display -->
                    <div class="amount-display">
                        <div class="amount-label">Total Amount</div>
                        <div class="amount-value">KSh @request.TotalAmount.ToString("N0")</div>
                    </div>

                    <!-- Stats Grid -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value">@request.TotalItems</div>
                            <div class="stat-label">Items</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">@request.PaymentStatus</div>
                            <div class="stat-label">Payment</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">@(request.DeliveryDate?.ToString("MMM dd") ?? "Pending")</div>
                            <div class="stat-label">Delivery</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value">@request.DaysAgo</div>
                            <div class="stat-label">Days Ago</div>
                        </div>
                    </div>

                    <!-- Delivery Address -->
                    @if (!string.IsNullOrEmpty(request.DeliveryAddress))
                    {
                        <div class="delivery-address">
                            <i class="fas fa-map-marker-alt"></i>
                            <div>@request.DeliveryAddress</div>
                        </div>
                    }

                    <!-- Action Buttons -->
                    <div class="card-actions">
                        <button class="action-btn action-btn-primary" onclick="viewPurchaseRequest(@request.PurchaseRequestId)">
                            <i class="fas fa-eye"></i>
                            View
                        </button>

                        @if (User.IsInRole("Admin"))
                        {
                            @if (request.Status == "Pending")
                            {
                                <button class="action-btn action-btn-warning" onclick="updateRequestStatus(@request.PurchaseRequestId, 'Processing')">
                                    <i class="fas fa-play"></i>
                                </button>
                            }
                            @if (request.Status == "Processing")
                            {
                                <button class="action-btn action-btn-info" onclick="updateRequestStatus(@request.PurchaseRequestId, 'Shipped')">
                                    <i class="fas fa-shipping-fast"></i>
                                </button>
                            }
                            @if (request.Status == "Shipped")
                            {
                                <button class="action-btn action-btn-success" onclick="updateRequestStatus(@request.PurchaseRequestId, 'Delivered')">
                                    <i class="fas fa-truck"></i>
                                </button>
                            }
                            @if (request.Status == "Delivered")
                            {
                                <button class="action-btn action-btn-success" onclick="updateRequestStatus(@request.PurchaseRequestId, 'Completed')">
                                    <i class="fas fa-check"></i>
                                </button>
                            }
                            <button class="action-btn action-btn-danger" onclick="cancelRequest(@request.PurchaseRequestId)">
                                <i class="fas fa-times"></i>
                            </button>
                        }
                    </div>
                </div>
            }
        </div>

        <!-- Empty State -->
        @if (!Model.Any())
        {
            <div class="empty-state">
                <i class="fas fa-file-invoice"></i>
                <h3>No Purchase Requests Found</h3>
                <p>No purchase requests have been submitted yet.</p>
            </div>
        }
    </div>
</div>

<!-- Modal -->
<div id="purchaseRequestModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">Purchase Request Details</h2>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closePurchaseRequestModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body" id="modalContent">
            <!-- Content loaded dynamically -->
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        let allRequests = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
        let currentView = 'processing';
        let selectedRequests = [];

        document.addEventListener('DOMContentLoaded', function() {
            setupFilters();
            setupSearch();
            initializeView();
        });

        function setupFilters() {
            const filters = ['statusFilter', 'paymentFilter', 'sortBy', 'dateFrom', 'dateTo'];
            filters.forEach(filterId => {
                const element = document.getElementById(filterId);
                if (element) {
                    element.addEventListener('change', filterRequests);
                }
            });
        }

        function setupSearch() {
            const searchInput = document.getElementById('searchInput');
            if (searchInput) {
                searchInput.addEventListener('input', filterRequests);
            }
        }

        function initializeView() {
            switchView('processing');
        }

        function switchView(view) {
            currentView = view;

            // Update toggle buttons
            document.querySelectorAll('.view-toggle-btn').forEach(btn => btn.classList.remove('active'));
            document.getElementById(view + 'Toggle').classList.add('active');

            filterRequests();
        }

        function filterRequests() {
            const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
            const statusFilter = document.getElementById('statusFilter')?.value || '';
            const paymentFilter = document.getElementById('paymentFilter')?.value || '';
            const dateFrom = document.getElementById('dateFrom')?.value || '';
            const dateTo = document.getElementById('dateTo')?.value || '';

            const cards = document.querySelectorAll('.request-card');

            cards.forEach(card => {
                const requestId = parseInt(card.dataset.requestId);
                const request = allRequests.find(r => r.PurchaseRequestId === requestId);

                if (!request) {
                    card.style.display = 'none';
                    return;
                }

                let shouldShow = true;

                // Search filter
                if (searchTerm) {
                    const matchesSearch = request.RequestNumber.toLowerCase().includes(searchTerm) ||
                        request.CustomerName.toLowerCase().includes(searchTerm) ||
                        (request.DeliveryAddress && request.DeliveryAddress.toLowerCase().includes(searchTerm));
                    if (!matchesSearch) shouldShow = false;
                }

                // View filter
                switch(currentView) {
                    case 'processing':
                        if (!['Pending', 'Processing'].includes(request.Status)) shouldShow = false;
                        break;
                    case 'shipped':
                        if (request.Status !== 'Shipped') shouldShow = false;
                        break;
                    case 'delivered':
                        if (request.Status !== 'Delivered') shouldShow = false;
                        break;
                    case 'completed':
                        if (request.Status !== 'Completed') shouldShow = false;
                        break;
                }

                // Additional filters
                if (statusFilter && request.Status !== statusFilter) shouldShow = false;
                if (paymentFilter && request.PaymentStatus !== paymentFilter) shouldShow = false;

                // Date filters
                if (dateFrom || dateTo) {
                    const requestDate = new Date(request.RequestDate);
                    if (dateFrom && requestDate < new Date(dateFrom)) shouldShow = false;
                    if (dateTo && requestDate > new Date(dateTo + 'T23:59:59')) shouldShow = false;
                }

                card.style.display = shouldShow ? 'block' : 'none';
            });
        }

        function updateSelection() {
            const checkboxes = document.querySelectorAll('.request-checkbox:checked');
            selectedRequests = Array.from(checkboxes).map(cb => parseInt(cb.value));

            const bulkActions = document.getElementById('bulkActions');
            const selectedCount = document.getElementById('selectedCount');

            if (selectedRequests.length > 0) {
                bulkActions.classList.add('show');
                selectedCount.textContent = selectedRequests.length;
            } else {
                bulkActions.classList.remove('show');
            }
        }

        function clearSelection() {
            document.querySelectorAll('.request-checkbox').forEach(cb => cb.checked = false);
            updateSelection();
        }

        async function updateRequestStatus(requestId, newStatus) {
            if (!confirm(`Are you sure you want to change the status to ${newStatus}?`)) {
                return;
            }

            try {
                const formData = new FormData();
                formData.append('requestId', requestId);
                formData.append('newStatus', newStatus);

                const response = await fetch('/Admin/UpdateRequestStatus', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message || 'Status updated successfully', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message || 'Failed to update status', 'error');
                }
            } catch (error) {
                console.error('Error updating status:', error);
                showToast('Error updating status', 'error');
            }
        }

        async function bulkUpdateStatus(newStatus) {
            if (selectedRequests.length === 0) return;

            if (!confirm(`Are you sure you want to change the status of ${selectedRequests.length} request(s) to ${newStatus}?`)) {
                return;
            }

            for (const requestId of selectedRequests) {
                await updateRequestStatus(requestId, newStatus);
            }

            clearSelection();
        }

        async function cancelRequest(requestId) {
            if (!confirm('Are you sure you want to cancel this request?')) {
                return;
            }
            updateRequestStatus(requestId, 'Cancelled');
        }

        async function viewPurchaseRequest(requestId) {
            try {
                const response = await fetch(`/Admin/GetPurchaseRequestDetails/${requestId}`);
                if (!response.ok) throw new Error('Failed to fetch request details');

                const result = await response.json();
                if (!result.success) {
                    showToast(result.message || 'Failed to load request details', 'error');
                    return;
                }

                const request = result.data;

                const modalContent = `
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem; margin-bottom: 2rem;">
                        <div>
                            <h4 style="margin-bottom: 1rem;">Request Information</h4>
                            <div style="background: #f8fafc; padding: 1rem; border-radius: 8px;">
                                <div><strong>Request Number:</strong> ${request.requestNumber}</div>
                                <div><strong>Status:</strong> ${request.status}</div>
                                <div><strong>Request Date:</strong> ${new Date(request.requestDate).toLocaleDateString()}</div>
                                <div><strong>Total Amount:</strong> KSh ${request.totalAmount.toLocaleString()}</div>
                            </div>
                        </div>
                        <div>
                            <h4 style="margin-bottom: 1rem;">Customer Information</h4>
                            <div style="background: #f8fafc; padding: 1rem; border-radius: 8px;">
                                <div><strong>Name:</strong> ${request.customerName}</div>
                                <div><strong>Email:</strong> ${request.customerEmail}</div>
                                <div><strong>Payment:</strong> ${request.paymentStatus}</div>
                            </div>
                        </div>
                    </div>
                    <div style="text-align: center;">
                        <button class="btn btn-secondary" onclick="closePurchaseRequestModal()">Close</button>
                    </div>
                `;

                document.getElementById('modalTitle').textContent = `Purchase Request ${request.requestNumber}`;
                document.getElementById('modalContent').innerHTML = modalContent;
                document.getElementById('purchaseRequestModal').style.display = 'block';
            } catch (error) {
                console.error('Error loading request details:', error);
                showToast('Error loading request details', 'error');
            }
        }

        function closePurchaseRequestModal() {
            document.getElementById('purchaseRequestModal').style.display = 'none';
        }

        function exportRequests() {
            showToast('Export functionality coming soon!', 'info');
        }

        function refreshData() {
            location.reload();
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('purchaseRequestModal');
            if (event.target === modal) {
                closePurchaseRequestModal();
            }
        }
    </script>
}