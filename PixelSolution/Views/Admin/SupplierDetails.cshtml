@model PixelSolution.ViewModels.SupplierDetailsViewModel
@{
    ViewData["Title"] = "Supplier Details - " + Model.CompanyName;
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .supplier-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }

        @@media (max-width: 768px) {
            .supplier-header {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
        }

        .supplier-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 1rem;
        }

        @@media (max-width: 768px) {
            .supplier-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }

        /* Responsive Design */
       @@media (max-width: 768px) {
            .supplier-header {
                padding: 1rem;
            }
            
            .supplier-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .date-filter {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .tabs-nav {
                flex-direction: column;
            }
            
            .tab-btn {
                text-align: center;
            }
            
            .modal-content {
                width: 95%;
                margin: 2% auto;
            }
            
            .items-table {
                font-size: 0.875rem;
            }
            
            .items-table th,
            .items-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.75rem;
            }
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        @@media (max-width: 768px) {
            .section-header {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
            
            .section-header h3 {
                margin: 0;
                text-align: center;
            }
        }

        @@media (max-width: 480px) {
            .supplier-header h1 {
                font-size: 1.5rem !important;
            }
            
            .info-card {
                padding: 1rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
            
            .btn {
                padding: 0.375rem 0.75rem;
                font-size: 0.875rem;
            }
            
            .product-card {
                padding: 1rem !important;
            }
            
            .product-actions {
                flex-direction: column !important;
                gap: 0.5rem !important;
            }
        }

        /* Product Cards Styling */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        @@media (max-width: 768px) {
            .products-grid {
                grid-template-columns: 1fr;
            }
        }

        .product-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .product-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

        .product-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .product-info h5 {
            margin: 0 0 0.5rem 0;
            color: #1f2937;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .product-meta {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .product-delivery-form {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
        }

        @@media (max-width: 480px) {
            .form-row {
                grid-template-columns: 1fr;
            }
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-size: 0.75rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.25rem;
        }

        .form-group input {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.875rem;
        }

        .product-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        @@media (max-width: 480px) {
            .product-actions {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .btn-confirm,
            .btn-reject {
                width: 100%;
                text-align: center;
            }
        }

        .btn-confirm {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-confirm:hover {
            background: #059669;
        }

        .btn-reject {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-reject:hover {
            background: #dc2626;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .info-card {
            background: rgba(255,255,255,0.1);
            padding: 1.5rem;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }

        .tabs-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .tabs-nav {
            display: flex;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
            overflow-x: auto;
        }

        @@media (max-width: 768px) {
            .tabs-nav {
                flex-wrap: nowrap;
            }
        }

        .tab-btn {
            flex: 1;
            padding: 1rem 1.5rem;
            white-space: nowrap;
            min-width: fit-content;
            border: none;
            background: none;
            cursor: pointer;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: white;
            color: #10b981;
            border-bottom: 3px solid #10b981;
        }

        .tab-content {
            padding: 2rem;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .items-table th,
        .items-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .items-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-received { background: #dcfce7; color: #166534; }
        .status-invoiced { background: #fef3c7; color: #92400e; }
        .status-paid { background: #dbeafe; color: #1e40af; }
        .status-settled { background: #f3e8ff; color: #7c3aed; }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary { background: #10b981; color: white; }
        .btn-secondary { background: #6b7280; color: white; }
        .btn-warning { background: #f59e0b; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }

        .filters-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            align-items: end;
            flex-wrap: wrap;
        }

        @@media (max-width: 768px) {
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
        }

        .date-filter {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .form-control {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.875rem;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1.5rem;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }
        
        /* Enhanced badges and statistics */
        .badge {
            padding: 0.375rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .badge-warning {
            background: #fef3c7;
            color: #92400e;
            border: 1px solid #fbbf24;
        }
        
        .badge-info {
            background: #dbeafe;
            color: #1e40af;
            border: 1px solid #60a5fa;
        }
        
        .badge-success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #4ade80;
        }
        
        .badge-danger {
            background: #fee2e2;
            color: #dc2626;
            border: 1px solid #f87171;
        }
        
        /* Enhanced table styling */
        .text-success {
            color: #059669 !important;
        }
        
        .text-warning {
            color: #d97706 !important;
        }
        
        .text-info {
            color: #0ea5e9 !important;
        }
        
        .text-muted {
            color: #6b7280 !important;
        }
        
        /* Button enhancements */
        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        .btn-sm {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }
        
        /* Table row hover effects */
        .items-table tbody tr:hover {
            background-color: #f8fafc;
            transform: translateY(-1px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.2s ease;
        }
    </style>
}

<div class="main-content">
    <div class="dashboard-content">
        <!-- Supplier Header -->
        <div class="supplier-header">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap; gap: 1rem;">
                <div>
                    <h1 style="margin: 0 0 0.5rem 0; font-size: 2rem;">@Model.CompanyName</h1>
                    <p style="margin: 0; opacity: 0.9;">Contact: @Model.ContactPerson</p>
                </div>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                    <button class="btn btn-secondary" onclick="window.history.back()">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>
            </div>
            
            <div class="supplier-info">
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Contact Information</h3>
                    <p><i class="fas fa-envelope"></i> @Model.Email</p>
                    <p><i class="fas fa-phone"></i> @Model.Phone</p>
                    @if (!string.IsNullOrEmpty(Model.Address))
                    {
                        <p><i class="fas fa-map-marker-alt"></i> @Model.Address</p>
                    }
                </div>
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Statistics</h3>
                    <p>Total Items: <strong>@Model.TotalItems</strong></p>
                    <p>Total Value: <strong>KSh @Model.TotalValue.ToString("N2")</strong></p>
                    <p>Outstanding: <strong>KSh @Model.OutstandingAmount.ToString("N2")</strong></p>
                </div>
            </div>
        </div>

        <!-- Tabs Container -->
        <div class="tabs-container">
            <div class="tabs-nav">
                <button class="tab-btn active" onclick="showTab('items')">Supplied Items</button>
                <button class="tab-btn" onclick="showTab('invoices')">Invoices</button>
                <button class="tab-btn" onclick="showTab('payments')">Payments</button>
            </div>

            <!-- Products & Supplies Tab -->
            <div id="itemsTab" class="tab-content active">
                <div class="filters-bar">
                    <div class="date-filter">
                        <label>From:</label>
                        <input type="date" id="fromDate" class="form-control">
                    </div>
                    <div class="date-filter">
                        <label>To:</label>
                        <input type="date" id="toDate" class="form-control">
                    </div>
                    <select id="statusFilter" class="form-control">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Invoiced">Invoiced</option>
                        <option value="Paid">Paid</option>
                        <option value="Settled">Settled</option>
                    </select>
                    <button class="btn btn-secondary" onclick="filterSupplies()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </div>

                <!-- Products assigned to this supplier -->
                <div style="margin-bottom: 2rem;">
                    <h4>Products Assigned to Supplier</h4>
                    <div id="productsGrid" class="products-grid">
                        <!-- Products will be loaded here -->
                    </div>
                </div>

                <!-- Supply batches for all products -->
                <div>
                    <div class="section-header">
                        <div>
                            <h4>Supply History & Batches</h4>
                            <div id="suppliesStats" style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                                <span class="badge badge-warning" id="pendingCount">0 Pending</span>
                                <span class="badge badge-info" id="invoicedCount">0 Invoiced</span>
                                <span class="badge badge-success" id="paidCount">0 Paid</span>
                            </div>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn btn-info btn-sm" onclick="refreshSupplies()" id="refreshSuppliesBtn">
                                <i class="fas fa-sync-alt"></i> Refresh
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                    <table class="items-table" id="suppliesTable">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Batch</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                                <th>Supply Date</th>
                                <th>Payment Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="suppliesTableBody">
                            <!-- Supply batches will be loaded here -->
                        </tbody>
                    </table>
                </div>
                </div>
            </div>

            <!-- Invoices Tab -->
            <div id="invoicesTab" class="tab-content">
                <!-- Pending Supplies for Invoicing Section -->
                <div class="section-header">
                    <div>
                        <h3>Supplier Products & Supplies</h3>
                        <div id="pendingInvoiceStats" style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                            <span class="badge badge-warning" id="pendingInvoiceCount">0 Pending</span>
                            <span class="badge badge-success" id="selectedInvoiceCount">0 Selected</span>
                            <span class="badge badge-info" id="totalInvoiceAmount">KSh 0.00 Total</span>
                        </div>
                    </div>
                    <div style="display: flex; gap: 0.5rem;">
                        <button class="btn btn-secondary btn-sm" onclick="selectAllPendingForInvoice()" id="selectAllPendingBtn">
                            <i class="fas fa-check-square"></i> Select All
                        </button>
                        <button class="btn btn-primary btn-sm" onclick="generateInvoiceFromSelected()" id="generateInvoiceBtn">
                            <i class="fas fa-file-invoice"></i> Generate Invoice
                        </button>
                        <button class="btn btn-warning btn-sm" onclick="fixDatabaseSchema()" id="fixSchemaBtn" title="Create all missing supplier invoice tables">
                            <i class="fas fa-wrench"></i> Fix All Tables
                        </button>
                        <button class="btn btn-info btn-sm" onclick="checkUsersStatus()" id="checkUsersBtn" title="Check users in database">
                            <i class="fas fa-users"></i> Check Users
                        </button>
                        <button class="btn btn-danger btn-sm" onclick="cleanupDuplicateInvoices()" id="cleanupBtn" title="Remove duplicate invoices">
                            <i class="fas fa-trash-alt"></i> Clean Duplicates
                        </button>
                        <button class="btn btn-info btn-sm" onclick="refreshPendingSupplies()">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                    </div>
                </div>
                
                <!-- Filters and Search -->
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label for="statusFilter" class="form-label">Filter by Status:</label>
                        <select id="statusFilter" class="form-select" onchange="applyFilters()">
                            <option value="all">All Supplies</option>
                            <option value="pending" selected>Pending Only</option>
                            <option value="invoiced">Invoiced Only</option>
                            <option value="paid">Paid/Settled</option>
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label for="searchInput" class="form-label">Search Products:</label>
                        <input type="text" id="searchInput" class="form-control" placeholder="Search by product name, SKU, or batch..." onkeyup="applyFilters()">
                    </div>
                    <div class="col-md-4">
                        <label class="form-label">Quick Filters:</label>
                        <div class="btn-group d-block" role="group">
                            <button type="button" class="btn btn-outline-primary btn-sm" onclick="setFilter('pending')">
                                <i class="fas fa-clock"></i> Pending
                            </button>
                            <button type="button" class="btn btn-outline-success btn-sm" onclick="setFilter('invoiced')">
                                <i class="fas fa-file-invoice"></i> Invoiced
                            </button>
                            <button type="button" class="btn btn-outline-info btn-sm" onclick="setFilter('all')">
                                <i class="fas fa-list"></i> All
                            </button>
                        </div>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="items-table" id="pendingSuppliesTable">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAllPending" onchange="toggleSelectAllPending()"></th>
                                <th>Product</th>
                                <th>Batch</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                                <th>Supply Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="pendingSuppliesTableBody">
                            <tr>
                                <td colspan="8" style="text-align: center; padding: 2rem; color: #64748b;">
                                    <i class="fas fa-clock" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                                    <br>Loading pending supplies...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Existing Invoices Section -->
                <div class="section-header" style="margin-top: 3rem;">
                    <h3>Generated Invoices</h3>
                    <div style="display: flex; gap: 0.5rem;">
                        <button class="btn btn-info btn-sm" onclick="loadSupplierInvoices()">
                            <i class="fas fa-sync-alt"></i> Refresh Invoices
                        </button>
                    </div>
                </div>
                <div class="table-responsive">
                    <table class="items-table" id="invoicesTable">
                        <thead>
                            <tr>
                                <th>Invoice #</th>
                                <th>Date</th>
                                <th>Items</th>
                                <th>Subtotal</th>
                                <th>Tax</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="invoicesTableBody">
                            <tr>
                                <td colspan="8" style="text-align: center; padding: 2rem; color: #64748b;">
                                    <i class="fas fa-file-invoice" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                                    <br>Loading invoices...
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Payments Tab -->
            <div id="paymentsTab" class="tab-content">
                <div class="section-header">
                    <h4>Supplier Products & Supplies</h4>
                    <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('all')" id="allPaymentsBtn">
                            <i class="fas fa-list"></i> All
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('unpaid')" id="unpaidBtn">
                            <i class="fas fa-exclamation-circle"></i> Unpaid
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('paid')" id="paidBtn">
                            <i class="fas fa-check-circle"></i> Paid
                        </button>
                        <button class="btn btn-primary" onclick="openPaymentModal()">
                            <i class="fas fa-plus"></i> Record Payment
                        </button>
                    </div>
                </div>
                
                <!-- Unsettled Invoices Section -->
                <div id="unsettledInvoicesSection">
                    <div class="section-header">
                        <div>
                            <h4 style="color: #dc2626;">
                                <i class="fas fa-exclamation-triangle"></i> Unsettled Invoices
                            </h4>
                            <div style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                                <span class="badge badge-danger" id="overdueCount">0 Overdue</span>
                                <span class="badge badge-warning" id="dueCount">0 Due Soon</span>
                                <span class="badge badge-info" id="totalUnsettledAmount">KSh 0.00 Total</span>
                            </div>
                        </div>
                        <div style="display: flex; gap: 0.5rem;">
                            <button class="btn btn-secondary btn-sm" onclick="selectOverdueInvoices()" id="selectOverdueBtn">
                                <i class="fas fa-exclamation-circle"></i> Select Overdue
                            </button>
                            <button class="btn btn-success btn-sm" onclick="settleSelectedInvoices()" id="settleSelectedBtn">
                                <i class="fas fa-check-circle"></i> Settle Selected
                            </button>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="items-table" id="unsettledInvoicesTable">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" id="selectAllUnsettled" onchange="toggleSelectAllUnsettled()"></th>
                                    <th>Invoice #</th>
                                    <th>Date</th>
                                    <th>Products</th>
                                    <th>Amount</th>
                                    <th>Due Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="unsettledInvoicesTableBody">
                                <!-- Unsettled invoices will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Settled Payments Section -->
                <div id="settledPaymentsSection">
                    <div class="section-header">
                        <div>
                            <h4 style="color: #059669;">
                                <i class="fas fa-check-circle"></i> Settled Payments
                            </h4>
                            <div style="display: flex; gap: 1rem; margin-top: 0.5rem;">
                                <span class="badge badge-success" id="settledCount">0 Settled</span>
                                <span class="badge badge-info" id="totalSettledAmount">KSh 0.00 Total</span>
                            </div>
                        </div>
                    </div>
                    <div class="table-responsive">
                        <table class="items-table" id="settledPaymentsTable">
                            <thead>
                                <tr>
                                    <th>Invoice #</th>
                                    <th>Settlement Date</th>
                                    <th>Products Count</th>
                                    <th>Amount Paid</th>
                                    <th>Payment Method</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="settledPaymentsTableBody">
                                <!-- Settled payments will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Supply Batch Modal -->
<div id="addItemModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add Supply Batch</h2>
            <button onclick="closeAddItemModal()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
        </div>
        <div class="modal-body">
            <form id="addItemForm">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <label>Product *</label>
                        <select id="productId" class="form-control" required>
                            <option value="">Select Product</option>
                        </select>
                    </div>
                    <div>
                        <label>Quantity Supplied *</label>
                        <input type="number" id="quantitySupplied" class="form-control" required min="1">
                    </div>
                    <div>
                        <label>Unit Cost (KSh) *</label>
                        <input type="number" id="unitCost" class="form-control" required min="0" step="0.01">
                    </div>
                    <div>
                        <label>Batch Number</label>
                        <input type="text" id="batchNumber" class="form-control">
                    </div>
                    <div>
                        <label>Supply Date *</label>
                        <input type="date" id="supplyDate" class="form-control" required>
                    </div>
                    <div>
                        <label>Expiry Date</label>
                        <input type="date" id="expiryDate" class="form-control">
                    </div>
                </div>
                <div style="margin-top: 1rem;">
                    <label>Notes</label>
                    <textarea id="notes" class="form-control" rows="3"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeAddItemModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Supply Batch</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Supply Details Modal -->
<div id="supplyDetailsModal" class="modal">
    <div class="modal-content" style="max-width: 700px;">
        <div class="modal-header">
            <h2 id="supplyModalTitle">Supply Details</h2>
            <button onclick="closeSupplyDetailsModal()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
        </div>
        <div class="modal-body">
            <!-- Supply Summary -->
            <div style="background: #f8fafc; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                    <div>
                        <label style="font-weight: 600; color: #374151;">Product Name</label>
                        <p id="modalSupplyProductName" style="margin: 0.25rem 0 0 0; font-size: 1.1rem;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Batch Number</label>
                        <p id="modalSupplyBatchNumber" style="margin: 0.25rem 0 0 0;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Supply Date</label>
                        <p id="modalSupplyDate" style="margin: 0.25rem 0 0 0;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Payment Status</label>
                        <p id="modalSupplyStatus" style="margin: 0.25rem 0 0 0; font-weight: 600;">-</p>
                    </div>
                </div>
            </div>
            
            <!-- Supply Details -->
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1.5rem; margin-bottom: 2rem;">
                <div>
                    <label style="font-weight: 600; color: #374151;">Quantity Supplied</label>
                    <p id="modalSupplyQuantity" style="margin: 0.25rem 0 0 0; font-size: 1.2rem; color: #059669;">-</p>
                </div>
                <div>
                    <label style="font-weight: 600; color: #374151;">Unit Cost</label>
                    <p id="modalSupplyUnitCost" style="margin: 0.25rem 0 0 0; font-size: 1.2rem;">-</p>
                </div>
                <div>
                    <label style="font-weight: 600; color: #374151;">Total Cost</label>
                    <p id="modalSupplyTotalCost" style="margin: 0.25rem 0 0 0; font-size: 1.2rem; font-weight: 600; color: #059669;">-</p>
                </div>
                <div>
                    <label style="font-weight: 600; color: #374151;">Expiry Date</label>
                    <p id="modalSupplyExpiryDate" style="margin: 0.25rem 0 0 0;">-</p>
                </div>
            </div>
            
            <!-- Supply Notes -->
            <div>
                <label style="font-weight: 600; color: #374151;">Supply Notes</label>
                <div id="modalSupplyNotes" style="background: #f9fafb; padding: 1rem; border-radius: 6px; margin-top: 0.5rem; min-height: 60px;">
                    No additional notes
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Payment Details Modal -->
<div id="paymentDetailsModal" class="modal">
    <div class="modal-content" style="max-width: 900px;">
        <div class="modal-header">
            <h2 id="paymentModalTitle">Payment Details</h2>
            <button onclick="closePaymentDetailsModal()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
        </div>
        <div class="modal-body">
            <!-- Payment Summary -->
            <div style="background: #f8fafc; padding: 1.5rem; border-radius: 8px; margin-bottom: 2rem;">
                <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                    <div>
                        <label style="font-weight: 600; color: #374151;">Invoice Number</label>
                        <p id="modalInvoiceNumber" style="margin: 0.25rem 0 0 0; font-size: 1.1rem;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Settlement Date</label>
                        <p id="modalSettlementDate" style="margin: 0.25rem 0 0 0;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Payment Method</label>
                        <p id="modalPaymentMethod" style="margin: 0.25rem 0 0 0;">-</p>
                    </div>
                    <div>
                        <label style="font-weight: 600; color: #374151;">Total Amount</label>
                        <p id="modalTotalAmount" style="margin: 0.25rem 0 0 0; font-size: 1.2rem; font-weight: 600; color: #059669;">-</p>
                    </div>
                </div>
            </div>
            
            <!-- Products in this Payment -->
            <div>
                <h4 style="margin-bottom: 1rem;">Products Included in this Payment</h4>
                <div class="table-responsive">
                    <table class="items-table" id="paymentProductsTable">
                        <thead>
                            <tr>
                                <th>Product Name</th>
                                <th>Batch Number</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                                <th>Supply Date</th>
                            </tr>
                        </thead>
                        <tbody id="paymentProductsTableBody">
                            <!-- Products will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>
            
            <!-- Payment Notes -->
            <div style="margin-top: 2rem;">
                <label style="font-weight: 600; color: #374151;">Payment Notes</label>
                <div id="modalPaymentNotes" style="background: #f9fafb; padding: 1rem; border-radius: 6px; margin-top: 0.5rem; min-height: 60px;">
                    No additional notes
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const supplierId = @Model.SupplierId;
        
        document.addEventListener('DOMContentLoaded', function() {
            loadSupplierProducts();
            loadProductsForSupplier();
            setupDateFilters();
        });

        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => tab.style.display = 'none');
            
            // Remove active class from all buttons
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').style.display = 'block';
            
            // Add active class to clicked button
            event.target.classList.add('active');
            
            // Load data based on tab
            if (tabName === 'supplies') {
                loadSupplierSupplies();
            } else if (tabName === 'invoices') {
                loadPendingSuppliesForInvoicing(); // Load pending supplies first
                loadSupplierInvoices(); // Then load existing invoices
            } else if (tabName === 'payments') {
                loadPaymentData();
            }
        }

        // Updated to use new API endpoints
        function filterSupplies() {
            loadSupplierSupplies();
        }

        function displayProducts(products) {
            const grid = document.getElementById('productsGrid');
            grid.innerHTML = '';
            
            if (!products || products.length === 0) {
                grid.innerHTML = `
                    <div style="text-align: center; padding: 3rem; color: #64748b;">
                        <i class="fas fa-box-open" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                        <h3 style="margin: 0 0 0.5rem 0;">No Products Available</h3>
                        <p style="margin: 0 0 1rem 0;">No products are currently assigned to this supplier for confirmation.</p>
                        <button class="btn btn-primary" onclick="loadAllAvailableProducts()">
                            <i class="fas fa-plus"></i> Assign Products to Supplier
                        </button>
                    </div>
                `;
                return;
            }
            
            products.forEach(product => {
                const card = document.createElement('div');
                card.className = 'product-card';
                card.innerHTML = `
                    <div class="product-header">
                        <div class="product-info">
                            <h5>${product.name || product.productName}</h5>
                            <div class="product-meta">
                                <span><strong>SKU:</strong> ${product.sku || 'N/A'}</span>
                                <span><strong>Category:</strong> ${product.category || product.categoryName || 'N/A'}</span>
                                <span><strong>Current Stock:</strong> ${product.stockQuantity || 0}</span>
                                <span><strong>Price:</strong> KSh ${(product.price || 0).toFixed(2)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-delivery-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Quantity Delivered</label>
                                <input type="number" 
                                       id="quantity_${product.productId}" 
                                       min="0" 
                                       value="${product.stockQuantity || 0}"
                                       placeholder="Enter quantity"
                                       class="form-control">
                            </div>
                            <div class="form-group">
                                <label>Unit Cost (KSh)</label>
                                <input type="number" 
                                       id="unitCost_${product.productId}" 
                                       min="0" 
                                       step="0.01"
                                       value="${product.buyingPrice || product.price || 0}"
                                       placeholder="0.00"
                                       class="form-control">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Batch Number</label>
                                <input type="text" 
                                       id="batch_${product.productId}" 
                                       placeholder="Optional"
                                       class="form-control">
                            </div>
                            <div class="form-group">
                                <label>Supply Date</label>
                                <input type="date" 
                                       id="supplyDate_${product.productId}" 
                                       value="${new Date().toISOString().split('T')[0]}"
                                       class="form-control">
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="btn-reject" onclick="rejectProduct(${product.productId})">
                            <i class="fas fa-times"></i> Reject
                        </button>
                        <button class="btn-confirm" onclick="confirmProduct(${product.productId})">
                            <i class="fas fa-check"></i> Confirm
                        </button>
                    </div>
                `;
                grid.appendChild(card);
            });
        }

        function displaySupplies(supplies) {
            const tbody = document.getElementById('suppliesTableBody');
            tbody.innerHTML = '';
            
            if (!supplies || supplies.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="10" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-box-open" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>No supply records found
                            <br><small>Confirmed products will appear here</small>
                        </td>
                    </tr>
                `;
                return;
            }
            
            supplies.forEach(supply => {
                const row = document.createElement('tr');
                const canInvoice = supply.paymentStatus === 'Pending';
                const isInvoiced = supply.paymentStatus === 'Invoiced' || supply.paymentStatus === 'Paid' || supply.paymentStatus === 'Settled';
                
                // Add visual styling based on status
                if (isInvoiced) {
                    row.style.backgroundColor = '#f0f9ff';
                    row.style.borderLeft = '4px solid #0ea5e9';
                } else if (canInvoice) {
                    row.style.backgroundColor = '#fefce8';
                    row.style.borderLeft = '4px solid #eab308';
                }
                
                row.innerHTML = `
                    <td>
                        <input type="checkbox" 
                               class="supply-checkbox" 
                               value="${supply.supplierProductSupplyId}"
                               ${canInvoice ? '' : 'disabled'}
                               ${canInvoice ? '' : 'title="Already invoiced or paid"'}>
                    </td>
                    <td>
                        <strong>${supply.productName}</strong>
                        <br><small class="text-muted">ID: ${supply.productId}</small>
                    </td>
                    <td>${supply.productId}</td>
                    <td>
                        <strong>${supply.batchNumber || 'N/A'}</strong>
                        ${supply.batchNumber ? '<br><small class="text-success">✓ Batched</small>' : '<br><small class="text-muted">No batch</small>'}
                    </td>
                    <td><strong>${supply.quantitySupplied}</strong> units</td>
                    <td>KSh <strong>${supply.unitCost.toFixed(2)}</strong></td>
                    <td>KSh <strong>${supply.totalCost.toFixed(2)}</strong></td>
                    <td>${new Date(supply.supplyDate).toLocaleDateString()}</td>
                    <td>
                        <span class="status-badge status-${supply.paymentStatus.toLowerCase()}">
                            ${supply.paymentStatus}
                        </span>
                        ${canInvoice ? '<br><small class="text-warning">⏳ Ready to invoice</small>' : ''}
                        ${isInvoiced ? '<br><small class="text-info">📄 Invoiced</small>' : ''}
                    </td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewSupplyDetails(${supply.supplierProductSupplyId})" title="View Supply Details">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            // Update the select all checkbox functionality
            updateSelectAllState();
            
            // Update statistics
            updateSuppliesStatistics(supplies);
        }
        
        function updateSuppliesStatistics(supplies) {
            const pending = supplies.filter(s => s.paymentStatus === 'Pending').length;
            const invoiced = supplies.filter(s => s.paymentStatus === 'Invoiced').length;
            const paid = supplies.filter(s => s.paymentStatus === 'Paid' || s.paymentStatus === 'Settled').length;
            
            document.getElementById('pendingCount').textContent = `${pending} Pending`;
            document.getElementById('invoicedCount').textContent = `${invoiced} Invoiced`;
            document.getElementById('paidCount').textContent = `${paid} Paid`;
            
            // Note: Removed button enable/disable logic since invoice buttons are now in Invoices tab
        }
        
        // Removed selectPendingSupplies and generateInvoiceFromSelected 
        // Invoice generation is now handled in the Invoices tab only

        async function loadProductsForSupplier() {
            try {
                const response = await fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('productId');
                    select.innerHTML = '<option value="">Select Product</option>';
                    
                    data.products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.productId;
                        option.textContent = `${product.productName} (${product.sku})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        function setupDateFilters() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
            document.getElementById('toDate').value = today.toISOString().split('T')[0];
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.supply-checkbox:not(:disabled)');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
        }
        
        function updateSelectAllState() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.supply-checkbox:not(:disabled)');
            const checkedBoxes = document.querySelectorAll('.supply-checkbox:not(:disabled):checked');
            
            if (checkboxes.length === 0) {
                selectAll.indeterminate = false;
                selectAll.checked = false;
                selectAll.disabled = true;
            } else if (checkedBoxes.length === checkboxes.length) {
                selectAll.indeterminate = false;
                selectAll.checked = true;
                selectAll.disabled = false;
            } else if (checkedBoxes.length > 0) {
                selectAll.indeterminate = true;
                selectAll.checked = false;
                selectAll.disabled = false;
            } else {
                selectAll.indeterminate = false;
                selectAll.checked = false;
                selectAll.disabled = false;
            }
        }
        
        // Function to generate invoice for a single supply
        async function generateInvoiceForSingle(supplyId) {
            try {
                console.log('Generating invoice for single supply:', supplyId);
                
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        supplierId: supplierId, 
                        supplyIds: [supplyId] 
                    })
                });

                const result = await response.json();
                console.log('Single invoice result:', result);
                
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!\\nAmount: KSh ${result.totalAmount.toFixed(2)}`, 'success');
                    loadSupplierSupplies();
                    loadSupplierInvoices();
                    showTab('invoices');
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error generating single invoice:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }

        function openAddItemModal() {
            document.getElementById('addItemModal').style.display = 'block';
            loadProductsForSupplier();
            // Set default supply date to today
            document.getElementById('supplyDate').value = new Date().toISOString().split('T')[0];
        }

        function closeAddItemModal() {
            document.getElementById('addItemModal').style.display = 'none';
            document.getElementById('addItemForm').reset();
        }

        // Individual product confirmation function
        async function confirmProduct(productId) {
            console.log('confirmProduct called with productId:', productId);
            
            const quantityInput = document.getElementById(`quantity_${productId}`);
            const unitCostInput = document.getElementById(`unitCost_${productId}`);
            const batchInput = document.getElementById(`batch_${productId}`);
            const supplyDateInput = document.getElementById(`supplyDate_${productId}`);
            
            if (!quantityInput || !unitCostInput || !supplyDateInput) {
                console.error('Required input elements not found for product:', productId);
                showToast('Error: Form elements not found. Please refresh the page.', 'error');
                return;
            }
            
            const quantity = parseInt(quantityInput.value) || 0;
            const unitCost = parseFloat(unitCostInput.value) || 0;
            const batchNumber = batchInput ? batchInput.value || '' : '';
            const supplyDate = supplyDateInput.value;
            
            console.log('Form values:', { quantity, unitCost, batchNumber, supplyDate });
            
            if (quantity <= 0) {
                alert('Please enter a valid quantity.');
                quantityInput.focus();
                return;
            }
            
            if (unitCost <= 0) {
                alert('Please enter a valid unit cost.');
                unitCostInput.focus();
                return;
            }
            
            if (!supplyDate) {
                alert('Please select a supply date.');
                supplyDateInput.focus();
                return;
            }
            
            try {
                // Find the confirm button for this product
                const confirmBtn = document.querySelector(`button[onclick="confirmProduct(${productId})"]`);
                const rejectBtn = confirmBtn.parentElement.querySelector('.btn-reject');
                
                if (!confirmBtn) {
                    console.error('Confirm button not found for product:', productId);
                    return;
                }
                
                // Disable buttons to prevent double submission
                confirmBtn.disabled = true;
                rejectBtn.disabled = true;
                confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                
                // Create supply record using the correct endpoint
                const supplyResponse = await fetch('/Admin/AddSupplierProductSupply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        productId: productId,
                        quantitySupplied: quantity,
                        unitCost: unitCost,
                        batchNumber: batchNumber || `BATCH-${Date.now()}`,
                        supplyDate: supplyDate,
                        expiryDate: null,
                        notes: `Product confirmed: ${quantity} units at KSh ${unitCost} each`
                    })
                });

                // Check if response is ok and has content
                if (!supplyResponse.ok) {
                    throw new Error(`HTTP error! status: ${supplyResponse.status}`);
                }
                
                const responseText = await supplyResponse.text();
                if (!responseText.trim()) {
                    throw new Error('Empty response from server');
                }
                
                let supplyResult;
                try {
                    supplyResult = JSON.parse(responseText);
                    console.log('Supply API response:', supplyResult);
                } catch (jsonError) {
                    console.error('JSON parsing error:', jsonError, 'Response text:', responseText);
                    throw new Error('Invalid JSON response from server');
                }
                
                if (supplyResult.success) {
                    console.log('Supply created successfully, supplyId:', supplyResult.supplyId);
                    // Automatically generate invoice for this supply using the supply ID
                    const invoiceResponse = await fetch('/Admin/GenerateSupplierInvoice', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            supplierId: supplierId,
                            supplyIds: [supplyResult.supplyId]
                        })
                    });

                    let invoiceResult = { success: false, message: 'Invoice generation failed' };
                    if (invoiceResponse.ok) {
                        try {
                            const invoiceText = await invoiceResponse.text();
                            console.log('Invoice API response text:', invoiceText);
                            if (invoiceText.trim()) {
                                invoiceResult = JSON.parse(invoiceText);
                                console.log('Invoice API response parsed:', invoiceResult);
                            }
                        } catch (invoiceJsonError) {
                            console.error('Invoice JSON parsing error:', invoiceJsonError);
                        }
                    } else {
                        console.error('Invoice API failed with status:', invoiceResponse.status);
                        const errorText = await invoiceResponse.text();
                        console.error('Invoice API error response:', errorText);
                    }
                    
                    if (invoiceResult.success) {
                        // Update button to show success
                        confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirmed';
                        confirmBtn.className = 'btn-confirm';
                        confirmBtn.style.background = '#059669';
                        
                        // Update supply status in the table
                        updateSupplyStatus(productId, 'Confirmed');
                        
                        // Hide reject button
                        rejectBtn.style.display = 'none';
                        
                        // Disable form inputs
                        quantityInput.disabled = true;
                        unitCostInput.disabled = true;
                        batchInput.disabled = true;
                        supplyDateInput.disabled = true;
                        
                        // Show success message
                        showToast(`Product confirmed and invoiced successfully!\\nInvoice: ${invoiceResult.invoiceNumber}\\nAmount: KSh ${invoiceResult.totalAmount.toFixed(2)}`, 'success');
                        
                        // Refresh other tabs
                        loadSupplierSupplies();
                        loadSupplierInvoices();
                        
                        // Also refresh payment data
                        loadPaymentData();
                    } else {
                        // Supply created but invoice failed
                        confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirmed (Invoice Pending)';
                        confirmBtn.style.background = '#f59e0b';
                        rejectBtn.style.display = 'none';
                        
                        showToast(`Product confirmed successfully!\\nInvoice generation pending - check Invoices tab.`, 'warning');
                        
                        // Still refresh tabs to show the supply record
                        loadSupplierSupplies();
                        loadSupplierInvoices();
                        loadPaymentData();
                    }
                } else {
                    // Re-enable buttons on error
                    if (confirmBtn) {
                        confirmBtn.disabled = false;
                        confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm';
                    }
                    if (rejectBtn) {
                        rejectBtn.disabled = false;
                    }
                    
                    showToast('Error confirming product: ' + (supplyResult.message || 'Unknown error'), 'error');
                }
            } catch (error) {
                console.error('Error confirming product:', error);
                
                // Re-enable buttons on error
                const confirmBtn = document.querySelector(`button[onclick="confirmProduct(${productId})"]`);
                const rejectBtn = confirmBtn ? confirmBtn.parentElement.querySelector('.btn-reject') : null;
                
                if (confirmBtn) {
                    confirmBtn.disabled = false;
                    confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm';
                }
                if (rejectBtn) {
                    rejectBtn.disabled = false;
                }
                
                showToast('Error confirming product. Please try again.', 'error');
            }
        }

        // Individual product rejection function
        function rejectProduct(productId) {
            if (!confirm('Are you sure you want to reject this product delivery?')) {
                return;
            }
            
            const productCard = document.querySelector(`#quantity_${productId}`).closest('.product-card');
            const confirmBtn = productCard.querySelector('.btn-confirm');
            const rejectBtn = productCard.querySelector('.btn-reject');
            
            // Update UI to show rejected state
            confirmBtn.style.display = 'none';
            rejectBtn.innerHTML = '<i class="fas fa-times"></i> Rejected';
            rejectBtn.style.background = '#6b7280';
            rejectBtn.disabled = true;
            
            // Disable form inputs
            const inputs = productCard.querySelectorAll('input');
            inputs.forEach(input => {
                input.disabled = true;
                input.style.background = '#f3f4f6';
            });
            
            // Add visual indication
            productCard.style.opacity = '0.6';
            productCard.style.border = '2px solid #ef4444';
            
            showToast('Product delivery rejected.', 'info');
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 10000;
                max-width: 400px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideIn 0.3s ease;
            `;
            
            const colors = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#3b82f6'
            };
            
            toast.style.background = colors[type] || colors.info;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 5000);
        }

        // Add CSS animations for toast (only if not already added)
        if (!document.getElementById('toast-animations')) {
            const toastStyle = document.createElement('style');
            toastStyle.id = 'toast-animations';
            toastStyle.textContent = `
                @@keyframes slideIn {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }
                @@keyframes slideOut {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }
            `;
            document.head.appendChild(toastStyle);
        }

        // Function to update supply status in the table
        function updateSupplyStatus(productId, status) {
            // This will be called after confirmation to update the supplies table
            loadSupplierSupplies();
        }

        // Payment view toggle functionality
        let currentPaymentView = 'all';
        
        function togglePaymentView(view) {
            currentPaymentView = view;
            
            // Update button states
            document.querySelectorAll('#paymentsTab .btn-sm').forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-secondary');
            });
            
            const activeBtn = document.getElementById(view === 'all' ? 'allPaymentsBtn' : view === 'unpaid' ? 'unpaidBtn' : 'paidBtn');
            activeBtn.classList.remove('btn-secondary');
            activeBtn.classList.add('btn-primary');
            
            // Show/hide sections based on view
            const unpaidSection = document.getElementById('unpaidInvoicesSection');
            const historySection = document.getElementById('paymentHistorySection');
            
            switch(view) {
                case 'all':
                    unpaidSection.style.display = 'block';
                    historySection.style.display = 'block';
                    break;
                case 'unpaid':
                    unpaidSection.style.display = 'block';
                    historySection.style.display = 'none';
                    break;
                case 'paid':
                    unpaidSection.style.display = 'none';
                    historySection.style.display = 'block';
                    break;
            }
            
            // Load appropriate data
            loadPaymentData();
        }

        function toggleSelectAllUnpaid() {
            const selectAll = document.getElementById('selectAllUnpaid');
            const checkboxes = document.querySelectorAll('.unpaid-invoice-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        async function confirmSelectedPayments() {
            const selectedInvoices = Array.from(document.querySelectorAll('.unpaid-invoice-checkbox:checked')).map(cb => ({
                invoiceId: parseInt(cb.dataset.invoiceId),
                amount: parseFloat(cb.dataset.amount)
            }));
            
            if (selectedInvoices.length === 0) {
                showToast('Please select invoices to confirm payment', 'warning');
                return;
            }
            
            const totalAmount = selectedInvoices.reduce((sum, inv) => sum + inv.amount, 0);
            
            if (!confirm(`Confirm payment for ${selectedInvoices.length} invoice(s)?\\nTotal Amount: KSh ${totalAmount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: selectedInvoices.map(inv => inv.invoiceId),
                        paymentMethod: 'Cash', // Default method
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: `Bulk payment confirmation for ${selectedInvoices.length} invoices`
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Payment confirmed successfully!\\n${selectedInvoices.length} invoices marked as paid\\nTotal: KSh ${totalAmount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices(); // Refresh invoices tab
                } else {
                    showToast('Error confirming payments: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming payments:', error);
                showToast('Error confirming payments. Please try again.', 'error');
            }
        }

        async function loadPaymentData() {
            await Promise.all([
                loadUnsettledInvoices(),
                loadSettledPayments()
            ]);
        }
        
        async function loadUnsettledInvoices() {
            try {
                console.log('Loading unsettled invoices for supplier:', supplierId);
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    // Filter for unsettled invoices (not fully paid)
                    const unsettledInvoices = data.invoices.filter(invoice => 
                        invoice.amountDue > 0 && (invoice.status === 'Pending' || invoice.status === 'Partial')
                    );
                    console.log('Found unsettled invoices:', unsettledInvoices.length);
                    displayUnsettledInvoices(unsettledInvoices);
                } else {
                    console.error('Failed to load invoices:', data.message);
                }
            } catch (error) {
                console.error('Error loading unsettled invoices:', error);
            }
        }
        
        async function loadSettledPayments() {
            try {
                console.log('Loading settled payments for supplier:', supplierId);
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    // Filter for settled invoices (fully paid)
                    const settledInvoices = data.invoices.filter(invoice => 
                        invoice.amountDue <= 0 && invoice.amountPaid > 0
                    );
                    console.log('Found settled payments:', settledInvoices.length);
                    displaySettledPayments(settledInvoices);
                } else {
                    console.error('Failed to load invoices:', data.message);
                }
            } catch (error) {
                console.error('Error loading settled payments:', error);
            }
        }

        async function loadUnpaidInvoices() {
            try {
                const response = await fetch(`/Admin/GetSupplierUnpaidInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayUnpaidInvoices(data.invoices || []);
                } else {
                    console.error('Error loading unpaid invoices:', data.message);
                }
            } catch (error) {
                console.error('Error loading unpaid invoices:', error);
            }
        }

        function displayUnsettledInvoices(invoices) {
            const tbody = document.getElementById('unsettledInvoicesTableBody');
            tbody.innerHTML = '';
            
            if (!invoices || invoices.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>All invoices are settled!
                            <br><small>Great job keeping payments up to date</small>
                        </td>
                    </tr>
                `;
                updateUnsettledStatistics([]);
                return;
            }
            
            invoices.forEach(invoice => {
                const dueDate = new Date(invoice.dueDate);
                const today = new Date();
                const daysOverdue = Math.max(0, Math.floor((today - dueDate) / (1000 * 60 * 60 * 24)));
                const isOverdue = daysOverdue > 0;
                const isDueSoon = daysOverdue === 0 && Math.floor((dueDate - today) / (1000 * 60 * 60 * 24)) <= 7;
                
                const row = document.createElement('tr');
                if (isOverdue) {
                    row.style.backgroundColor = '#fef2f2';
                    row.style.borderLeft = '4px solid #dc2626';
                } else if (isDueSoon) {
                    row.style.backgroundColor = '#fefce8';
                    row.style.borderLeft = '4px solid #eab308';
                }
                
                row.innerHTML = `
                    <td>
                        <input type="checkbox" 
                               class="unsettled-invoice-checkbox" 
                               data-invoice-id="${invoice.supplierInvoiceId}"
                               data-amount="${invoice.amountDue}">
                    </td>
                    <td>
                        <strong>${invoice.invoiceNumber}</strong>
                        ${isOverdue ? '<br><small class="text-danger">⚠️ Overdue</small>' : ''}
                        ${isDueSoon ? '<br><small class="text-warning">⏰ Due Soon</small>' : ''}
                    </td>
                    <td>${new Date(invoice.invoiceDate).toLocaleDateString()}</td>
                    <td>
                        <span class="badge badge-info">${invoice.itemCount || 0} items</span>
                    </td>
                    <td>
                        <strong>KSh ${invoice.amountDue.toFixed(2)}</strong>
                        ${invoice.amountPaid > 0 ? `<br><small class="text-muted">Paid: KSh ${invoice.amountPaid.toFixed(2)}</small>` : ''}
                    </td>
                    <td>
                        ${dueDate.toLocaleDateString()}
                        ${isOverdue ? `<br><small class="text-danger">${daysOverdue} days overdue</small>` : ''}
                        ${isDueSoon ? '<br><small class="text-warning">Due within 7 days</small>' : ''}
                    </td>
                    <td>
                        <span class="status-badge status-${invoice.status.toLowerCase()}">${invoice.status}</span>
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="settleInvoice(${invoice.supplierInvoiceId}, ${invoice.amountDue})" title="Settle Payment">
                            <i class="fas fa-check-circle"></i> Settle
                        </button>
                        <button class="btn btn-info btn-sm" onclick="viewInvoiceProducts(${invoice.supplierInvoiceId})" title="View Products">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            updateUnsettledStatistics(invoices);
        }
        
        function displaySettledPayments(payments) {
            const tbody = document.getElementById('settledPaymentsTableBody');
            tbody.innerHTML = '';
            
            if (!payments || payments.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-receipt" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>No settled payments yet
                            <br><small>Settled payments will appear here</small>
                        </td>
                    </tr>
                `;
                updateSettledStatistics([]);
                return;
            }
            
            payments.forEach(payment => {
                const row = document.createElement('tr');
                row.style.backgroundColor = '#f0fdf4';
                row.style.borderLeft = '4px solid #22c55e';
                
                row.innerHTML = `
                    <td><strong>${payment.invoiceNumber}</strong></td>
                    <td>${new Date(payment.invoiceDate).toLocaleDateString()}</td>
                    <td>
                        <span class="badge badge-success">${payment.itemCount || 0} products</span>
                    </td>
                    <td><strong>KSh ${payment.amountPaid.toFixed(2)}</strong></td>
                    <td>
                        <span class="badge badge-info">Cash</span>
                    </td>
                    <td>
                        <span class="status-badge status-paid">Settled</span>
                    </td>
                    <td>
                        <button class="btn btn-info btn-sm" onclick="viewSettledPaymentDetails(${payment.supplierInvoiceId})" title="View Payment Details">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            updateSettledStatistics(payments);
        }
        
        function updateUnsettledStatistics(invoices) {
            const today = new Date();
            const overdue = invoices.filter(invoice => {
                const dueDate = new Date(invoice.dueDate);
                return dueDate < today;
            }).length;
            
            const dueSoon = invoices.filter(invoice => {
                const dueDate = new Date(invoice.dueDate);
                const daysUntilDue = Math.floor((dueDate - today) / (1000 * 60 * 60 * 24));
                return daysUntilDue >= 0 && daysUntilDue <= 7;
            }).length;
            
            const totalAmount = invoices.reduce((sum, invoice) => sum + invoice.amountDue, 0);
            
            document.getElementById('overdueCount').textContent = `${overdue} Overdue`;
            document.getElementById('dueCount').textContent = `${dueSoon} Due Soon`;
            document.getElementById('totalUnsettledAmount').textContent = `KSh ${totalAmount.toFixed(2)} Total`;
            
            // Enable/disable buttons
            const selectOverdueBtn = document.getElementById('selectOverdueBtn');
            const settleSelectedBtn = document.getElementById('settleSelectedBtn');
            
            selectOverdueBtn.disabled = overdue === 0;
            settleSelectedBtn.disabled = invoices.length === 0;
        }
        
        function updateSettledStatistics(payments) {
            const totalAmount = payments.reduce((sum, payment) => sum + payment.amountPaid, 0);
            
            document.getElementById('settledCount').textContent = `${payments.length} Settled`;
            document.getElementById('totalSettledAmount').textContent = `KSh ${totalAmount.toFixed(2)} Total`;
        }
        
        function selectOverdueInvoices() {
            // Uncheck all first
            document.querySelectorAll('.unsettled-invoice-checkbox').forEach(cb => cb.checked = false);
            
            // Check only overdue invoices (red rows)
            const overdueRows = document.querySelectorAll('#unsettledInvoicesTableBody tr[style*="border-left: 4px solid #dc2626"]');
            overdueRows.forEach(row => {
                const checkbox = row.querySelector('.unsettled-invoice-checkbox');
                if (checkbox) checkbox.checked = true;
            });
            
            const selectedCount = document.querySelectorAll('.unsettled-invoice-checkbox:checked').length;
            showToast(`Selected ${selectedCount} overdue invoices for settlement`, 'info');
        }
        
        function toggleSelectAllUnsettled() {
            const selectAll = document.getElementById('selectAllUnsettled');
            const checkboxes = document.querySelectorAll('.unsettled-invoice-checkbox');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
        }
        
        async function settleSelectedInvoices() {
            const selectedInvoices = Array.from(document.querySelectorAll('.unsettled-invoice-checkbox:checked')).map(cb => ({
                invoiceId: parseInt(cb.dataset.invoiceId),
                amount: parseFloat(cb.dataset.amount)
            }));
            
            if (selectedInvoices.length === 0) {
                showToast('Please select invoices to settle', 'warning');
                return;
            }
            
            const totalAmount = selectedInvoices.reduce((sum, inv) => sum + inv.amount, 0);
            
            if (!confirm(`Settle ${selectedInvoices.length} invoice(s)?\\nTotal Amount: KSh ${totalAmount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: selectedInvoices.map(inv => inv.invoiceId),
                        paymentMethod: 'Cash',
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: `Bulk settlement for ${selectedInvoices.length} invoices`
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`${selectedInvoices.length} invoices settled successfully!\\nTotal: KSh ${totalAmount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices();
                    loadSupplierSupplies();
                } else {
                    showToast('Error settling invoices: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error settling invoices:', error);
                showToast('Error settling invoices. Please try again.', 'error');
            }
        }
        
        async function settleInvoice(invoiceId, amount) {
            if (!confirm(`Settle this invoice?\\nAmount: KSh ${amount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: [invoiceId],
                        paymentMethod: 'Cash',
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: 'Single invoice settlement'
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Invoice settled successfully!\\nAmount: KSh ${amount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices();
                    loadSupplierSupplies();
                } else {
                    showToast('Error settling invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error settling invoice:', error);
                showToast('Error settling invoice. Please try again.', 'error');
            }
        }

        async function confirmSinglePayment(invoiceId, amount) {
            if (!confirm(`Confirm payment for this invoice?\\nAmount: KSh ${amount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: [invoiceId],
                        paymentMethod: 'Cash',
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: `Single invoice payment confirmation`
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Payment confirmed successfully!\\nAmount: KSh ${amount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices();
                } else {
                    showToast('Error confirming payment: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming payment:', error);
                showToast('Error confirming payment. Please try again.', 'error');
            }
        }

        async function generateInvoice() {
            const selectedSupplies = Array.from(document.querySelectorAll('.supply-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (selectedSupplies.length === 0) {
                showToast('Please select supply batches to invoice', 'warning');
                return;
            }

            try {
                console.log('Generating invoice for supplies:', selectedSupplies);
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ supplierId: supplierId, supplyIds: selectedSupplies })
                });

                const result = await response.json();
                console.log('Generate invoice result:', result);
                
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!\\nAmount: KSh ${result.totalAmount.toFixed(2)}`, 'success');
                    loadSupplierSupplies();
                    loadSupplierInvoices();
                    showTab('invoices');
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error generating invoice:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }
        
        // Function to generate invoice for all pending supplies
        async function generateInvoiceForAllPending() {
            try {
                console.log('Generating invoice for all pending supplies for supplier:', supplierId);
                
                // First get all pending supplies
                const suppliesResponse = await fetch(`/Admin/GetSupplierProductSupplies?supplierId=${supplierId}&status=Pending`);
                const suppliesData = await suppliesResponse.json();
                
                if (!suppliesData.success || !suppliesData.supplies || suppliesData.supplies.length === 0) {
                    showToast('No pending supplies found to invoice', 'info');
                    return;
                }
                
                const pendingSupplyIds = suppliesData.supplies.map(s => s.supplierProductSupplyId);
                console.log('Found pending supplies:', pendingSupplyIds);
                
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ supplierId: supplierId, supplyIds: pendingSupplyIds })
                });

                const result = await response.json();
                console.log('Generate invoice for pending result:', result);
                
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!\\nAmount: KSh ${result.totalAmount.toFixed(2)}`, 'success');
                    loadSupplierSupplies();
                    loadSupplierInvoices();
                    showTab('invoices');
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error generating invoice for pending supplies:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }

        document.getElementById('addItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                supplierId: supplierId,
                productId: parseInt(document.getElementById('productId').value),
                quantitySupplied: parseInt(document.getElementById('quantitySupplied').value),
                unitCost: parseFloat(document.getElementById('unitCost').value),
                batchNumber: document.getElementById('batchNumber').value,
                supplyDate: document.getElementById('supplyDate').value,
                expiryDate: document.getElementById('expiryDate').value || null,
                notes: document.getElementById('notes').value
            };

            try {
                const response = await fetch('/Admin/AddSupplierProductSupply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();
                if (result.success) {
                    closeAddItemModal();
                    loadSupplierProducts();
                    alert('Supply batch added successfully');
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error adding supply batch:', error);
                alert('Error adding supply batch');
            }
        });

        async function loadSupplierProducts() {
            try {
                // Get all products for this supplier
                const productsResponse = await fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`);
                const productsData = await productsResponse.json();
                
                if (!productsData.success) {
                    showAlert('Error loading products: ' + productsData.message, 'error');
                    return;
                }
                
                // Get all confirmed supplies to filter out already confirmed products
                const suppliesResponse = await fetch(`/Admin/GetSupplierProductSupplies?supplierId=${supplierId}`);
                const suppliesData = await suppliesResponse.json();
                
                let confirmedProductIds = [];
                if (suppliesData.success && suppliesData.supplies) {
                    // Get product IDs that already have supplies (confirmed products)
                    confirmedProductIds = [...new Set(suppliesData.supplies.map(s => s.productId))];
                    console.log('Already confirmed product IDs:', confirmedProductIds);
                }
                
                // Filter out products that are already confirmed
                const pendingProducts = productsData.products.filter(product => 
                    !confirmedProductIds.includes(product.productId)
                );
                
                console.log('Total products:', productsData.products.length);
                console.log('Pending products (not yet confirmed):', pendingProducts.length);
                
                displayProducts(pendingProducts);
                loadSupplierSupplies(); // Load supplies separately
                
            } catch (error) {
                console.error('Error loading products:', error);
                showAlert('Error loading products', 'error');
            }
        }

        function loadSupplierSupplies() {
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            const status = document.getElementById('statusFilter').value;

            let url = `/Admin/GetSupplierProductSupplies?supplierId=${supplierId}`;
            const params = new URLSearchParams();
            
            if (fromDate) params.append('fromDate', fromDate);
            if (toDate) params.append('toDate', toDate);
            if (status) params.append('status', status);
            
            if (params.toString()) {
                url += '&' + params.toString();
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displaySupplies(data.supplies);
                    } else {
                        showAlert('Error loading supplies: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading supplies', 'error');
                });
        }

        // Additional functions for invoice and payment management
        async function loadSupplierInvoices() {
            try {
                console.log('Loading invoices for supplier:', supplierId);
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                console.log('Invoice API response:', data);
                if (data.success) {
                    console.log('Found invoices:', data.invoices.length);
                    displayInvoices(data.invoices);
                } else {
                    console.error('Failed to load invoices:', data.message);
                }
            } catch (error) {
                console.error('Error loading invoices:', error);
            }
        }

        function displayInvoices(invoices) {
            const tbody = document.getElementById('invoicesTableBody');
            tbody.innerHTML = '';
            
            invoices.forEach(invoice => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${invoice.invoiceNumber}</td>
                    <td>${new Date(invoice.invoiceDate).toLocaleDateString()}</td>
                    <td>${new Date(invoice.dueDate).toLocaleDateString()}</td>
                    <td>KSh ${invoice.totalAmount.toFixed(2)}</td>
                    <td>KSh ${invoice.amountPaid.toFixed(2)}</td>
                    <td>KSh ${invoice.amountDue.toFixed(2)}</td>
                    <td><span class="status-badge status-${invoice.status.toLowerCase()}">${invoice.status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-success" onclick="recordPayment(${invoice.supplierInvoiceId})" ${invoice.amountDue <= 0 ? 'disabled' : ''}>
                            <i class="fas fa-money-bill"></i> Pay
                        </button>
                        <button class="btn btn-sm btn-info" onclick="viewInvoice(${invoice.supplierInvoiceId})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadSupplierPayments() {
            try {
                const response = await fetch(`/Admin/GetSupplierPayments?supplierId=${supplierId}`);
                const data = await response.json();
                if (data.success) {
                    displayPayments(data.payments);
                }
            } catch (error) {
                console.error('Error loading payments:', error);
            }
        }

        function displayPayments(payments) {
            const tbody = document.getElementById('paymentsTableBody');
            tbody.innerHTML = '';
            
            payments.forEach(payment => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${payment.invoiceNumber}</td>
                    <td>${payment.paymentReference}</td>
                    <td>KSh ${payment.amount.toFixed(2)}</td>
                    <td>${payment.paymentMethod}</td>
                    <td>${new Date(payment.paymentDate).toLocaleDateString()}</td>
                    <td><span class="status-badge status-${payment.status.toLowerCase()}">${payment.status}</span></td>
                    <td>${payment.processedByUser}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function recordPayment(invoiceId) {
            // This would open a payment modal - simplified for now
            const amount = prompt('Enter payment amount:');
            const paymentMethod = prompt('Enter payment method (Cash/Bank/Cheque):') || 'Cash';
            
            if (amount && !isNaN(amount) && parseFloat(amount) > 0) {
                submitPayment(invoiceId, parseFloat(amount), paymentMethod);
            }
        }

        async function submitPayment(invoiceId, amount, paymentMethod) {
            try {
                const response = await fetch('/Admin/RecordSupplierPayment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierInvoiceId: invoiceId,
                        amount: amount,
                        paymentMethod: paymentMethod,
                        paymentDate: new Date().toISOString(),
                        notes: 'Payment recorded via supplier details'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert(`Payment recorded successfully. Remaining amount: KSh ${result.remainingAmount.toFixed(2)}`);
                    loadSupplierInvoices();
                    loadSupplierPayments();
                    loadSupplierSupplies(); // Refresh supplies to show updated payment status
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error recording payment:', error);
                alert('Error recording payment');
            }
        }

        function viewSupplyDetails(supplyId) {
            // Placeholder for supply details modal
            alert('Supply details view - to be implemented');
        }

        function viewInvoice(invoiceId) {
            // Placeholder for invoice details modal
            alert('Invoice details view - to be implemented');
        }

        function showAlert(message, type) {
            alert(message); // Simple alert for now, can be enhanced with better UI
        }
        
        async function viewSettledPaymentDetails(invoiceId) {
            try {
                console.log('Loading payment details for invoice:', invoiceId);
                
                // Get invoice details with products
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    const invoice = data.invoices.find(inv => inv.supplierInvoiceId === invoiceId);
                    if (invoice) {
                        displayPaymentDetailsModal(invoice);
                    } else {
                        showToast('Invoice not found', 'error');
                    }
                } else {
                    showToast('Error loading payment details: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error loading payment details:', error);
                showToast('Error loading payment details. Please try again.', 'error');
            }
        }
        
        function displayPaymentDetailsModal(invoice) {
            // Update modal title and basic info
            document.getElementById('paymentModalTitle').textContent = `Payment Details - ${invoice.invoiceNumber}`;
            document.getElementById('modalInvoiceNumber').textContent = invoice.invoiceNumber;
            document.getElementById('modalSettlementDate').textContent = new Date(invoice.invoiceDate).toLocaleDateString();
            document.getElementById('modalPaymentMethod').textContent = 'Cash'; // Default for now
            document.getElementById('modalTotalAmount').textContent = `KSh ${invoice.amountPaid.toFixed(2)}`;
            
            // Display products in the payment
            const tbody = document.getElementById('paymentProductsTableBody');
            tbody.innerHTML = '';
            
            if (invoice.items && invoice.items.length > 0) {
                invoice.items.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td><strong>${item.productName}</strong></td>
                        <td>${item.batchNumber || 'N/A'}</td>
                        <td>${item.quantity} units</td>
                        <td>KSh ${item.unitCost.toFixed(2)}</td>
                        <td><strong>KSh ${item.totalCost.toFixed(2)}</strong></td>
                        <td>${new Date(item.supplyDate).toLocaleDateString()}</td>
                    `;
                    tbody.appendChild(row);
                });
            } else {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-box-open" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>No product details available
                        </td>
                    </tr>
                `;
            }
            
            // Update payment notes
            document.getElementById('modalPaymentNotes').textContent = invoice.notes || 'No additional notes for this payment.';
            
            // Show the modal
            document.getElementById('paymentDetailsModal').style.display = 'block';
        }
        
        function closePaymentDetailsModal() {
            document.getElementById('paymentDetailsModal').style.display = 'none';
        }
        
        async function viewInvoiceProducts(invoiceId) {
            // This function shows products for unsettled invoices
            await viewSettledPaymentDetails(invoiceId);
        }
        
        async function viewSupplyDetails(supplyId) {
            try {
                console.log('Loading supply details for:', supplyId);
                
                // Get supply details
                const response = await fetch(`/Admin/GetSupplierProductSupplies?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    const supply = data.supplies.find(s => s.supplierProductSupplyId === supplyId);
                    if (supply) {
                        displaySupplyDetailsModal(supply);
                    } else {
                        showToast('Supply record not found', 'error');
                    }
                } else {
                    showToast('Error loading supply details: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error loading supply details:', error);
                showToast('Error loading supply details. Please try again.', 'error');
            }
        }
        
        function displaySupplyDetailsModal(supply) {
            // Update modal title and basic info
            document.getElementById('supplyModalTitle').textContent = `Supply Details - ${supply.productName}`;
            document.getElementById('modalSupplyProductName').textContent = supply.productName;
            document.getElementById('modalSupplyBatchNumber').textContent = supply.batchNumber || 'No batch number';
            document.getElementById('modalSupplyDate').textContent = new Date(supply.supplyDate).toLocaleDateString();
            document.getElementById('modalSupplyStatus').textContent = supply.paymentStatus;
            
            // Update supply details
            document.getElementById('modalSupplyQuantity').textContent = `${supply.quantitySupplied} units`;
            document.getElementById('modalSupplyUnitCost').textContent = `KSh ${supply.unitCost.toFixed(2)}`;
            document.getElementById('modalSupplyTotalCost').textContent = `KSh ${supply.totalCost.toFixed(2)}`;
            document.getElementById('modalSupplyExpiryDate').textContent = supply.expiryDate ? new Date(supply.expiryDate).toLocaleDateString() : 'No expiry date';
            
            // Update supply notes
            document.getElementById('modalSupplyNotes').textContent = supply.notes || 'No additional notes for this supply.';
            
            // Set status color
            const statusElement = document.getElementById('modalSupplyStatus');
            switch(supply.paymentStatus.toLowerCase()) {
                case 'pending':
                    statusElement.style.color = '#d97706';
                    break;
                case 'invoiced':
                    statusElement.style.color = '#0ea5e9';
                    break;
                case 'paid':
                case 'settled':
                    statusElement.style.color = '#059669';
                    break;
                default:
                    statusElement.style.color = '#374151';
            }
            
            // Show the modal
            document.getElementById('supplyDetailsModal').style.display = 'block';
        }
        
        function closeSupplyDetailsModal() {
            document.getElementById('supplyDetailsModal').style.display = 'none';
        }
        
        function refreshSupplies() {
            loadSupplierSupplies();
            showToast('Supply history refreshed', 'info');
        }
        
        // Removed old generateInvoiceFromSupplies function
        // Invoice generation is now handled by the new pending supplies table in Invoices tab
        
        async function loadAllAvailableProducts() {
            try {
                console.log('Loading all available products for assignment...');
                
                // Get all products that are not assigned to any supplier or assigned to this supplier
                const response = await fetch('/Admin/GetAllProducts');
                const data = await response.json();
                
                if (data.success && data.products) {
                    // Filter products that are not assigned to other suppliers
                    const availableProducts = data.products.filter(p => 
                        !p.supplierId || p.supplierId === supplierId
                    );
                    
                    if (availableProducts.length === 0) {
                        showToast('No products available for assignment', 'info');
                        return;
                    }
                    
                    // For now, assign all available products to this supplier
                    // Later this can be enhanced with a selection modal
                    const productIds = availableProducts.map(p => p.productId);
                    
                    const assignResponse = await fetch('/Admin/AssignProductsToSupplier', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            supplierId: supplierId,
                            productIds: productIds
                        })
                    });
                    
                    const assignResult = await assignResponse.json();
                    
                    if (assignResult.success) {
                        showToast(`Successfully assigned ${assignResult.assignedProducts} products to this supplier!`, 'success');
                        loadSupplierProducts(); // Reload the products
                    } else {
                        showToast('Error assigning products: ' + assignResult.message, 'error');
                    }
                } else {
                    showToast('Error loading available products', 'error');
                }
            } catch (error) {
                console.error('Error loading available products:', error);
                showToast('Error loading products. Please try again.', 'error');
            }
        }
        
        // ===== PENDING SUPPLIES FOR INVOICING FUNCTIONS =====
        
        async function loadPendingSuppliesForInvoicing() {
            try {
                console.log('Loading pending supplies for invoicing...');
                
                const response = await fetch(`/Admin/GetSupplierProductSupplies?supplierId=${supplierId}&status=Pending`);
                const data = await response.json();
                
                if (data.success) {
                    displayPendingSuppliesForInvoicing(data.supplies || []);
                } else {
                    console.error('Failed to load pending supplies:', data.message);
                    showToast('Error loading pending supplies: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error loading pending supplies:', error);
                showToast('Error loading pending supplies. Please try again.', 'error');
            }
        }
        
        function displayPendingSuppliesForInvoicing(supplies) {
            const tbody = document.getElementById('pendingSuppliesTableBody');
            tbody.innerHTML = '';
            
            const pendingSupplies = supplies.filter(s => s.paymentStatus === 'Pending');
            
            if (!pendingSupplies || pendingSupplies.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3; color: #10b981;"></i>
                            <br>No pending supplies found
                            <br><small>All supplies have been invoiced or there are no confirmed supplies yet</small>
                        </td>
                    </tr>
                `;
                updatePendingInvoiceStatistics([]);
                return;
            }
            
            pendingSupplies.forEach(supply => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <input type="checkbox" 
                               class="pending-supply-checkbox" 
                               value="${supply.supplierProductSupplyId}"
                               data-amount="${supply.totalCost}"
                               onchange="updateSelectedInvoiceStats()">
                    </td>
                    <td>
                        <strong>${supply.productName}</strong>
                        <br><small class="text-muted">SKU: ${supply.productId}</small>
                    </td>
                    <td>
                        <strong>${supply.batchNumber || 'N/A'}</strong>
                        ${supply.batchNumber ? '<br><small class="text-success">✓ Batched</small>' : '<br><small class="text-muted">No batch</small>'}
                    </td>
                    <td><strong>${supply.quantitySupplied}</strong> units</td>
                    <td>KSh <strong>${supply.unitCost.toFixed(2)}</strong></td>
                    <td>KSh <strong>${supply.totalCost.toFixed(2)}</strong></td>
                    <td>${new Date(supply.supplyDate).toLocaleDateString()}</td>
                    <td>
                        <button class="btn btn-sm btn-success" onclick="generateSingleInvoice(${supply.supplierProductSupplyId})" title="Invoice This Item">
                            <i class="fas fa-file-invoice"></i> Invoice
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
            
            updatePendingInvoiceStatistics(pendingSupplies);
        }
        
        function updatePendingInvoiceStatistics(supplies) {
            const pendingCount = supplies.length;
            const totalAmount = supplies.reduce((sum, supply) => sum + supply.totalCost, 0);
            
            document.getElementById('pendingInvoiceCount').textContent = `${pendingCount} Pending`;
            document.getElementById('totalInvoiceAmount').textContent = `KSh ${totalAmount.toFixed(2)} Total`;
            
            // Enable/disable buttons
            const selectAllBtn = document.getElementById('selectAllPendingBtn');
            const generateBtn = document.getElementById('generateInvoiceBtn');
            
            selectAllBtn.disabled = pendingCount === 0;
            generateBtn.disabled = pendingCount === 0;
            
            updateSelectedInvoiceStats();
        }
        
        function updateSelectedInvoiceStats() {
            const selectedCheckboxes = document.querySelectorAll('.pending-supply-checkbox:checked');
            const selectedCount = selectedCheckboxes.length;
            const selectedAmount = Array.from(selectedCheckboxes).reduce((sum, cb) => sum + parseFloat(cb.dataset.amount), 0);
            
            document.getElementById('selectedInvoiceCount').textContent = `${selectedCount} Selected`;
            
            // Update generate button state
            const generateBtn = document.getElementById('generateInvoiceBtn');
            generateBtn.disabled = selectedCount === 0;
            
            // Update select all checkbox state
            const selectAllCheckbox = document.getElementById('selectAllPending');
            const allCheckboxes = document.querySelectorAll('.pending-supply-checkbox');
            
            if (allCheckboxes.length === 0) {
                selectAllCheckbox.indeterminate = false;
                selectAllCheckbox.checked = false;
                selectAllCheckbox.disabled = true;
            } else if (selectedCount === allCheckboxes.length) {
                selectAllCheckbox.indeterminate = false;
                selectAllCheckbox.checked = true;
                selectAllCheckbox.disabled = false;
            } else if (selectedCount > 0) {
                selectAllCheckbox.indeterminate = true;
                selectAllCheckbox.checked = false;
                selectAllCheckbox.disabled = false;
            } else {
                selectAllCheckbox.indeterminate = false;
                selectAllCheckbox.checked = false;
                selectAllCheckbox.disabled = false;
            }
        }
        
        function toggleSelectAllPending() {
            const selectAll = document.getElementById('selectAllPending');
            const checkboxes = document.querySelectorAll('.pending-supply-checkbox');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
            updateSelectedInvoiceStats();
        }
        
        function selectAllPendingForInvoice() {
            const checkboxes = document.querySelectorAll('.pending-supply-checkbox');
            checkboxes.forEach(cb => cb.checked = true);
            updateSelectedInvoiceStats();
            showToast(`Selected ${checkboxes.length} supplies for invoicing`, 'info');
        }
        
        async function generateInvoiceFromSelected() {
            const selectedSupplies = Array.from(document.querySelectorAll('.pending-supply-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (selectedSupplies.length === 0) {
                showToast('Please select supplies to invoice', 'warning');
                return;
            }
            
            const totalAmount = Array.from(document.querySelectorAll('.pending-supply-checkbox:checked'))
                .reduce((sum, cb) => sum + parseFloat(cb.dataset.amount), 0);
            
            if (!confirm(`Generate invoice for ${selectedSupplies.length} selected supplies?\\nTotal Amount: KSh ${totalAmount.toFixed(2)}`)) {
                return;
            }
            
            try {
                console.log('Generating invoice for selected supplies:', selectedSupplies);
                
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        supplierId: supplierId, 
                        supplyIds: selectedSupplies 
                    })
                });

                const result = await response.json();
                console.log('Invoice generation result:', result);
                
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!\\nAmount: KSh ${result.totalAmount.toFixed(2)}`, 'success');
                    loadPendingSuppliesForInvoicing(); // Refresh pending supplies
                    loadSupplierInvoices(); // Refresh invoices list
                    loadSupplierSupplies(); // Refresh supplies tab
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                    console.error('Invoice generation failed:', result);
                }
            } catch (error) {
                console.error('Error generating invoice:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }
        
        async function generateSingleInvoice(supplyId) {
            if (!confirm('Generate invoice for this supply?')) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ 
                        supplierId: supplierId, 
                        supplyIds: [supplyId] 
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!`, 'success');
                    loadPendingSuppliesForInvoicing();
                    loadSupplierInvoices();
                    loadSupplierSupplies();
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error generating single invoice:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }
        
        function refreshPendingSupplies() {
            loadPendingSuppliesForInvoicing();
            showToast('Pending supplies refreshed', 'info');
        }
        
        async function fixDatabaseSchema() {
            if (!confirm('This will fix the database schema for invoice generation. Continue?')) {
                return;
            }
            
            try {
                showToast('Fixing database schema...', 'info');
                
                const response = await fetch('/Admin/FixSupplierInvoiceSchema', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast('Database schema fixed successfully! You can now generate invoices.', 'success');
                    // Hide the fix schema button after successful fix
                    document.getElementById('fixSchemaBtn').style.display = 'none';
                } else {
                    showToast('Error fixing schema: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error fixing database schema:', error);
                showToast('Error fixing database schema. Please try again.', 'error');
            }
        }
        
        async function checkUsersStatus() {
            try {
                showToast('Checking users in database...', 'info');
                
                const response = await fetch('/Admin/CheckUsersStatus');
                const result = await response.json();
                
                if (result.success) {
                    console.log('Users status:', result);
                    
                    let message = `Database Users Status:\\n`;
                    message += `Total Users: ${result.totalUsers}\\n`;
                    message += `Admin Users: ${result.adminUsers}\\n\\n`;
                    
                    if (result.users && result.users.length > 0) {
                        message += `Sample Users:\\n`;
                        result.users.forEach(user => {
                            message += `- ${user.firstName} ${user.lastName} (${user.email}) - ${user.role}\\n`;
                        });
                    } else {
                        message += `No users found in database!`;
                    }
                    
                    alert(message);
                    
                    if (result.totalUsers === 0) {
                        if (confirm('No users found in database. Create a default admin user?')) {
                            await createDefaultAdminUser();
                        }
                    }
                } else {
                    showToast('Error checking users: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error checking users status:', error);
                showToast('Error checking users. Please try again.', 'error');
            }
        }
        
        async function createDefaultAdminUser() {
            try {
                showToast('Creating default admin user...', 'info');
                
                const response = await fetch('/Admin/CreateDefaultAdminUser', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Default admin user created successfully!\\nEmail: ${result.email}\\nPassword: Admin123!`, 'success');
                    alert(`Default Admin User Created:\\n\\nEmail: ${result.email}\\nPassword: Admin123!\\n\\nPlease change the password after first login.`);
                } else {
                    showToast('Error creating admin user: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error creating default admin user:', error);
                showToast('Error creating admin user. Please try again.', 'error');
            }
        }

        async function cleanupDuplicateInvoices() {
            if (!confirm('Are you sure you want to remove duplicate invoices? This action cannot be undone.')) {
                return;
            }

            try {
                showToast('Cleaning up duplicate invoices...', 'info');
                
                const response = await fetch('/Admin/CleanupDuplicateInvoices', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' }
                });

                const result = await response.json();
                if (result.success) {
                    showToast(`Successfully cleaned up ${result.deletedCount} duplicate invoices`, 'success');
                    // Refresh the invoices list
                    loadSupplierInvoices();
                } else {
                    showToast('Error cleaning up duplicates: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error cleaning up duplicates:', error);
                showToast('Error cleaning up duplicate invoices', 'error');
            }
        }

        async function viewInvoice(invoiceId) {
            try {
                const response = await fetch(`/Admin/GetInvoiceDetails?invoiceId=${invoiceId}`);
                const result = await response.json();
                
                if (result.success) {
                    showInvoiceDetailsModal(result.invoice);
                } else {
                    showToast('Error loading invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error loading invoice details:', error);
                showToast('Error loading invoice details', 'error');
            }
        }

        function showInvoiceDetailsModal(invoice) {
            const modal = document.createElement('div');
            modal.className = 'modal fade';
            modal.id = 'invoiceDetailsModal';
            modal.innerHTML = `
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">📄 Invoice Details - ${invoice.invoiceNumber}</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div class="row">
                                <div class="col-md-6">
                                    <h6>🏢 Supplier Information</h6>
                                    <p><strong>Company:</strong> ${invoice.supplier.companyName}</p>
                                    <p><strong>Contact:</strong> ${invoice.supplier.contactPerson}</p>
                                    <p><strong>Email:</strong> ${invoice.supplier.email}</p>
                                    <p><strong>Phone:</strong> ${invoice.supplier.phone}</p>
                                </div>
                                <div class="col-md-6">
                                    <h6>📋 Invoice Information</h6>
                                    <p><strong>Invoice Date:</strong> ${invoice.invoiceDate}</p>
                                    <p><strong>Due Date:</strong> ${invoice.dueDate}</p>
                                    <p><strong>Status:</strong> <span class="badge bg-primary">${invoice.status}</span></p>
                                    <p><strong>Payment Status:</strong> <span class="badge bg-warning">${invoice.paymentStatus}</span></p>
                                </div>
                            </div>
                            
                            <h6 class="mt-4">📦 Invoice Items</h6>
                            <div class="table-responsive">
                                <table class="table table-sm table-striped">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Product</th>
                                            <th>Batch</th>
                                            <th>Supply Date</th>
                                            <th>Qty</th>
                                            <th>Unit Cost</th>
                                            <th>Total</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${invoice.items.map(item => `
                                            <tr>
                                                <td><strong>${item.productName}</strong></td>
                                                <td>${item.batchNumber || 'N/A'}</td>
                                                <td>${item.supplyDate}</td>
                                                <td>${item.quantity}</td>
                                                <td>KSh ${item.unitCost.toFixed(2)}</td>
                                                <td><strong>KSh ${item.totalCost.toFixed(2)}</strong></td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>

                            <div class="row mt-4">
                                <div class="col-md-6">
                                    <div class="card">
                                        <div class="card-header"><h6>💰 Payment Summary</h6></div>
                                        <div class="card-body">
                                            <p><strong>Subtotal:</strong> KSh ${invoice.amounts.subtotal.toFixed(2)}</p>
                                            <p><strong>Tax (16%):</strong> KSh ${invoice.amounts.taxAmount.toFixed(2)}</p>
                                            <p><strong>Total Amount:</strong> KSh ${invoice.amounts.totalAmount.toFixed(2)}</p>
                                            <p><strong>Amount Paid:</strong> KSh ${invoice.amounts.amountPaid.toFixed(2)}</p>
                                            <p class="h5"><strong>Amount Due:</strong> <span class="text-danger">KSh ${invoice.amounts.amountDue.toFixed(2)}</span></p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6">
                                    ${invoice.payments.length > 0 ? `
                                        <div class="card">
                                            <div class="card-header"><h6>💳 Payment History</h6></div>
                                            <div class="card-body">
                                                ${invoice.payments.map(payment => `
                                                    <div class="mb-2 p-2 border rounded bg-light">
                                                        <small>
                                                            <strong>KSh ${payment.amount.toFixed(2)}</strong> - ${payment.paymentMethod}<br>
                                                            📅 ${payment.paymentDate} by ${payment.processedBy}<br>
                                                            ${payment.transactionReference ? `🔗 Ref: ${payment.transactionReference}` : ''}
                                                        </small>
                                                    </div>
                                                `).join('')}
                                            </div>
                                        </div>
                                    ` : '<div class="card"><div class="card-body"><p class="text-muted">No payments recorded</p></div></div>'}
                                </div>
                            </div>

                            ${invoice.notes ? `<div class="mt-3 card"><div class="card-header"><h6>📝 Notes</h6></div><div class="card-body"><p>${invoice.notes}</p></div></div>` : ''}
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                            ${invoice.amounts.amountDue > 0 ? `
                                <button type="button" class="btn btn-success" onclick="recordPayment(${invoice.invoiceId})" data-bs-dismiss="modal">
                                    <i class="fas fa-money-bill"></i> Record Payment
                                </button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);
            const bootstrapModal = new bootstrap.Modal(modal);
            bootstrapModal.show();

            // Remove modal from DOM when hidden
            modal.addEventListener('hidden.bs.modal', () => {
                document.body.removeChild(modal);
            });
        }

        // Filtering and Search Functions
        function setFilter(status) {
            document.getElementById('statusFilter').value = status;
            applyFilters();
        }

        async function applyFilters() {
            const status = document.getElementById('statusFilter').value;
            const search = document.getElementById('searchInput').value.trim();
            
            try {
                const response = await fetch(`/Admin/GetSupplierProductsFiltered?supplierId=${supplierId}&status=${status}&search=${encodeURIComponent(search)}`);
                const data = await response.json();
                
                if (data.success) {
                    displayPendingSupplies(data.supplies);
                    updateFilterButtons(status);
                } else {
                    showToast('Error applying filters: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error applying filters:', error);
                showToast('Error applying filters', 'error');
            }
        }

        function updateFilterButtons(activeStatus) {
            // Update quick filter button states
            const buttons = document.querySelectorAll('.btn-group .btn');
            buttons.forEach(btn => {
                btn.classList.remove('active');
                if ((btn.textContent.includes('Pending') && activeStatus === 'pending') ||
                    (btn.textContent.includes('Invoiced') && activeStatus === 'invoiced') ||
                    (btn.textContent.includes('All') && activeStatus === 'all')) {
                    btn.classList.add('active');
                }
            });
        }

        function displayPendingSupplies(supplies) {
            const tbody = document.getElementById('pendingSuppliesTableBody');
            tbody.innerHTML = '';
            
            if (!supplies || supplies.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="9" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-box-open" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>No supplies found matching your criteria
                        </td>
                    </tr>
                `;
                return;
            }

            supplies.forEach(supply => {
                const row = document.createElement('tr');
                const isSelectable = supply.paymentStatus === 'Pending' || supply.paymentStatus === 'Received';
                
                row.innerHTML = `
                    <td>
                        ${isSelectable ? `<input type="checkbox" class="supply-checkbox" value="${supply.supplierProductSupplyId}">` : ''}
                    </td>
                    <td><strong>${supply.productName}</strong></td>
                    <td>${supply.batchNumber || 'N/A'}</td>
                    <td>${supply.quantitySupplied}</td>
                    <td>KSh ${supply.unitCost.toFixed(2)}</td>
                    <td><strong>KSh ${supply.totalCost.toFixed(2)}</strong></td>
                    <td>${new Date(supply.supplyDate).toLocaleDateString()}</td>
                    <td>
                        <span class="status-badge status-${supply.paymentStatus.toLowerCase()}">
                            ${supply.paymentStatus}
                        </span>
                    </td>
                    <td>${supply.notes || ''}</td>
                `;
                
                // Add visual indicators for different statuses
                if (!isSelectable) {
                    row.style.opacity = '0.7';
                    row.style.backgroundColor = supply.paymentStatus === 'Invoiced' ? '#e8f5e8' : '#f0f8ff';
                }
                
                tbody.appendChild(row);
            });

            // Update select all checkbox
            updateSelectAllCheckbox();
        }

        function updateSelectAllCheckbox() {
            const checkboxes = document.querySelectorAll('.supply-checkbox');
            const selectAllCheckbox = document.getElementById('selectAllPending');
            
            if (checkboxes.length === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
                return;
            }

            const checkedCount = document.querySelectorAll('.supply-checkbox:checked').length;
            
            if (checkedCount === 0) {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = false;
            } else if (checkedCount === checkboxes.length) {
                selectAllCheckbox.checked = true;
                selectAllCheckbox.indeterminate = false;
            } else {
                selectAllCheckbox.checked = false;
                selectAllCheckbox.indeterminate = true;
            }
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupDateFilters();
            loadSupplierProducts(); // Load initial data
            
            // Set up checkbox change listeners
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('supply-checkbox')) {
                    updateSelectAllCheckbox();
                }
            });
        });
    </script>
}
