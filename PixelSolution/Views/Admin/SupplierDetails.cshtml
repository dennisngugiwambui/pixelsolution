@model PixelSolution.ViewModels.SupplierDetailsViewModel
@{
    ViewData["Title"] = "Supplier Details - " + Model.CompanyName;
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .supplier-header {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }

        .supplier-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 1rem;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .supplier-header {
                padding: 1rem;
            }
            
            .supplier-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .date-filter {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .tabs-nav {
                flex-direction: column;
            }
            
            .tab-btn {
                text-align: center;
            }
            
            .modal-content {
                width: 95%;
                margin: 2% auto;
            }
            
            .items-table {
                font-size: 0.875rem;
            }
            
            .items-table th,
            .items-table td {
                padding: 0.5rem;
            }
        }

        @media (max-width: 480px) {
            .supplier-header h1 {
                font-size: 1.5rem !important;
            }
            
            .info-card {
                padding: 1rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
            
            .btn {
                padding: 0.375rem 0.75rem;
                font-size: 0.875rem;
            }
        }

        .info-card {
            background: rgba(255,255,255,0.1);
            padding: 1.5rem;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }

        .tabs-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .tabs-nav {
            display: flex;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .tab-btn {
            flex: 1;
            padding: 1rem 1.5rem;
            border: none;
            background: none;
            cursor: pointer;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: white;
            color: #10b981;
            border-bottom: 3px solid #10b981;
        }

        .tab-content {
            padding: 2rem;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 1rem;
        }

        .items-table th,
        .items-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .items-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-received { background: #dcfce7; color: #166534; }
        .status-invoiced { background: #fef3c7; color: #92400e; }
        .status-paid { background: #dbeafe; color: #1e40af; }
        .status-settled { background: #f3e8ff; color: #7c3aed; }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary { background: #10b981; color: white; }
        .btn-secondary { background: #6b7280; color: white; }
        .btn-warning { background: #f59e0b; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }

        .filters-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            align-items: center;
        }

        .date-filter {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .form-control {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.875rem;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1.5rem;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }
    </style>
}

<div class="main-content">
    <div class="dashboard-content">
        <!-- Supplier Header -->
        <div class="supplier-header">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap; gap: 1rem;">
                <div>
                    <h1 style="margin: 0 0 0.5rem 0; font-size: 2rem;">@Model.CompanyName</h1>
                    <p style="margin: 0; opacity: 0.9;">Contact: @Model.ContactPerson</p>
                </div>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                    <button class="btn btn-secondary" onclick="window.history.back()">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                    <button class="btn btn-primary" onclick="acceptDelivery()">
                        <i class="fas fa-check"></i> Accept Delivery
                    </button>
                </div>
            </div>
            
            <div class="supplier-info">
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Contact Information</h3>
                    <p><i class="fas fa-envelope"></i> @Model.Email</p>
                    <p><i class="fas fa-phone"></i> @Model.Phone</p>
                    @if (!string.IsNullOrEmpty(Model.Address))
                    {
                        <p><i class="fas fa-map-marker-alt"></i> @Model.Address</p>
                    }
                </div>
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Statistics</h3>
                    <p>Total Items: <strong>@Model.TotalItems</strong></p>
                    <p>Total Value: <strong>KSh @Model.TotalValue.ToString("N2")</strong></p>
                    <p>Outstanding: <strong>KSh @Model.OutstandingAmount.ToString("N2")</strong></p>
                </div>
            </div>
        </div>

        <!-- Tabs Container -->
        <div class="tabs-container">
            <div class="tabs-nav">
                <button class="tab-btn active" onclick="showTab('items')">Supplied Items</button>
                <button class="tab-btn" onclick="showTab('invoices')">Invoices</button>
                <button class="tab-btn" onclick="showTab('payments')">Payments</button>
            </div>

            <!-- Products & Supplies Tab -->
            <div id="itemsTab" class="tab-content active">
                <div class="filters-bar">
                    <div class="date-filter">
                        <label>From:</label>
                        <input type="date" id="fromDate" class="form-control">
                    </div>
                    <div class="date-filter">
                        <label>To:</label>
                        <input type="date" id="toDate" class="form-control">
                    </div>
                    <select id="statusFilter" class="form-control">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Invoiced">Invoiced</option>
                        <option value="Paid">Paid</option>
                        <option value="Settled">Settled</option>
                    </select>
                    <button class="btn btn-secondary" onclick="filterSupplies()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </div>

                <!-- Products assigned to this supplier -->
                <div style="margin-bottom: 2rem;">
                    <h4>Products Assigned to Supplier</h4>
                    <div id="productsGrid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 1rem;">
                        <!-- Products will be loaded here -->
                    </div>
                </div>

                <!-- Supply batches for all products -->
                <div>
                    <h4>Supply History & Batches</h4>
                    <table class="items-table" id="suppliesTable">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Batch</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                                <th>Supply Date</th>
                                <th>Payment Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="suppliesTableBody">
                            <!-- Supply batches will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Invoices Tab -->
            <div id="invoicesTab" class="tab-content">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <h3>Supplier Invoices</h3>
                    <button class="btn btn-primary" onclick="generateInvoice()">
                        <i class="fas fa-plus"></i> New Invoice
                    </button>
                </div>
                <table class="items-table" id="invoicesTable">
                    <thead>
                        <tr>
                            <th>Invoice #</th>
                            <th>Date</th>
                            <th>Items</th>
                            <th>Subtotal</th>
                            <th>Tax</th>
                            <th>Total</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="invoicesTableBody">
                        <!-- Invoices will be loaded here -->
                    </tbody>
                </table>
            </div>

            <!-- Payments Tab -->
            <div id="paymentsTab" class="tab-content">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem;">
                    <h3>Payment History</h3>
                    <button class="btn btn-primary" onclick="openPaymentModal()">
                        <i class="fas fa-plus"></i> Record Payment
                    </button>
                </div>
                <table class="items-table" id="paymentsTable">
                    <thead>
                        <tr>
                            <th>Payment #</th>
                            <th>Invoice</th>
                            <th>Amount</th>
                            <th>Method</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="paymentsTableBody">
                        <!-- Payments will be loaded here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Supply Batch Modal -->
<div id="addItemModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add Supply Batch</h2>
            <button onclick="closeAddItemModal()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
        </div>
        <div class="modal-body">
            <form id="addItemForm">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <label>Product *</label>
                        <select id="productId" class="form-control" required>
                            <option value="">Select Product</option>
                        </select>
                    </div>
                    <div>
                        <label>Quantity Supplied *</label>
                        <input type="number" id="quantitySupplied" class="form-control" required min="1">
                    </div>
                    <div>
                        <label>Unit Cost (KSh) *</label>
                        <input type="number" id="unitCost" class="form-control" required min="0" step="0.01">
                    </div>
                    <div>
                        <label>Batch Number</label>
                        <input type="text" id="batchNumber" class="form-control">
                    </div>
                    <div>
                        <label>Supply Date *</label>
                        <input type="date" id="supplyDate" class="form-control" required>
                    </div>
                    <div>
                        <label>Expiry Date</label>
                        <input type="date" id="expiryDate" class="form-control">
                    </div>
                </div>
                <div style="margin-top: 1rem;">
                    <label>Notes</label>
                    <textarea id="notes" class="form-control" rows="3"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeAddItemModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Supply Batch</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const supplierId = @Model.SupplierId;
        
        document.addEventListener('DOMContentLoaded', function() {
            loadSupplierItems();
            loadProducts();
            setupDateFilters();
        });

        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            event.target.classList.add('active');
            
            // Load data for the selected tab
            switch(tabName) {
                case 'items':
                    loadSupplierProducts();
                    break;
                case 'invoices':
                    loadSupplierInvoices();
                    break;
                case 'payments':
                    loadSupplierPayments();
                    break;
            }
        }

        // Updated to use new API endpoints
        function filterSupplies() {
            loadSupplierSupplies();
        }

        function displayProducts(products) {
            const grid = document.getElementById('productsGrid');
            grid.innerHTML = '';
            
            products.forEach(product => {
                const card = document.createElement('div');
                card.style.cssText = 'border: 1px solid #ddd; border-radius: 8px; padding: 1rem; background: white;';
                card.innerHTML = `
                    <h5>${product.productName}</h5>
                    <p><strong>SKU:</strong> ${product.sku}</p>
                    <p><strong>Category:</strong> ${product.categoryName}</p>
                    <p><strong>Stock:</strong> ${product.stockQuantity}</p>
                    <p><strong>Total Supplied Value:</strong> KSh ${product.totalSuppliedValue.toFixed(2)}</p>
                    <p><strong>Outstanding Amount:</strong> KSh ${product.outstandingAmount.toFixed(2)}</p>
                    <p><strong>Supply Batches:</strong> ${product.supplies.length}</p>
                `;
                grid.appendChild(card);
            });
        }

        function displaySupplies(supplies) {
            const tbody = document.getElementById('suppliesTableBody');
            tbody.innerHTML = '';
            
            supplies.forEach(supply => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><input type="checkbox" class="supply-checkbox" value="${supply.supplierProductSupplyId}"></td>
                    <td>${supply.productName}</td>
                    <td>${supply.productId}</td>
                    <td>${supply.batchNumber || '-'}</td>
                    <td>${supply.quantitySupplied}</td>
                    <td>KSh ${supply.unitCost.toFixed(2)}</td>
                    <td>KSh ${supply.totalCost.toFixed(2)}</td>
                    <td>${new Date(supply.supplyDate).toLocaleDateString()}</td>
                    <td><span class="status-badge status-${supply.paymentStatus.toLowerCase()}">${supply.paymentStatus}</span></td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewSupplyDetails(${supply.supplierProductSupplyId})" title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadProductsForSupplier() {
            try {
                const response = await fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('productId');
                    select.innerHTML = '<option value="">Select Product</option>';
                    
                    data.products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.productId;
                        option.textContent = `${product.productName} (${product.sku})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        function setupDateFilters() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
            document.getElementById('toDate').value = today.toISOString().split('T')[0];
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.supply-checkbox');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
        }

        function openAddItemModal() {
            document.getElementById('addItemModal').style.display = 'block';
            loadProductsForSupplier();
            // Set default supply date to today
            document.getElementById('supplyDate').value = new Date().toISOString().split('T')[0];
        }

        function closeAddItemModal() {
            document.getElementById('addItemModal').style.display = 'none';
            document.getElementById('addItemForm').reset();
        }

        // New simplified Accept Delivery function
        async function acceptDelivery() {
            if (!confirm('Accept delivery for all products assigned to this supplier?')) {
                return;
            }

            try {
                // Get all products for this supplier
                const response = await fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (!data.success || !data.products.length) {
                    alert('No products found for this supplier.');
                    return;
                }

                // Show simple delivery acceptance modal
                showDeliveryAcceptanceModal(data.products);
                
            } catch (error) {
                console.error('Error loading products for delivery:', error);
                alert('Error loading products for delivery.');
            }
        }

        function showDeliveryAcceptanceModal(products) {
            const modal = document.createElement('div');
            modal.className = 'modal';
            modal.style.display = 'block';
            
            modal.innerHTML = `
                <div class="modal-content">
                    <div class="modal-header">
                        <h2>Accept Delivery - ${products.length} Products</h2>
                        <button onclick="this.closest('.modal').remove()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
                    </div>
                    <div class="modal-body">
                        <div style="margin-bottom: 1rem;">
                            <label>Delivery Date:</label>
                            <input type="date" id="deliveryDate" class="form-control" value="${new Date().toISOString().split('T')[0]}" required>
                        </div>
                        <div style="margin-bottom: 1rem;">
                            <label>Notes:</label>
                            <textarea id="deliveryNotes" class="form-control" rows="2" placeholder="Optional delivery notes"></textarea>
                        </div>
                        <div style="max-height: 400px; overflow-y: auto;">
                            <table class="items-table">
                                <thead>
                                    <tr>
                                        <th>Product</th>
                                        <th>Current Stock</th>
                                        <th>Quantity Delivered</th>
                                        <th>Unit Cost (KSh)</th>
                                        <th>Batch #</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${products.map(product => `
                                        <tr>
                                            <td>
                                                <strong>${product.name}</strong><br>
                                                <small>${product.description || ''}</small>
                                            </td>
                                            <td>${product.stockQuantity}</td>
                                            <td>
                                                <input type="number" 
                                                       class="form-control delivery-quantity" 
                                                       data-product-id="${product.productId}"
                                                       min="0" 
                                                       placeholder="0"
                                                       style="width: 100px;">
                                            </td>
                                            <td>
                                                <input type="number" 
                                                       class="form-control delivery-cost" 
                                                       data-product-id="${product.productId}"
                                                       min="0" 
                                                       step="0.01"
                                                       placeholder="0.00"
                                                       style="width: 100px;">
                                            </td>
                                            <td>
                                                <input type="text" 
                                                       class="form-control delivery-batch" 
                                                       data-product-id="${product.productId}"
                                                       placeholder="Optional"
                                                       style="width: 100px;">
                                            </td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                        <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                            <button type="button" class="btn btn-secondary" onclick="this.closest('.modal').remove()">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="processDeliveryAcceptance()">Accept & Create Invoice</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.appendChild(modal);
        }

        async function processDeliveryAcceptance() {
            const deliveryDate = document.getElementById('deliveryDate').value;
            const deliveryNotes = document.getElementById('deliveryNotes').value;
            
            if (!deliveryDate) {
                alert('Please select a delivery date.');
                return;
            }

            // Collect delivery data
            const productDeliveries = [];
            const quantityInputs = document.querySelectorAll('.delivery-quantity');
            
            quantityInputs.forEach(input => {
                const productId = parseInt(input.dataset.productId);
                const quantity = parseInt(input.value) || 0;
                const costInput = document.querySelector(`.delivery-cost[data-product-id="${productId}"]`);
                const batchInput = document.querySelector(`.delivery-batch[data-product-id="${productId}"]`);
                
                if (quantity > 0) {
                    const unitCost = parseFloat(costInput.value) || 0;
                    productDeliveries.push({
                        productId: productId,
                        quantity: quantity,
                        unitCost: unitCost,
                        batchNumber: batchInput.value || '',
                        expiryDate: null
                    });
                }
            });

            if (productDeliveries.length === 0) {
                alert('Please enter quantities for at least one product.');
                return;
            }

            try {
                // Accept delivery and automatically create invoice
                const deliveryResponse = await fetch('/Admin/AcceptSupplierDelivery', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        deliveryDate: deliveryDate,
                        notes: deliveryNotes,
                        productDeliveries: productDeliveries
                    })
                });

                const deliveryResult = await deliveryResponse.json();
                
                if (deliveryResult.success) {
                    // Automatically generate invoice for the accepted delivery
                    const invoiceResponse = await fetch('/Admin/GenerateSupplierInvoiceForPending', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ supplierId: supplierId })
                    });

                    const invoiceResult = await invoiceResponse.json();
                    
                    if (invoiceResult.success) {
                        alert(`Delivery accepted successfully!\\n\\nDelivery: ${productDeliveries.length} products (KSh ${deliveryResult.totalValue.toFixed(2)})\\nInvoice: ${invoiceResult.invoiceNumber} generated (KSh ${invoiceResult.totalAmount.toFixed(2)})`);
                    } else {
                        alert(`Delivery accepted successfully!\\n\\n${productDeliveries.length} products recorded (KSh ${deliveryResult.totalValue.toFixed(2)})\\n\\nNote: Invoice generation failed - you can generate it manually from the Payments tab.`);
                    }
                    
                    // Close modal and refresh data
                    document.querySelector('.modal').remove();
                    loadSupplierProducts();
                    showTab('invoices'); // Switch to invoices tab to show the new invoice
                } else {
                    alert('Error accepting delivery: ' + deliveryResult.message);
                }
            } catch (error) {
                console.error('Error processing delivery:', error);
                alert('Error processing delivery. Please try again.');
            }
        }

        async function generateInvoice() {
            const selectedSupplies = Array.from(document.querySelectorAll('.supply-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (selectedSupplies.length === 0) {
                alert('Please select supply batches to invoice');
                return;
            }

            try {
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ supplierId: supplierId, supplyIds: selectedSupplies })
                });

                const result = await response.json();
                if (result.success) {
                    alert(`Invoice ${result.invoiceNumber} generated successfully for KSh ${result.totalAmount.toFixed(2)}`);
                    loadSupplierSupplies();
                    showTab('invoices');
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error generating invoice:', error);
                alert('Error generating invoice');
            }
        }

        document.getElementById('addItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                supplierId: supplierId,
                productId: parseInt(document.getElementById('productId').value),
                quantitySupplied: parseInt(document.getElementById('quantitySupplied').value),
                unitCost: parseFloat(document.getElementById('unitCost').value),
                batchNumber: document.getElementById('batchNumber').value,
                supplyDate: document.getElementById('supplyDate').value,
                expiryDate: document.getElementById('expiryDate').value || null,
                notes: document.getElementById('notes').value
            };

            try {
                const response = await fetch('/Admin/AddSupplierProductSupply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();
                if (result.success) {
                    closeAddItemModal();
                    loadSupplierProducts();
                    alert('Supply batch added successfully');
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error adding supply batch:', error);
                alert('Error adding supply batch');
            }
        });

        function loadSupplierProducts() {
            fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayProducts(data.products);
                        loadSupplierSupplies(); // Load supplies separately
                    } else {
                        showAlert('Error loading products: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading products', 'error');
                });
        }

        function loadSupplierSupplies() {
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            const status = document.getElementById('statusFilter').value;

            let url = `/Admin/GetSupplierProductSupplies?supplierId=${supplierId}`;
            const params = new URLSearchParams();
            
            if (fromDate) params.append('fromDate', fromDate);
            if (toDate) params.append('toDate', toDate);
            if (status) params.append('status', status);
            
            if (params.toString()) {
                url += '&' + params.toString();
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displaySupplies(data.supplies);
                    } else {
                        showAlert('Error loading supplies: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading supplies', 'error');
                });
        }

        // Additional functions for invoice and payment management
        async function loadSupplierInvoices() {
            try {
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                if (data.success) {
                    displayInvoices(data.invoices);
                }
            } catch (error) {
                console.error('Error loading invoices:', error);
            }
        }

        function displayInvoices(invoices) {
            const tbody = document.getElementById('invoicesTableBody');
            tbody.innerHTML = '';
            
            invoices.forEach(invoice => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${invoice.invoiceNumber}</td>
                    <td>${new Date(invoice.invoiceDate).toLocaleDateString()}</td>
                    <td>${new Date(invoice.dueDate).toLocaleDateString()}</td>
                    <td>KSh ${invoice.totalAmount.toFixed(2)}</td>
                    <td>KSh ${invoice.amountPaid.toFixed(2)}</td>
                    <td>KSh ${invoice.amountDue.toFixed(2)}</td>
                    <td><span class="status-badge status-${invoice.status.toLowerCase()}">${invoice.status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-success" onclick="recordPayment(${invoice.supplierInvoiceId})" ${invoice.amountDue <= 0 ? 'disabled' : ''}>
                            <i class="fas fa-money-bill"></i> Pay
                        </button>
                        <button class="btn btn-sm btn-info" onclick="viewInvoice(${invoice.supplierInvoiceId})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadSupplierPayments() {
            try {
                const response = await fetch(`/Admin/GetSupplierPayments?supplierId=${supplierId}`);
                const data = await response.json();
                if (data.success) {
                    displayPayments(data.payments);
                }
            } catch (error) {
                console.error('Error loading payments:', error);
            }
        }

        function displayPayments(payments) {
            const tbody = document.getElementById('paymentsTableBody');
            tbody.innerHTML = '';
            
            payments.forEach(payment => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${payment.invoiceNumber}</td>
                    <td>${payment.paymentReference}</td>
                    <td>KSh ${payment.amount.toFixed(2)}</td>
                    <td>${payment.paymentMethod}</td>
                    <td>${new Date(payment.paymentDate).toLocaleDateString()}</td>
                    <td><span class="status-badge status-${payment.status.toLowerCase()}">${payment.status}</span></td>
                    <td>${payment.processedByUser}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function recordPayment(invoiceId) {
            // This would open a payment modal - simplified for now
            const amount = prompt('Enter payment amount:');
            const paymentMethod = prompt('Enter payment method (Cash/Bank/Cheque):') || 'Cash';
            
            if (amount && !isNaN(amount) && parseFloat(amount) > 0) {
                submitPayment(invoiceId, parseFloat(amount), paymentMethod);
            }
        }

        async function submitPayment(invoiceId, amount, paymentMethod) {
            try {
                const response = await fetch('/Admin/RecordSupplierPayment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierInvoiceId: invoiceId,
                        amount: amount,
                        paymentMethod: paymentMethod,
                        paymentDate: new Date().toISOString(),
                        notes: 'Payment recorded via supplier details'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert(`Payment recorded successfully. Remaining amount: KSh ${result.remainingAmount.toFixed(2)}`);
                    loadSupplierInvoices();
                    loadSupplierPayments();
                    loadSupplierSupplies(); // Refresh supplies to show updated payment status
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error recording payment:', error);
                alert('Error recording payment');
            }
        }

        function viewSupplyDetails(supplyId) {
            // Placeholder for supply details modal
            alert('Supply details view - to be implemented');
        }

        function viewInvoice(invoiceId) {
            // Placeholder for invoice details modal
            alert('Invoice details view - to be implemented');
        }

        function showAlert(message, type) {
            alert(message); // Simple alert for now, can be enhanced with better UI
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupDateFilters();
            loadSupplierProducts(); // Load initial data
        });
    </script>
}
