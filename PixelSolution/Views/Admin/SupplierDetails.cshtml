@model PixelSolution.ViewModels.SupplierDetailsViewModel
@{
    ViewData["Title"] = "Supplier Details - " + Model.CompanyName;
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .supplier-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }

        @@media (max-width: 768px) {
            .supplier-header {
                padding: 1.5rem;
                margin-bottom: 1.5rem;
            }
        }

        .supplier-info {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            margin-top: 1rem;
        }

        @@media (max-width: 768px) {
            .supplier-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
        }

        /* Responsive Design */
       @@media (max-width: 768px) {
            .supplier-header {
                padding: 1rem;
            }
            
            .supplier-info {
                grid-template-columns: 1fr;
                gap: 1rem;
            }
            
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
            }
            
            .date-filter {
                flex-direction: column;
                gap: 0.25rem;
            }
            
            .tabs-nav {
                flex-direction: column;
            }
            
            .tab-btn {
                text-align: center;
            }
            
            .modal-content {
                width: 95%;
                margin: 2% auto;
            }
            
            .items-table {
                font-size: 0.875rem;
            }
            
            .items-table th,
            .items-table td {
                padding: 0.5rem 0.25rem;
                font-size: 0.75rem;
            }
        }

        .table-responsive {
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        @@media (max-width: 768px) {
            .section-header {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
            
            .section-header h3 {
                margin: 0;
                text-align: center;
            }
        }

        @@media (max-width: 480px) {
            .supplier-header h1 {
                font-size: 1.5rem !important;
            }
            
            .info-card {
                padding: 1rem;
            }
            
            .tab-content {
                padding: 1rem;
            }
            
            .btn {
                padding: 0.375rem 0.75rem;
                font-size: 0.875rem;
            }
            
            .product-card {
                padding: 1rem !important;
            }
            
            .product-actions {
                flex-direction: column !important;
                gap: 0.5rem !important;
            }
        }

        /* Product Cards Styling */
        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
        }

        @@media (max-width: 768px) {
            .products-grid {
                grid-template-columns: 1fr;
            }
        }

        .product-card {
            background: white;
            border: 1px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
        }

        .product-card:hover {
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }

        .product-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .product-info h5 {
            margin: 0 0 0.5rem 0;
            color: #1f2937;
            font-size: 1.1rem;
            font-weight: 600;
        }

        .product-meta {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
            margin-bottom: 1rem;
            font-size: 0.875rem;
            color: #6b7280;
        }

        .product-delivery-form {
            background: #f8fafc;
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0.75rem;
            margin-bottom: 0.75rem;
        }

        @@media (max-width: 480px) {
            .form-row {
                grid-template-columns: 1fr;
            }
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-group label {
            font-size: 0.75rem;
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.25rem;
        }

        .form-group input {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.875rem;
        }

        .product-actions {
            display: flex;
            gap: 0.75rem;
            justify-content: flex-end;
        }

        @@media (max-width: 480px) {
            .product-actions {
                flex-direction: column;
                gap: 0.5rem;
            }
            
            .btn-confirm,
            .btn-reject {
                width: 100%;
                text-align: center;
            }
        }

        .btn-confirm {
            background: #10b981;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-confirm:hover {
            background: #059669;
        }

        .btn-reject {
            background: #ef4444;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 6px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-reject:hover {
            background: #dc2626;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .info-card {
            background: rgba(255,255,255,0.1);
            padding: 1.5rem;
            border-radius: 8px;
            backdrop-filter: blur(10px);
        }

        .tabs-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .tabs-nav {
            display: flex;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
            overflow-x: auto;
        }

        @@media (max-width: 768px) {
            .tabs-nav {
                flex-wrap: nowrap;
            }
        }

        .tab-btn {
            flex: 1;
            padding: 1rem 1.5rem;
            white-space: nowrap;
            min-width: fit-content;
            border: none;
            background: none;
            cursor: pointer;
            font-weight: 600;
            color: #64748b;
            transition: all 0.3s ease;
        }

        .tab-btn.active {
            background: white;
            color: #10b981;
            border-bottom: 3px solid #10b981;
        }

        .tab-content {
            padding: 2rem;
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .items-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .items-table th,
        .items-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
        }

        .items-table th {
            background: #f8fafc;
            font-weight: 600;
            color: #374151;
        }

        .status-badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }

        .status-received { background: #dcfce7; color: #166534; }
        .status-invoiced { background: #fef3c7; color: #92400e; }
        .status-paid { background: #dbeafe; color: #1e40af; }
        .status-settled { background: #f3e8ff; color: #7c3aed; }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 500;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .btn-primary { background: #10b981; color: white; }
        .btn-secondary { background: #6b7280; color: white; }
        .btn-warning { background: #f59e0b; color: white; }
        .btn-danger { background: #ef4444; color: white; }
        .btn-sm { padding: 0.375rem 0.75rem; font-size: 0.875rem; }

        .filters-bar {
            display: flex;
            gap: 1rem;
            margin-bottom: 1.5rem;
            align-items: end;
            flex-wrap: wrap;
        }

        @@media (max-width: 768px) {
            .filters-bar {
                flex-direction: column;
                align-items: stretch;
                gap: 0.75rem;
            }
        }

        .date-filter {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .form-control {
            padding: 0.5rem;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            font-size: 0.875rem;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1.5rem;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }
    </style>
}

<div class="main-content">
    <div class="dashboard-content">
        <!-- Supplier Header -->
        <div class="supplier-header">
            <div style="display: flex; justify-content: space-between; align-items: flex-start; flex-wrap: wrap; gap: 1rem;">
                <div>
                    <h1 style="margin: 0 0 0.5rem 0; font-size: 2rem;">@Model.CompanyName</h1>
                    <p style="margin: 0; opacity: 0.9;">Contact: @Model.ContactPerson</p>
                </div>
                <div style="display: flex; gap: 1rem; flex-wrap: wrap;">
                    <button class="btn btn-secondary" onclick="window.history.back()">
                        <i class="fas fa-arrow-left"></i> Back
                    </button>
                </div>
            </div>
            
            <div class="supplier-info">
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Contact Information</h3>
                    <p><i class="fas fa-envelope"></i> @Model.Email</p>
                    <p><i class="fas fa-phone"></i> @Model.Phone</p>
                    @if (!string.IsNullOrEmpty(Model.Address))
                    {
                        <p><i class="fas fa-map-marker-alt"></i> @Model.Address</p>
                    }
                </div>
                <div class="info-card">
                    <h3 style="margin: 0 0 1rem 0;">Statistics</h3>
                    <p>Total Items: <strong>@Model.TotalItems</strong></p>
                    <p>Total Value: <strong>KSh @Model.TotalValue.ToString("N2")</strong></p>
                    <p>Outstanding: <strong>KSh @Model.OutstandingAmount.ToString("N2")</strong></p>
                </div>
            </div>
        </div>

        <!-- Tabs Container -->
        <div class="tabs-container">
            <div class="tabs-nav">
                <button class="tab-btn active" onclick="showTab('items')">Supplied Items</button>
                <button class="tab-btn" onclick="showTab('invoices')">Invoices</button>
                <button class="tab-btn" onclick="showTab('payments')">Payments</button>
            </div>

            <!-- Products & Supplies Tab -->
            <div id="itemsTab" class="tab-content active">
                <div class="filters-bar">
                    <div class="date-filter">
                        <label>From:</label>
                        <input type="date" id="fromDate" class="form-control">
                    </div>
                    <div class="date-filter">
                        <label>To:</label>
                        <input type="date" id="toDate" class="form-control">
                    </div>
                    <select id="statusFilter" class="form-control">
                        <option value="">All Status</option>
                        <option value="Pending">Pending</option>
                        <option value="Invoiced">Invoiced</option>
                        <option value="Paid">Paid</option>
                        <option value="Settled">Settled</option>
                    </select>
                    <button class="btn btn-secondary" onclick="filterSupplies()">
                        <i class="fas fa-filter"></i> Filter
                    </button>
                </div>

                <!-- Products assigned to this supplier -->
                <div style="margin-bottom: 2rem;">
                    <h4>Products Assigned to Supplier</h4>
                    <div id="productsGrid" class="products-grid">
                        <!-- Products will be loaded here -->
                    </div>
                </div>

                <!-- Supply batches for all products -->
                <div>
                    <h4>Supply History & Batches</h4>
                    <div class="table-responsive">
                    <table class="items-table" id="suppliesTable">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selectAll" onchange="toggleSelectAll()"></th>
                                <th>Product</th>
                                <th>SKU</th>
                                <th>Batch</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                                <th>Supply Date</th>
                                <th>Payment Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="suppliesTableBody">
                            <!-- Supply batches will be loaded here -->
                        </tbody>
                    </table>
                </div>
                </div>
            </div>

            <!-- Invoices Tab -->
            <div id="invoicesTab" class="tab-content">
                <div class="section-header">
                    <h3>Supplier Invoices</h3>
                    <button class="btn btn-primary" onclick="generateInvoice()">
                        <i class="fas fa-plus"></i> New Invoice
                    </button>
                </div>
                <div class="table-responsive">
                    <table class="items-table" id="invoicesTable">
                        <thead>
                            <tr>
                                <th>Invoice #</th>
                                <th>Date</th>
                                <th>Items</th>
                                <th>Subtotal</th>
                                <th>Tax</th>
                                <th>Total</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="invoicesTableBody">
                            <!-- Invoices will be loaded here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Payments Tab -->
            <div id="paymentsTab" class="tab-content">
                <div class="section-header">
                    <h3>Payment Management</h3>
                    <div style="display: flex; gap: 0.5rem; flex-wrap: wrap;">
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('all')" id="allPaymentsBtn">
                            <i class="fas fa-list"></i> All
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('unpaid')" id="unpaidBtn">
                            <i class="fas fa-exclamation-circle"></i> Unpaid
                        </button>
                        <button class="btn btn-secondary btn-sm" onclick="togglePaymentView('paid')" id="paidBtn">
                            <i class="fas fa-check-circle"></i> Paid
                        </button>
                        <button class="btn btn-primary" onclick="openPaymentModal()">
                            <i class="fas fa-plus"></i> Record Payment
                        </button>
                    </div>
                </div>
                
                <!-- Unpaid Invoices Section -->
                <div id="unpaidInvoicesSection">
                    <h4 style="margin: 1.5rem 0 1rem 0; color: #dc2626;">
                        <i class="fas fa-exclamation-triangle"></i> Unpaid Invoices
                    </h4>
                    <div class="table-responsive">
                        <table class="items-table" id="unpaidInvoicesTable">
                            <thead>
                                <tr>
                                    <th><input type="checkbox" id="selectAllUnpaid" onchange="toggleSelectAllUnpaid()"></th>
                                    <th>Invoice #</th>
                                    <th>Date</th>
                                    <th>Amount</th>
                                    <th>Due Date</th>
                                    <th>Days Overdue</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="unpaidInvoicesTableBody">
                                <!-- Unpaid invoices will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                    <div style="margin: 1rem 0; text-align: right;">
                        <button class="btn btn-success" onclick="confirmSelectedPayments()">
                            <i class="fas fa-check"></i> Confirm Selected Payments
                        </button>
                    </div>
                </div>

                <!-- Payment History Section -->
                <div id="paymentHistorySection">
                    <h4 style="margin: 1.5rem 0 1rem 0; color: #059669;">
                        <i class="fas fa-history"></i> Payment History
                    </h4>
                    <div class="table-responsive">
                        <table class="items-table" id="paymentsTable">
                            <thead>
                                <tr>
                                    <th>Payment #</th>
                                    <th>Invoice</th>
                                    <th>Amount</th>
                                    <th>Method</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="paymentsTableBody">
                                <!-- Payments will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Supply Batch Modal -->
<div id="addItemModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Add Supply Batch</h2>
            <button onclick="closeAddItemModal()" style="background: none; border: none; color: white; font-size: 1.5rem;">×</button>
        </div>
        <div class="modal-body">
            <form id="addItemForm">
                <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1rem;">
                    <div>
                        <label>Product *</label>
                        <select id="productId" class="form-control" required>
                            <option value="">Select Product</option>
                        </select>
                    </div>
                    <div>
                        <label>Quantity Supplied *</label>
                        <input type="number" id="quantitySupplied" class="form-control" required min="1">
                    </div>
                    <div>
                        <label>Unit Cost (KSh) *</label>
                        <input type="number" id="unitCost" class="form-control" required min="0" step="0.01">
                    </div>
                    <div>
                        <label>Batch Number</label>
                        <input type="text" id="batchNumber" class="form-control">
                    </div>
                    <div>
                        <label>Supply Date *</label>
                        <input type="date" id="supplyDate" class="form-control" required>
                    </div>
                    <div>
                        <label>Expiry Date</label>
                        <input type="date" id="expiryDate" class="form-control">
                    </div>
                </div>
                <div style="margin-top: 1rem;">
                    <label>Notes</label>
                    <textarea id="notes" class="form-control" rows="3"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeAddItemModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">Add Supply Batch</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        const supplierId = @Model.SupplierId;
        
        document.addEventListener('DOMContentLoaded', function() {
            loadSupplierItems();
            loadProducts();
            setupDateFilters();
        });

        function showTab(tabName) {
            // Hide all tabs
            document.querySelectorAll('.tab-content').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab
            document.getElementById(tabName + 'Tab').classList.add('active');
            event.target.classList.add('active');
            
            // Load data for the selected tab
            switch(tabName) {
                case 'items':
                    loadSupplierProducts();
                    break;
                case 'invoices':
                    loadSupplierInvoices();
                    break;
                case 'payments':
                    loadPaymentData();
                    break;
            }
        }

        // Updated to use new API endpoints
        function filterSupplies() {
            loadSupplierSupplies();
        }

        function displayProducts(products) {
            const grid = document.getElementById('productsGrid');
            grid.innerHTML = '';
            
            if (!products || products.length === 0) {
                grid.innerHTML = `
                    <div style="text-align: center; padding: 2rem; color: #64748b; grid-column: 1 / -1;">
                        <i class="fas fa-box-open" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                        <h3>No products assigned</h3>
                        <p>No products are currently assigned to this supplier.</p>
                    </div>
                `;
                return;
            }
            
            products.forEach(product => {
                const card = document.createElement('div');
                card.className = 'product-card';
                card.innerHTML = `
                    <div class="product-header">
                        <div class="product-info">
                            <h5>${product.name || product.productName}</h5>
                            <div class="product-meta">
                                <span><strong>SKU:</strong> ${product.sku || 'N/A'}</span>
                                <span><strong>Category:</strong> ${product.category || product.categoryName || 'N/A'}</span>
                                <span><strong>Current Stock:</strong> ${product.stockQuantity || 0}</span>
                                <span><strong>Price:</strong> KSh ${(product.price || 0).toFixed(2)}</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-delivery-form">
                        <div class="form-row">
                            <div class="form-group">
                                <label>Quantity Delivered</label>
                                <input type="number" 
                                       id="quantity_${product.productId}" 
                                       min="0" 
                                       value="${product.stockQuantity || 0}"
                                       placeholder="Enter quantity"
                                       class="form-control">
                            </div>
                            <div class="form-group">
                                <label>Unit Cost (KSh)</label>
                                <input type="number" 
                                       id="unitCost_${product.productId}" 
                                       min="0" 
                                       step="0.01"
                                       value="${product.buyingPrice || product.price || 0}"
                                       placeholder="0.00"
                                       class="form-control">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label>Batch Number</label>
                                <input type="text" 
                                       id="batch_${product.productId}" 
                                       placeholder="Optional"
                                       class="form-control">
                            </div>
                            <div class="form-group">
                                <label>Supply Date</label>
                                <input type="date" 
                                       id="supplyDate_${product.productId}" 
                                       value="${new Date().toISOString().split('T')[0]}"
                                       class="form-control">
                            </div>
                        </div>
                    </div>
                    
                    <div class="product-actions">
                        <button class="btn-reject" onclick="rejectProduct(${product.productId})">
                            <i class="fas fa-times"></i> Reject
                        </button>
                        <button class="btn-confirm" onclick="confirmProduct(${product.productId})">
                            <i class="fas fa-check"></i> Confirm
                        </button>
                    </div>
                `;
                grid.appendChild(card);
            });
        }

        function displaySupplies(supplies) {
            const tbody = document.getElementById('suppliesTableBody');
            tbody.innerHTML = '';
            
            supplies.forEach(supply => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><input type="checkbox" class="supply-checkbox" value="${supply.supplierProductSupplyId}"></td>
                    <td>${supply.productName}</td>
                    <td>${supply.productId}</td>
                    <td>${supply.batchNumber || '-'}</td>
                    <td>${supply.quantitySupplied}</td>
                    <td>KSh ${supply.unitCost.toFixed(2)}</td>
                    <td>KSh ${supply.totalCost.toFixed(2)}</td>
                    <td>${new Date(supply.supplyDate).toLocaleDateString()}</td>
                    <td><span class="status-badge status-${supply.paymentStatus.toLowerCase()}">${supply.paymentStatus}</span></td>
                    <td>
                        <button class="btn btn-sm btn-info" onclick="viewSupplyDetails(${supply.supplierProductSupplyId})" title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadProductsForSupplier() {
            try {
                const response = await fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    const select = document.getElementById('productId');
                    select.innerHTML = '<option value="">Select Product</option>';
                    
                    data.products.forEach(product => {
                        const option = document.createElement('option');
                        option.value = product.productId;
                        option.textContent = `${product.productName} (${product.sku})`;
                        select.appendChild(option);
                    });
                }
            } catch (error) {
                console.error('Error loading products:', error);
            }
        }

        function setupDateFilters() {
            const today = new Date();
            const thirtyDaysAgo = new Date(today.getTime() - (30 * 24 * 60 * 60 * 1000));
            
            document.getElementById('fromDate').value = thirtyDaysAgo.toISOString().split('T')[0];
            document.getElementById('toDate').value = today.toISOString().split('T')[0];
        }

        function toggleSelectAll() {
            const selectAll = document.getElementById('selectAll');
            const checkboxes = document.querySelectorAll('.supply-checkbox');
            checkboxes.forEach(cb => cb.checked = selectAll.checked);
        }

        function openAddItemModal() {
            document.getElementById('addItemModal').style.display = 'block';
            loadProductsForSupplier();
            // Set default supply date to today
            document.getElementById('supplyDate').value = new Date().toISOString().split('T')[0];
        }

        function closeAddItemModal() {
            document.getElementById('addItemModal').style.display = 'none';
            document.getElementById('addItemForm').reset();
        }

        // Individual product confirmation function
        async function confirmProduct(productId) {
            const quantityInput = document.getElementById(`quantity_${productId}`);
            const unitCostInput = document.getElementById(`unitCost_${productId}`);
            const batchInput = document.getElementById(`batch_${productId}`);
            const supplyDateInput = document.getElementById(`supplyDate_${productId}`);
            
            const quantity = parseInt(quantityInput.value) || 0;
            const unitCost = parseFloat(unitCostInput.value) || 0;
            const batchNumber = batchInput.value || '';
            const supplyDate = supplyDateInput.value;
            
            if (quantity <= 0) {
                alert('Please enter a valid quantity.');
                quantityInput.focus();
                return;
            }
            
            if (unitCost <= 0) {
                alert('Please enter a valid unit cost.');
                unitCostInput.focus();
                return;
            }
            
            if (!supplyDate) {
                alert('Please select a supply date.');
                supplyDateInput.focus();
                return;
            }
            
            try {
                // Disable buttons to prevent double submission
                const confirmBtn = event.target;
                const rejectBtn = confirmBtn.parentElement.querySelector('.btn-reject');
                confirmBtn.disabled = true;
                rejectBtn.disabled = true;
                confirmBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Processing...';
                
                // Create supply record and automatically generate invoice
                const supplyResponse = await fetch('/Admin/AcceptSupplierDelivery', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        deliveryDate: supplyDate,
                        notes: `Product confirmed: ${quantity} units at KSh ${unitCost} each`,
                        productDeliveries: [{
                            productId: productId,
                            quantity: quantity,
                            unitCost: unitCost,
                            batchNumber: batchNumber,
                            expiryDate: null
                        }]
                    })
                });

                const supplyResult = await supplyResponse.json();
                
                if (supplyResult.success) {
                    // Automatically generate invoice for this supply
                    const invoiceResponse = await fetch('/Admin/GenerateSupplierInvoiceForPending', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ supplierId: supplierId })
                    });

                    const invoiceResult = await invoiceResponse.json();
                    
                    if (invoiceResult.success) {
                        // Update button to show success
                        confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirmed';
                        confirmBtn.className = 'btn-confirm';
                        confirmBtn.style.background = '#059669';
                        
                        // Update supply status in the table
                        updateSupplyStatus(productId, 'Confirmed');
                        
                        // Hide reject button
                        rejectBtn.style.display = 'none';
                        
                        // Disable form inputs
                        quantityInput.disabled = true;
                        unitCostInput.disabled = true;
                        batchInput.disabled = true;
                        supplyDateInput.disabled = true;
                        
                        // Show success message
                        showToast(`Product confirmed and invoiced successfully!\\nInvoice: ${invoiceResult.invoiceNumber}\\nAmount: KSh ${invoiceResult.totalAmount.toFixed(2)}`, 'success');
                        
                        // Refresh other tabs
                        loadSupplierSupplies();
                        loadSupplierInvoices();
                    } else {
                        // Supply created but invoice failed
                        confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirmed (Invoice Pending)';
                        confirmBtn.style.background = '#f59e0b';
                        rejectBtn.style.display = 'none';
                        
                        showToast(`Product confirmed successfully!\\nInvoice generation pending - check Invoices tab.`, 'warning');
                    }
                } else {
                    // Re-enable buttons on error
                    confirmBtn.disabled = false;
                    rejectBtn.disabled = false;
                    confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm';
                    
                    showToast('Error confirming product: ' + supplyResult.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming product:', error);
                
                // Re-enable buttons on error
                confirmBtn.disabled = false;
                rejectBtn.disabled = false;
                confirmBtn.innerHTML = '<i class="fas fa-check"></i> Confirm';
                
                showToast('Error confirming product. Please try again.', 'error');
            }
        }

        // Individual product rejection function
        function rejectProduct(productId) {
            if (!confirm('Are you sure you want to reject this product delivery?')) {
                return;
            }
            
            const productCard = document.querySelector(`#quantity_${productId}`).closest('.product-card');
            const confirmBtn = productCard.querySelector('.btn-confirm');
            const rejectBtn = productCard.querySelector('.btn-reject');
            
            // Update UI to show rejected state
            confirmBtn.style.display = 'none';
            rejectBtn.innerHTML = '<i class="fas fa-times"></i> Rejected';
            rejectBtn.style.background = '#6b7280';
            rejectBtn.disabled = true;
            
            // Disable form inputs
            const inputs = productCard.querySelectorAll('input');
            inputs.forEach(input => {
                input.disabled = true;
                input.style.background = '#f3f4f6';
            });
            
            // Add visual indication
            productCard.style.opacity = '0.6';
            productCard.style.border = '2px solid #ef4444';
            
            showToast('Product delivery rejected.', 'info');
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                color: white;
                font-weight: 500;
                z-index: 10000;
                max-width: 400px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                animation: slideIn 0.3s ease;
            `;
            
            const colors = {
                success: '#10b981',
                error: '#ef4444',
                warning: '#f59e0b',
                info: '#3b82f6'
            };
            
            toast.style.background = colors[type] || colors.info;
            toast.innerHTML = `
                <div style="display: flex; align-items: center; gap: 0.5rem;">
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
                    <span>${message}</span>
                </div>
            `;
            
            document.body.appendChild(toast);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.style.animation = 'slideOut 0.3s ease';
                setTimeout(() => {
                    if (toast.parentNode) {
                        toast.parentNode.removeChild(toast);
                    }
                }, 300);
            }, 5000);
        }

        // Add CSS animations for toast
        const style = document.createElement('style');
        style.textContent = `
            @@keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @@keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // Function to update supply status in the table
        function updateSupplyStatus(productId, status) {
            // This will be called after confirmation to update the supplies table
            loadSupplierSupplies();
        }

        // Payment view toggle functionality
        let currentPaymentView = 'all';
        
        function togglePaymentView(view) {
            currentPaymentView = view;
            
            // Update button states
            document.querySelectorAll('#paymentsTab .btn-sm').forEach(btn => {
                btn.classList.remove('btn-primary');
                btn.classList.add('btn-secondary');
            });
            
            const activeBtn = document.getElementById(view === 'all' ? 'allPaymentsBtn' : view === 'unpaid' ? 'unpaidBtn' : 'paidBtn');
            activeBtn.classList.remove('btn-secondary');
            activeBtn.classList.add('btn-primary');
            
            // Show/hide sections based on view
            const unpaidSection = document.getElementById('unpaidInvoicesSection');
            const historySection = document.getElementById('paymentHistorySection');
            
            switch(view) {
                case 'all':
                    unpaidSection.style.display = 'block';
                    historySection.style.display = 'block';
                    break;
                case 'unpaid':
                    unpaidSection.style.display = 'block';
                    historySection.style.display = 'none';
                    break;
                case 'paid':
                    unpaidSection.style.display = 'none';
                    historySection.style.display = 'block';
                    break;
            }
            
            // Load appropriate data
            loadPaymentData();
        }

        function toggleSelectAllUnpaid() {
            const selectAll = document.getElementById('selectAllUnpaid');
            const checkboxes = document.querySelectorAll('.unpaid-invoice-checkbox');
            
            checkboxes.forEach(checkbox => {
                checkbox.checked = selectAll.checked;
            });
        }

        async function confirmSelectedPayments() {
            const selectedInvoices = Array.from(document.querySelectorAll('.unpaid-invoice-checkbox:checked')).map(cb => ({
                invoiceId: parseInt(cb.dataset.invoiceId),
                amount: parseFloat(cb.dataset.amount)
            }));
            
            if (selectedInvoices.length === 0) {
                showToast('Please select invoices to confirm payment', 'warning');
                return;
            }
            
            const totalAmount = selectedInvoices.reduce((sum, inv) => sum + inv.amount, 0);
            
            if (!confirm(`Confirm payment for ${selectedInvoices.length} invoice(s)?\\nTotal Amount: KSh ${totalAmount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: selectedInvoices.map(inv => inv.invoiceId),
                        paymentMethod: 'Cash', // Default method
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: `Bulk payment confirmation for ${selectedInvoices.length} invoices`
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Payment confirmed successfully!\\n${selectedInvoices.length} invoices marked as paid\\nTotal: KSh ${totalAmount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices(); // Refresh invoices tab
                } else {
                    showToast('Error confirming payments: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming payments:', error);
                showToast('Error confirming payments. Please try again.', 'error');
            }
        }

        async function loadPaymentData() {
            await Promise.all([
                loadUnpaidInvoices(),
                loadSupplierPayments()
            ]);
        }

        async function loadUnpaidInvoices() {
            try {
                const response = await fetch(`/Admin/GetSupplierUnpaidInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                
                if (data.success) {
                    displayUnpaidInvoices(data.invoices || []);
                } else {
                    console.error('Error loading unpaid invoices:', data.message);
                }
            } catch (error) {
                console.error('Error loading unpaid invoices:', error);
            }
        }

        function displayUnpaidInvoices(invoices) {
            const tbody = document.getElementById('unpaidInvoicesTableBody');
            tbody.innerHTML = '';
            
            if (!invoices || invoices.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="7" style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-check-circle" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <br>All invoices are paid up!
                        </td>
                    </tr>
                `;
                return;
            }
            
            invoices.forEach(invoice => {
                const dueDate = new Date(invoice.dueDate);
                const today = new Date();
                const daysOverdue = Math.max(0, Math.floor((today - dueDate) / (1000 * 60 * 60 * 24)));
                const isOverdue = daysOverdue > 0;
                
                const row = document.createElement('tr');
                if (isOverdue) {
                    row.style.backgroundColor = '#fef2f2';
                    row.style.borderLeft = '4px solid #dc2626';
                }
                
                row.innerHTML = `
                    <td>
                        <input type="checkbox" 
                               class="unpaid-invoice-checkbox" 
                               data-invoice-id="${invoice.invoiceId}"
                               data-amount="${invoice.totalAmount}">
                    </td>
                    <td><strong>${invoice.invoiceNumber}</strong></td>
                    <td>${new Date(invoice.invoiceDate).toLocaleDateString()}</td>
                    <td><strong>KSh ${invoice.totalAmount.toFixed(2)}</strong></td>
                    <td>${dueDate.toLocaleDateString()}</td>
                    <td>
                        ${isOverdue ? 
                            `<span style="color: #dc2626; font-weight: bold;">${daysOverdue} days</span>` : 
                            '<span style="color: #059669;">On time</span>'
                        }
                    </td>
                    <td>
                        <button class="btn btn-success btn-sm" onclick="confirmSinglePayment(${invoice.invoiceId}, ${invoice.totalAmount})">
                            <i class="fas fa-check"></i> Pay
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function confirmSinglePayment(invoiceId, amount) {
            if (!confirm(`Confirm payment for this invoice?\\nAmount: KSh ${amount.toFixed(2)}`)) {
                return;
            }
            
            try {
                const response = await fetch('/Admin/ConfirmSupplierPayments', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierId: supplierId,
                        invoiceIds: [invoiceId],
                        paymentMethod: 'Cash',
                        paymentDate: new Date().toISOString().split('T')[0],
                        notes: `Single invoice payment confirmation`
                    })
                });

                const result = await response.json();
                
                if (result.success) {
                    showToast(`Payment confirmed successfully!\\nAmount: KSh ${amount.toFixed(2)}`, 'success');
                    loadPaymentData();
                    loadSupplierInvoices();
                } else {
                    showToast('Error confirming payment: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error confirming payment:', error);
                showToast('Error confirming payment. Please try again.', 'error');
            }
        }

        async function generateInvoice() {
            const selectedSupplies = Array.from(document.querySelectorAll('.supply-checkbox:checked')).map(cb => parseInt(cb.value));
            
            if (selectedSupplies.length === 0) {
                showToast('Please select supply batches to invoice', 'warning');
                return;
            }

            try {
                const response = await fetch('/Admin/GenerateSupplierInvoice', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ supplierId: supplierId, supplyIds: selectedSupplies })
                });

                const result = await response.json();
                if (result.success) {
                    showToast(`Invoice ${result.invoiceNumber} generated successfully!\\nAmount: KSh ${result.totalAmount.toFixed(2)}`, 'success');
                    loadSupplierSupplies();
                    loadSupplierInvoices();
                    showTab('invoices');
                } else {
                    showToast('Error generating invoice: ' + result.message, 'error');
                }
            } catch (error) {
                console.error('Error generating invoice:', error);
                showToast('Error generating invoice. Please try again.', 'error');
            }
        }

        document.getElementById('addItemForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = {
                supplierId: supplierId,
                productId: parseInt(document.getElementById('productId').value),
                quantitySupplied: parseInt(document.getElementById('quantitySupplied').value),
                unitCost: parseFloat(document.getElementById('unitCost').value),
                batchNumber: document.getElementById('batchNumber').value,
                supplyDate: document.getElementById('supplyDate').value,
                expiryDate: document.getElementById('expiryDate').value || null,
                notes: document.getElementById('notes').value
            };

            try {
                const response = await fetch('/Admin/AddSupplierProductSupply', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();
                if (result.success) {
                    closeAddItemModal();
                    loadSupplierProducts();
                    alert('Supply batch added successfully');
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error adding supply batch:', error);
                alert('Error adding supply batch');
            }
        });

        function loadSupplierProducts() {
            fetch(`/Admin/GetSupplierProducts?supplierId=${supplierId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayProducts(data.products);
                        loadSupplierSupplies(); // Load supplies separately
                    } else {
                        showAlert('Error loading products: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading products', 'error');
                });
        }

        function loadSupplierSupplies() {
            const fromDate = document.getElementById('fromDate').value;
            const toDate = document.getElementById('toDate').value;
            const status = document.getElementById('statusFilter').value;

            let url = `/Admin/GetSupplierProductSupplies?supplierId=${supplierId}`;
            const params = new URLSearchParams();
            
            if (fromDate) params.append('fromDate', fromDate);
            if (toDate) params.append('toDate', toDate);
            if (status) params.append('status', status);
            
            if (params.toString()) {
                url += '&' + params.toString();
            }

            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displaySupplies(data.supplies);
                    } else {
                        showAlert('Error loading supplies: ' + data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showAlert('Error loading supplies', 'error');
                });
        }

        // Additional functions for invoice and payment management
        async function loadSupplierInvoices() {
            try {
                const response = await fetch(`/Admin/GetSupplierInvoices?supplierId=${supplierId}`);
                const data = await response.json();
                if (data.success) {
                    displayInvoices(data.invoices);
                }
            } catch (error) {
                console.error('Error loading invoices:', error);
            }
        }

        function displayInvoices(invoices) {
            const tbody = document.getElementById('invoicesTableBody');
            tbody.innerHTML = '';
            
            invoices.forEach(invoice => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${invoice.invoiceNumber}</td>
                    <td>${new Date(invoice.invoiceDate).toLocaleDateString()}</td>
                    <td>${new Date(invoice.dueDate).toLocaleDateString()}</td>
                    <td>KSh ${invoice.totalAmount.toFixed(2)}</td>
                    <td>KSh ${invoice.amountPaid.toFixed(2)}</td>
                    <td>KSh ${invoice.amountDue.toFixed(2)}</td>
                    <td><span class="status-badge status-${invoice.status.toLowerCase()}">${invoice.status}</span></td>
                    <td>
                        <button class="btn btn-sm btn-success" onclick="recordPayment(${invoice.supplierInvoiceId})" ${invoice.amountDue <= 0 ? 'disabled' : ''}>
                            <i class="fas fa-money-bill"></i> Pay
                        </button>
                        <button class="btn btn-sm btn-info" onclick="viewInvoice(${invoice.supplierInvoiceId})">
                            <i class="fas fa-eye"></i>
                        </button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function loadSupplierPayments() {
            try {
                const response = await fetch(`/Admin/GetSupplierPayments?supplierId=${supplierId}`);
                const data = await response.json();
                if (data.success) {
                    displayPayments(data.payments);
                }
            } catch (error) {
                console.error('Error loading payments:', error);
            }
        }

        function displayPayments(payments) {
            const tbody = document.getElementById('paymentsTableBody');
            tbody.innerHTML = '';
            
            payments.forEach(payment => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${payment.invoiceNumber}</td>
                    <td>${payment.paymentReference}</td>
                    <td>KSh ${payment.amount.toFixed(2)}</td>
                    <td>${payment.paymentMethod}</td>
                    <td>${new Date(payment.paymentDate).toLocaleDateString()}</td>
                    <td><span class="status-badge status-${payment.status.toLowerCase()}">${payment.status}</span></td>
                    <td>${payment.processedByUser}</td>
                `;
                tbody.appendChild(row);
            });
        }

        function recordPayment(invoiceId) {
            // This would open a payment modal - simplified for now
            const amount = prompt('Enter payment amount:');
            const paymentMethod = prompt('Enter payment method (Cash/Bank/Cheque):') || 'Cash';
            
            if (amount && !isNaN(amount) && parseFloat(amount) > 0) {
                submitPayment(invoiceId, parseFloat(amount), paymentMethod);
            }
        }

        async function submitPayment(invoiceId, amount, paymentMethod) {
            try {
                const response = await fetch('/Admin/RecordSupplierPayment', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        supplierInvoiceId: invoiceId,
                        amount: amount,
                        paymentMethod: paymentMethod,
                        paymentDate: new Date().toISOString(),
                        notes: 'Payment recorded via supplier details'
                    })
                });

                const result = await response.json();
                if (result.success) {
                    alert(`Payment recorded successfully. Remaining amount: KSh ${result.remainingAmount.toFixed(2)}`);
                    loadSupplierInvoices();
                    loadSupplierPayments();
                    loadSupplierSupplies(); // Refresh supplies to show updated payment status
                } else {
                    alert('Error: ' + result.message);
                }
            } catch (error) {
                console.error('Error recording payment:', error);
                alert('Error recording payment');
            }
        }

        function viewSupplyDetails(supplyId) {
            // Placeholder for supply details modal
            alert('Supply details view - to be implemented');
        }

        function viewInvoice(invoiceId) {
            // Placeholder for invoice details modal
            alert('Invoice details view - to be implemented');
        }

        function showAlert(message, type) {
            alert(message); // Simple alert for now, can be enhanced with better UI
        }

        // Initialize the page
        document.addEventListener('DOMContentLoaded', function() {
            setupDateFilters();
            loadSupplierProducts(); // Load initial data
        });
    </script>
}
