@model List<PixelSolution.ViewModels.DepartmentListViewModel>
@{
    ViewData["Title"] = "Departments Management - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .departments-container {
            padding: 1.5rem;
            background: #f8fafc;
            min-height: calc(100vh - 120px);
        }

        .page-header {
            background: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            border-left: 4px solid #3b82f6;
        }

        .header-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header-title {
            margin: 0;
            font-size: 1.75rem;
            font-weight: 700;
            color: #1f2937;
        }

        .header-subtitle {
            color: #6b7280;
            margin: 0.5rem 0 0 0;
        }

        .header-actions {
            display: flex;
            gap: 1rem;
            align-items: center;
        }

        .btn-add {
            background: linear-gradient(135deg, #3b82f6, #2563eb);
            color: white;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

            .btn-add:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
                color: white;
                text-decoration: none;
            }

        .search-container {
            position: relative;
        }

        .search-input {
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            width: 300px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #9ca3af;
            font-size: 1rem;
        }

        .departments-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .department-card {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border: 1px solid #e5e7eb;
            position: relative;
            overflow: hidden;
        }

            .department-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 4px;
                height: 100%;
                background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            }

            .department-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }

        .department-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 1rem;
        }

        .department-name {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .department-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            width: 32px;
            height: 32px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s ease;
            font-size: 0.875rem;
        }

            .action-btn.edit {
                background: #fef3c7;
                color: #92400e;
            }

                .action-btn.edit:hover {
                    background: #f59e0b;
                    color: white;
                    transform: translateY(-1px);
                }

            .action-btn.delete {
                background: #fee2e2;
                color: #dc2626;
            }

                .action-btn.delete:hover {
                    background: #ef4444;
                    color: white;
                    transform: translateY(-1px);
                }

        .department-description {
            color: #6b7280;
            font-size: 0.875rem;
            line-height: 1.5;
            margin-bottom: 1.5rem;
            min-height: 3rem;
        }

        .department-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .stat-item {
            text-align: center;
            padding: 1rem;
            background: #f8fafc;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
            transition: all 0.3s ease;
        }

        .stat-item:hover {
            background: #f1f5f9;
        }

        .stat-value {
            font-size: 1.5rem;
            font-weight: 700;
            color: #3b82f6;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            font-size: 0.75rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .department-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 0.75rem;
            color: #9ca3af;
            border-top: 1px solid #f3f4f6;
            padding-top: 1rem;
        }

        .created-date {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .user-count {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(5px);
            opacity: 0;
            transition: all 0.3s ease;
        }

        .modal.show {
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 1;
        }

        .modal.show .modal-content {
            transform: translateY(0) scale(1);
        }

        .modal-content {
            background: white;
            margin: auto;
            padding: 2rem;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 40px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease-out;
        }

        @@keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #1f2937;
            margin: 0;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6b7280;
            padding: 0;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .close-btn:hover {
            background: #f3f4f6;
            color: #374151;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
            font-size: 0.875rem;
        }

        .form-input {
            width: 100%;
            padding: 0.875rem 1rem;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: #f8fafc;
            box-sizing: border-box;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
            background: white;
            transform: translateY(-1px);
        }

        .form-input:hover {
            border-color: #9ca3af;
        }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
            font-family: inherit;
        }

        .modal-buttons {
            display: flex;
            gap: 1rem;
            justify-content: flex-end;
            margin-top: 2rem;
            padding-top: 1.5rem;
            border-top: 1px solid #f3f4f6;
        }

        .btn {
            padding: 0.875rem 1.75rem;
            border: none;
            border-radius: 10px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .btn-primary {
            background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%);
            color: white;
        }

        .btn-primary:hover {
            background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        }

        .btn-secondary {
            background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
            color: white;
        }

        .btn-secondary:hover {
            background: linear-gradient(135deg, #4b5563 0%, #374151 100%);
        }

            .btn-secondary:hover {
                background: #4b5563;
            }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6b7280;
            grid-column: 1 / -1;
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 1rem;
                opacity: 0.3;
            }

            .empty-state h3 {
                margin-bottom: 0.5rem;
                color: #374151;
            }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            opacity: 0;
            transform: translateX(100%);
            transition: all 0.3s ease;
        }

            .toast.show {
                opacity: 1;
                transform: translateX(0);
            }

            .toast.success {
                background: #10b981;
            }

            .toast.error {
                background: #ef4444;
            }

            .toast.info {
                background: #3b82f6;
            }

        /* Responsive Design */
            @@media (max-width: 768px) {
            .departments-container

        {
            padding: 1rem;
        }

        .header-content {
            flex-direction: column;
            align-items: flex-start;
        }

        .header-actions {
            width: 100%;
            justify-content: space-between;
        }

        .search-input {
            width: 100%;
        }

        .departments-grid {
            grid-template-columns: 1fr;
        }

        .department-stats {
            grid-template-columns: 1fr 1fr;
            gap: 0.5rem;
        }

        .modal-content {
            width: 95%;
            margin: 1rem;
        }

        .page-header {
            padding: 1rem;
        }

        }

            @@media (max-width: 480px) {
            .stat-item

        {
            padding: 0.75rem;
        }

        .stat-value {
            font-size: 1.25rem;
        }

        .department-card {
            padding: 1rem;
        }

        }
    </style>
}


<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link active">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("CartManagement", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-basket"></i>
                    Cart Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("WishlistManagement", "Admin")" class="nav-link">
                    <i class="fas fa-heart"></i>
                    Wishlist Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>


<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Departments Management</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search departments..." id="headerSearch">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <div class="departments-container">
        <!-- Page Header -->
        <div class="page-header">
            <div class="header-content">
                <div>
                    <h1 class="header-title">Departments Management</h1>
                    <p class="header-subtitle">Organize your team structure and manage department assignments</p>
                </div>
                <div class="header-actions">
                    <div class="search-container">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" class="search-input" placeholder="Search departments..." id="departmentSearch">
                    </div>
                    <button class="btn-add" onclick="openCreateModal()">
                        <i class="fas fa-plus"></i>
                        Add Department
                    </button>
                </div>
            </div>
        </div>

        <!-- Departments Grid -->
        <div class="departments-grid" id="departmentsGrid">
            @if (Model != null && Model.Any())
            {
                @foreach (var department in Model)
                {
                    <div class="department-card" data-department-id="@department.DepartmentId">
                        <div class="department-header">
                            <h3 class="department-name">@department.Name</h3>
                            <div class="department-actions">
                                <button class="action-btn edit" onclick="openEditModal(@department.DepartmentId, '@Html.Raw(Html.Encode(department.Name))', '@Html.Raw(Html.Encode(department.Description ?? ""))')" title="Edit Department">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="action-btn delete" onclick="deleteDepartment(@department.DepartmentId, '@Html.Raw(Html.Encode(department.Name))')" title="Delete Department">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>

                        <div class="department-description">
                            @(string.IsNullOrEmpty(department.Description) ? "No description provided" : department.Description)
                        </div>

                        <div class="department-stats">
                            <div class="stat-item">
                                <div class="stat-value">@department.UserCount</div>
                                <div class="stat-label">Total Users</div>
                            </div>
                            <div class="stat-item">
                                <div class="stat-value">@department.ActiveUserCount</div>
                                <div class="stat-label">Active Users</div>
                            </div>
                        </div>

                        <div class="department-meta">
                            <div class="created-date">
                                <i class="fas fa-calendar-alt"></i>
                                Created @department.CreatedAt.ToString("MMM dd, yyyy")
                            </div>
                            <div class="user-count">
                                <i class="fas fa-users"></i>
                                @department.UserCount members
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-building"></i>
                    <h3>No Departments Found</h3>
                    <p>Start by creating your first department to organize your team structure.</p>
                    <button class="btn-add" onclick="openCreateModal()" style="margin-top: 1rem;">
                        <i class="fas fa-plus"></i>
                        Create First Department
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit Department Modal -->
<div id="departmentModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 class="modal-title" id="modalTitle">Add Department</h2>
            <button class="close-btn" onclick="closeModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <form id="departmentForm">
            <input type="hidden" id="departmentId" value="0">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label for="departmentName" class="form-label">Department Name *</label>
                <input type="text" id="departmentName" class="form-input" placeholder="e.g., Human Resources" required>
            </div>

            <div class="form-group">
                <label for="departmentDescription" class="form-label">Description</label>
                <textarea id="departmentDescription" class="form-input form-textarea" placeholder="Brief description of the department's role and responsibilities..."></textarea>
            </div>

            <div class="modal-buttons">
                <button type="button" class="btn btn-secondary" onclick="closeModal()">Cancel</button>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-save"></i>
                    Save Department
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        let currentDepartmentId = 0;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            setupSearchFunctionality();
            setupFormSubmission();
            setupKeyboardShortcuts();
        });

        // Search functionality
        function setupSearchFunctionality() {
            const searchInputs = ['departmentSearch', 'headerSearch'];
            searchInputs.forEach(inputId => {
                const searchInput = document.getElementById(inputId);
                if (searchInput) {
                    searchInput.addEventListener('input', function() {
                        const searchTerm = this.value.toLowerCase();
                        const departmentCards = document.querySelectorAll('.department-card');

                        departmentCards.forEach(card => {
                            const departmentName = card.querySelector('.department-name').textContent.toLowerCase();
                            const description = card.querySelector('.department-description').textContent.toLowerCase();

                            if (departmentName.includes(searchTerm) || description.includes(searchTerm)) {
                                card.style.display = 'block';
                            } else {
                                card.style.display = 'none';
                            }
                        });

                        // Sync search inputs
                        searchInputs.forEach(id => {
                            const input = document.getElementById(id);
                            if (input && input !== this) {
                                input.value = this.value;
                            }
                        });
                    });
                }
            });
        }

        // Keyboard shortcuts
        function setupKeyboardShortcuts() {
            document.addEventListener('keydown', function(e) {
                // Escape key to close modal
                if (e.key === 'Escape') {
                    closeModal();
                }

                // Ctrl+N to create new department
                if (e.ctrlKey && e.key === 'n') {
                    e.preventDefault();
                    openCreateModal();
                }
            });
        }

        // Form submission
        function setupFormSubmission() {
            const form = document.getElementById('departmentForm');
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                saveDepartment();
            });
        }

        // Modal functions
        function openCreateModal() {
            currentDepartmentId = 0;
            document.getElementById('modalTitle').textContent = 'Add Department';
            document.getElementById('departmentId').value = '0';
            document.getElementById('departmentName').value = '';
            document.getElementById('departmentDescription').value = '';
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save"></i> Save Department';
            document.getElementById('departmentModal').classList.add('show');
            document.getElementById('departmentName').focus();
        }

        function openEditModal(id, name, description) {
            currentDepartmentId = id;
            document.getElementById('modalTitle').textContent = 'Edit Department';
            document.getElementById('departmentId').value = id;
            document.getElementById('departmentName').value = name;
            document.getElementById('departmentDescription').value = description || '';
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save"></i> Update Department';
            document.getElementById('departmentModal').classList.add('show');
            document.getElementById('departmentName').focus();
        }

        function closeModal() {
            document.getElementById('departmentModal').classList.remove('show');
            currentDepartmentId = 0;
        }

        // Form submission handler
        document.getElementById('departmentForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const departmentId = document.getElementById('departmentId').value;
            const departmentName = document.getElementById('departmentName').value.trim();
            const departmentDescription = document.getElementById('departmentDescription').value.trim();
            
            console.log('Form submission started:', {
                departmentId: departmentId,
                departmentName: departmentName,
                departmentDescription: departmentDescription
            });
            
            // Client-side validation
            if (!departmentName) {
                console.error('Validation failed: Department name is required');
                showToast('Department name is required', 'error');
                return;
            }
            
            if (departmentName.length > 100) {
                console.error('Validation failed: Department name too long');
                showToast('Department name cannot exceed 100 characters', 'error');
                return;
            }
            
            if (departmentDescription.length > 500) {
                console.error('Validation failed: Description too long');
                showToast('Description cannot exceed 500 characters', 'error');
                return;
            }
            
            // Get CSRF token
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            console.log('CSRF token found:', token ? 'Yes' : 'No');
            
            const isEdit = departmentId && departmentId !== '0';
            const url = isEdit ? '/Admin/UpdateDepartment' : '/Admin/CreateDepartment';
            
            // Create FormData object to properly send data that matches the ViewModel
            const formData = new FormData();
            formData.append('Name', departmentName);
            formData.append('Description', departmentDescription);
            formData.append('__RequestVerificationToken', token);
            
            if (isEdit) {
                formData.append('DepartmentId', departmentId);
            }
            
            console.log('Sending request to:', url);
            console.log('Form data entries:');
            for (let [key, value] of formData.entries()) {
                console.log(`  ${key}: ${value}`);
            }
            
            fetch(url, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);
                return response.json();
            })
            .then(data => {
                console.log('Server response:', data);
                
                if (data.success) {
                    showToast(data.message, 'success');
                    closeModal();
                    location.reload();
                } else {
                    console.error('Server validation failed:', data);
                    showToast(data.message || 'Please provide valid department details', 'error');
                    
                    if (data.validationErrors) {
                        console.error('Detailed validation errors:', data.validationErrors);
                    }
                }
            })
            .catch(error => {
                console.error('Request failed:', error);
                showToast('An error occurred. Please try again.', 'error');
            });
        });

        // CRUD operations
        async function deleteDepartment(id, name) {
            if (!confirm(`Are you sure you want to delete the "${name}" department?\n\nThis action cannot be undone and will affect all users assigned to this department.`)) {
                return;
            }

            try {
                const response = await fetch('/Admin/DeleteDepartment', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({ id: id })
                });

                const data = await response.json();

                if (data.success) {
                    showToast(data.message, 'success');

                    // Remove the card with animation
                    const card = document.querySelector(`[data-department-id="${id}"]`);
                    if (card) {
                        card.style.opacity = '0';
                        card.style.transform = 'translateY(-20px)';
                        setTimeout(() => {
                            card.remove();

                            // Check if no departments left
                            if (document.querySelectorAll('.department-card').length === 0) {
                                setTimeout(() => window.location.reload(), 500);
                            }
                        }, 300);
                    }
                } else {
                    showToast(data.message, 'error');
                }
            } catch (error) {
                console.error('Error deleting department:', error);
                showToast('An error occurred while deleting the department', 'error');
            }
        }

        // Helper functions
        function getCSRFToken() {
            // Try to get CSRF token from form first
            const tokenInput = document.querySelector('#departmentForm input[name="__RequestVerificationToken"]');
            if (tokenInput && tokenInput.value) {
                console.log('CSRF token found in form:', tokenInput.value.substring(0, 20) + '...');
                return tokenInput.value;
            }

            // Try to get from hidden form
            const hiddenTokenInput = document.querySelector('form[style*="display: none"] input[name="__RequestVerificationToken"]');
            if (hiddenTokenInput && hiddenTokenInput.value) {
                console.log('CSRF token found in hidden form:', hiddenTokenInput.value.substring(0, 20) + '...');
                return hiddenTokenInput.value;
            }

            console.warn('No CSRF token found!');
            return '';
        }

        // CRUD operations
        async function saveDepartment() {
            const submitBtn = document.getElementById('submitBtn');
            const originalText = submitBtn.innerHTML;

            // Validate input
            const name = document.getElementById('departmentName').value.trim();
            if (!name) {
                showToast('Department name is required', 'error');
                return;
            }

            console.log('Starting save department process...');
            console.log('Department name:', name);
            console.log('Department description:', document.getElementById('departmentDescription').value.trim());

            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

            const departmentData = {
                DepartmentId: parseInt(document.getElementById('departmentId').value) || 0,
                Name: name,
                Description: document.getElementById('departmentDescription').value.trim()
            };

            const isEdit = departmentData.DepartmentId > 0;
            const url = isEdit ? '/Admin/UpdateDepartment' : '/Admin/CreateDepartment';

            console.log('Submitting department data:', departmentData);
            console.log('URL:', url);
            console.log('Is edit mode:', isEdit);

            try {
                const csrfToken = getCSRFToken();
                const headers = {
                    'Content-Type': 'application/json'
                };

                if (csrfToken) {
                    headers['RequestVerificationToken'] = csrfToken;
                }

                console.log('Request headers:', headers);

                const response = await fetch(url, {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(departmentData)
                });

                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('HTTP error response:', errorText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log('Response data:', data);

                if (data.success) {
                    showToast(data.message, 'success');
                    closeModal();

                    // Reload the page to show updated data
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    console.error('Server returned error:', data.message);
                    showToast(data.message, 'error');
                }
            } catch (error) {
                console.error('Error saving department:', error);
                showToast('An error occurred while saving the department', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        // Toast notification system
        function showToast(message, type) {
            // Remove existing toasts
            const existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                ${message}
            `;

            document.body.appendChild(toast);

            // Show toast
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);

            // Hide toast after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 3000);
        }

        // Close modal on backdrop click
        document.getElementById('departmentModal').addEventListener('click', function(e) {
            if (e.target === this) {
                closeModal();
            }
        });
    </script>
}

@* Hidden form for CSRF token backup *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>