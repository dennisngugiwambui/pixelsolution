@{
    ViewData["Title"] = "Reports & Analytics - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        /* Professional Color Palette */
        :root {
            --primary-color: #2563eb;
            --primary-dark: #1d4ed8;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
        }

        /* Responsive Sidebar Styles - MOBILE FIRST */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: var(--gray-900);
            color: white;
            overflow-y: auto;
            z-index: 1000;
            transition: transform 0.3s ease;
            transform: translateX(-100%);
        }

        /* Desktop sidebar - VISIBLE BY DEFAULT */
        @@media (min-width: 1025px) {
            .sidebar {
                transform: translateX(0);
            }
            
            .sidebar.hidden {
                transform: translateX(-280px);
            }
            
            .sidebar.collapsed {
                transform: translateX(-240px);
                width: 40px;
            }
            
            .sidebar.collapsed .sidebar-header,
            .sidebar.collapsed .nav-section-title,
            .sidebar.collapsed .nav-link span {
                display: none;
            }
            
            .sidebar.collapsed .nav-link {
                justify-content: center;
                padding: 1rem 0.5rem;
            }
            
            .sidebar.collapsed .nav-link i {
                margin-right: 0;
            }
        }

        /* Mobile/Tablet sidebar overlay - HIDDEN BY DEFAULT */
        @@media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%) !important;
                box-shadow: 0 0 0 0 rgba(0, 0, 0, 0);
                z-index: 1050;
                width: 280px !important;
            }
            
            .sidebar.open {
                transform: translateX(0) !important;
                box-shadow: 2px 0 10px rgba(0, 0, 0, 0.3);
            }
            
            /* Reset desktop classes on mobile */
            .sidebar.hidden,
            .sidebar.collapsed {
                transform: translateX(-100%) !important;
                width: 280px !important;
            }
            
            /* Main content full width on mobile */
            .main-content {
                margin-left: 0 !important;
                width: 100% !important;
            }
        }

        /* Main Content Responsive Layout */
        .main-content {
            min-height: 100vh;
            background: var(--gray-50);
            transition: margin-left 0.3s ease;
            margin-left: 0;
        }

        /* Desktop main content adjustment - SIDEBAR VISIBLE BY DEFAULT */
        @@media (min-width: 1025px) {
            .main-content {
                margin-left: 280px;
                width: calc(100% - 280px);
            }
            
            .main-content.sidebar-hidden {
                margin-left: 0;
                width: 100%;
            }
            
            .main-content.sidebar-collapsed {
                margin-left: 40px;
                width: calc(100% - 40px);
            }
        }

        /* Mobile overlay backdrop */
        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }

        @@media (max-width: 1024px) {
            .sidebar-overlay.show {
                display: block;
            }
        }

        /* Header Styles */
        .header {
            background: white;
            border-bottom: 1px solid var(--gray-200);
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            color: var(--gray-600);
            font-size: 1.25rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .sidebar-toggle:hover {
            background: var(--gray-100);
            color: var(--gray-800);
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }

        @@media (max-width: 768px) {
            .page-title {
                font-size: 1.25rem;
            }
            
            .header {
                padding: 1rem;
            }
        }

        /* Sidebar Header */
        .sidebar-header {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid var(--gray-700);
        }

        .logo-container {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: var(--primary-color);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .logo-text {
            font-size: 1.25rem;
            font-weight: 700;
            color: white;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            background: var(--success-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: white;
        }

        .user-details h4 {
            color: white;
            margin: 0 0 0.25rem 0;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .user-details p {
            color: var(--gray-300);
            margin: 0;
            font-size: 0.75rem;
        }

        /* Navigation Menu */
        .nav-menu {
            padding: 1rem 0;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-section-title {
            padding: 0 1.5rem 0.5rem;
            color: var(--gray-400);
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.1em;
        }

        .nav-item {
            margin-bottom: 0.25rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            gap: 0.75rem;
            padding: 0.75rem 1.5rem;
            color: var(--gray-300);
            text-decoration: none;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .nav-link:hover {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .nav-link.active {
            background: var(--primary-color);
            color: white;
        }

        .nav-link i {
            width: 20px;
            text-align: center;
            font-size: 1rem;
        }

        /* Header Actions */
        .header-right {
            display: flex;
            align-items: center;
        }

        .header-actions {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .action-btn {
            position: relative;
            background: none;
            border: none;
            color: var(--gray-600);
            font-size: 1.125rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
        }

        .action-btn:hover {
            background: var(--gray-100);
            color: var(--gray-800);
        }

        .notification-badge {
            position: absolute;
            top: 0.25rem;
            right: 0.25rem;
            background: var(--danger-color);
            color: white;
            font-size: 0.75rem;
            font-weight: 600;
            padding: 0.125rem 0.375rem;
            border-radius: 10px;
            min-width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        /* Main Container */
        .reports-container {
            background: var(--gray-50);
            min-height: calc(100vh - 80px);
            padding: 2rem;
        }

        @@media (max-width: 768px) {
            .reports-container {
                padding: 1rem;
            }
        }

        /* Professional Card Styling */
        .glass-card {
            background: white;
            border-radius: 12px;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            padding: 2rem;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
        }

        .glass-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        /* Page Header */
        .page-header {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            border-radius: 12px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            color: white;
        }

        .header-title {
            font-size: 2.25rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .header-subtitle {
            font-size: 1.125rem;
            opacity: 0.9;
        }

        @@media (max-width: 768px) {
            .header-title {
                font-size: 1.875rem;
            }
        }

        /* Filter Section */
        .filter-section {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .filter-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            align-items: end;
        }

        @@media (max-width: 640px) {
            .filter-grid {
                grid-template-columns: 1fr;
            }
        }

        .filter-group {
            display: flex;
            flex-direction: column;
        }

        .filter-label {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--gray-700);
            margin-bottom: 0.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .filter-input {
            padding: 0.75rem 1rem;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            background: white;
            width: 100%;
            color: var(--gray-700);
        }

        .filter-input:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
        }

        .filter-select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }

        /* Professional Action Buttons */
        .action-buttons {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .btn-action {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            font-size: 0.875rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
            color: white;
        }

        .btn-action:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .btn-generate {
            background: var(--primary-color);
        }

        .btn-generate:hover {
            background: var(--primary-dark);
        }

        .btn-export {
            background: var(--success-color);
        }

        .btn-export:hover {
            background: #059669;
        }

        .btn-email {
            background: var(--warning-color);
        }

        .btn-email:hover {
            background: #d97706;
        }

        .btn-receipt {
            background: var(--primary-color);
        }

        .btn-receipt:hover {
            background: var(--primary-dark);
        }

        .btn-print {
            background: var(--gray-600);
        }

        .btn-print:hover {
            background: var(--gray-700);
        }

        /* Professional Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        @@media (max-width: 640px) {
            .stats-grid {
                grid-template-columns: 1fr;
            }
        }

        .stat-card {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .stat-card:hover {
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .stat-card.revenue {
            border-left: 4px solid var(--success-color);
        }

        .stat-card.sales {
            border-left: 4px solid var(--primary-color);
        }

        .stat-card.products {
            border-left: 4px solid var(--warning-color);
        }

        .stat-card.customers {
            border-left: 4px solid #8b5cf6;
        }

        .stat-icon {
            position: absolute;
            top: 1.5rem;
            right: 1.5rem;
            font-size: 2rem;
            opacity: 0.1;
            color: var(--gray-600);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--gray-900);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.875rem;
            color: var(--gray-600);
            font-weight: 500;
            margin-bottom: 0.5rem;
        }

        .stat-change {
            font-size: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            font-weight: 500;
        }

        .stat-change.positive {
            color: var(--success-color);
        }

        .stat-change.negative {
            color: var(--danger-color);
        }

        /* Charts Section */
        .charts-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 2rem;
            margin-bottom: 2rem;
        }

        @@media (max-width: 1024px) {
            .charts-grid {
                grid-template-columns: 1fr;
            }
        }

        .chart-container {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .chart-title {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--gray-900);
        }

        .chart-controls {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .chart-control-btn {
            padding: 0.5rem 1rem;
            border: 1px solid var(--gray-300);
            background: white;
            border-radius: 6px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--gray-700);
        }

        .chart-control-btn:hover {
            border-color: var(--primary-color);
            color: var(--primary-color);
        }

        .chart-control-btn.active {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .chart-canvas {
            width: 100% !important;
            height: 400px !important;
            max-height: 400px;
        }

        /* Quick Actions */
        .quick-actions {
            background: white;
            border-radius: 12px;
            padding: 2rem;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            margin-bottom: 2rem;
        }

        .actions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }

        @@media (max-width: 640px) {
            .actions-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }

        .action-card {
            background: var(--gray-50);
            border: 1px solid var(--gray-200);
            border-radius: 8px;
            padding: 1.5rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            color: var(--gray-700);
        }

        .action-card:hover {
            background: white;
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .action-card-icon {
            font-size: 2rem;
            margin-bottom: 0.75rem;
            color: var(--primary-color);
        }

        .action-card-title {
            font-weight: 600;
            color: var(--gray-900);
            font-size: 0.875rem;
        }

        /* Professional Data Tables */
        .tables-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
            margin-bottom: 2rem;
        }

        @@media (max-width: 1024px) {
            .tables-grid {
                grid-template-columns: 1fr;
            }
        }

        .table-container {
            background: white;
            border-radius: 12px;
            overflow: hidden;
            border: 1px solid var(--gray-200);
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            margin-bottom: 1rem;
        }

        .table-header {
            background: var(--gray-800) !important;
            color: white !important;
            padding: 1.5rem;
            border-bottom: 2px solid var(--gray-700);
        }

        .table-title {
            font-size: 1.125rem;
            font-weight: 600;
            margin: 0;
            color: white !important;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .data-table thead {
            background: var(--gray-800) !important;
        }

        .data-table thead tr {
            background: var(--gray-800) !important;
        }

        .data-table th {
            padding: 1rem !important;
            text-align: left;
            font-weight: 600 !important;
            color: white !important;
            font-size: 0.875rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            border-bottom: 1px solid var(--gray-600) !important;
            background: var(--gray-800) !important;
            position: relative;
        }

        .data-table td {
            padding: 1rem;
            border-bottom: 1px solid var(--gray-200);
            font-size: 0.875rem;
            color: var(--gray-700);
            background: white;
        }

        .data-table tbody tr {
            transition: all 0.3s ease;
            background: white;
        }

        .data-table tbody tr:hover {
            background: var(--gray-50) !important;
        }

        /* Professional Modals */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            border-radius: 12px;
            max-width: 500px;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            overflow: hidden;
        }

        .modal-header {
            background: var(--gray-800);
            color: white;
            padding: 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            margin: 0;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            transition: opacity 0.3s ease;
        }

        .modal-close:hover {
            opacity: 0.7;
        }

        .modal-body {
            padding: 2rem;
        }

        .modal-footer {
            background: var(--gray-50);
            padding: 1.5rem;
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
            border-top: 1px solid var(--gray-200);
        }

        /* Form Controls */
        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--gray-700);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            color: var(--gray-700);
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
        }

        /* Loading & Messages */
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(255, 255, 255, 0.9);
            z-index: 9999;
            justify-content: center;
            align-items: center;
        }

        .loading-overlay.show {
            display: flex;
        }

        .loading-spinner {
            width: 40px;
            height: 40px;
            border: 3px solid var(--gray-300);
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            0% {
                transform: rotate(0deg);
            }
            100% {
                transform: rotate(360deg);
            }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #333;
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast.error {
            background: #ef4444;
        }

        .toast.warning {
            background: var(--warning-color);
        }

        .toast.success {
            background: #10b981;
        }

        .toast.info {
            background: var(--primary-color);
        }

        /* Badge styles for status indicators */
        .badge {
            display: inline-block;
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.375rem;
            text-transform: uppercase;
            letter-spacing: 0.025em;
        }

        .badge-success {
            color: white;
            background-color: var(--success-color);
        }

        .badge-warning {
            color: white;
            background-color: var(--warning-color);
        }

        .badge-info {
            color: white;
            background-color: var(--primary-color);
        }

        .badge-danger {
            color: white;
            background-color: var(--danger-color);
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
}

<!-- Sidebar Overlay for Mobile -->
<div class="sidebar-overlay" id="sidebarOverlay"></div>

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    <span>Dashboard</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    <span>Sales</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    <span>Inventory</span>
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    <span>Employees</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    <span>Departments</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    <span>Suppliers</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    <span>Categories</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    <span>Products</span>
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    <span>Purchase Requests</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    <span>Messages</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link active">
                    <i class="fas fa-chart-bar"></i>
                    <span>Reports</span>
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    <span>Settings</span>
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    <span>Logout</span>
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Reports & Analytics</h1>
        </div>
        <div class="header-right">
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <div class="reports-container">
        <!-- Page Header -->
        <div class="page-header">
            <div class="header-content">
                <h1 class="header-title">Business Intelligence Dashboard</h1>
                <p class="header-subtitle">Real-time analytics and insights for data-driven decisions</p>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="filter-section">
            <div class="filter-grid">
                <div class="filter-group">
                    <label class="filter-label">
                        <i class="fas fa-calendar-alt"></i>
                        Date Range
                    </label>
                    <select id="datePreset" class="filter-input filter-select">
                        <option value="today">Today</option>
                        <option value="yesterday">Yesterday</option>
                        <option value="thisWeek">This Week</option>
                        <option value="lastWeek">Last Week</option>
                        <option value="thisMonth" selected>This Month</option>
                        <option value="lastMonth">Last Month</option>
                        <option value="thisQuarter">This Quarter</option>
                        <option value="thisYear">This Year</option>
                        <option value="custom">Custom Range</option>
                    </select>
                </div>

                <div class="filter-group" id="customDateStart" style="display: none;">
                    <label class="filter-label">
                        <i class="fas fa-calendar-check"></i>
                        Start Date
                    </label>
                    <input type="date" id="startDate" class="filter-input">
                </div>

                <div class="filter-group" id="customDateEnd" style="display: none;">
                    <label class="filter-label">
                        <i class="fas fa-calendar-times"></i>
                        End Date
                    </label>
                    <input type="date" id="endDate" class="filter-input">
                </div>

                <div class="filter-group">
                    <label class="filter-label">
                        <i class="fas fa-chart-line"></i>
                        Chart Type
                    </label>
                    <select id="chartType" class="filter-input filter-select">
                        <option value="line">Line Chart</option>
                        <option value="bar">Bar Chart</option>
                        <option value="area">Area Chart</option>
                        <option value="doughnut">Doughnut Chart</option>
                        <option value="pie">Pie Chart</option>
                    </select>
                </div>

                <div class="filter-group">
                    <label class="filter-label">
                        <i class="fas fa-filter"></i>
                        Data View
                    </label>
                    <select id="dataView" class="filter-input filter-select">
                        <option value="sales">Sales Analysis</option>
                        <option value="products">Product Performance</option>
                        <option value="categories">Category Breakdown</option>
                        <option value="customers">Customer Insights</option>
                        <option value="users">User Activity</option>
                    </select>
                </div>
            </div>

            <div class="action-buttons">
                <button class="btn-action btn-generate" id="generateReportsBtn">
                    <i class="fas fa-sync-alt"></i>
                    Generate Reports
                </button>
                <button class="btn-action btn-export" id="exportPdfBtn">
                    <i class="fas fa-file-pdf"></i>
                    Export PDF
                </button>
                <button class="btn-action btn-export" id="exportExcelBtn">
                    <i class="fas fa-file-excel"></i>
                    Export Excel
                </button>
                <button class="btn-action btn-print" id="printBtn">
                    <i class="fas fa-print"></i>
                    Print Report
                </button>
                <button class="btn-action btn-email" id="emailBtn">
                    <i class="fas fa-paper-plane"></i>
                    Email Report
                </button>
                <button class="btn-action btn-receipt" id="receiptBtn">
                    <i class="fas fa-receipt"></i>
                    Send Receipt
                </button>
            </div>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card revenue">
                <i class="fas fa-dollar-sign stat-icon"></i>
                <div class="stat-value" id="totalRevenue">KSh 0</div>
                <div class="stat-label">Total Revenue</div>
                <div class="stat-change positive" id="revenueChange">
                    <i class="fas fa-arrow-up"></i>
                    <span>+0% from last period</span>
                </div>
            </div>

            <div class="stat-card sales">
                <i class="fas fa-shopping-cart stat-icon"></i>
                <div class="stat-value" id="totalOrders">0</div>
                <div class="stat-label">Total Orders</div>
                <div class="stat-change positive" id="salesChange">
                    <i class="fas fa-arrow-up"></i>
                    <span>+0% from last period</span>
                </div>
            </div>

            <div class="stat-card products">
                <i class="fas fa-cube stat-icon"></i>
                <div class="stat-value" id="totalProducts">0</div>
                <div class="stat-label">Products Sold</div>
                <div class="stat-change positive" id="productsChange">
                    <i class="fas fa-arrow-up"></i>
                    <span>+0% from last period</span>
                </div>
            </div>

            <div class="stat-card customers">
                <i class="fas fa-users stat-icon"></i>
                <div class="stat-value" id="totalCustomers">0</div>
                <div class="stat-label">Active Customers</div>
                <div class="stat-change positive" id="customersChange">
                    <i class="fas fa-arrow-up"></i>
                    <span>+0% from last period</span>
                </div>
            </div>
        </div>

        <!-- Charts Section -->
        <div class="charts-grid">
            <div class="chart-container">
                <div class="chart-header">
                    <h3 class="chart-title">Performance Overview</h3>
                    <div class="chart-controls">
                        <button class="chart-control-btn active" data-chart-type="sales">Sales</button>
                        <button class="chart-control-btn" data-chart-type="revenue">Revenue</button>
                        <button class="chart-control-btn" data-chart-type="profit">Profit</button>
                    </div>
                </div>
                <canvas id="mainChart" class="chart-canvas"></canvas>
            </div>

            <div class="chart-container">
                <div class="chart-header">
                    <h3 class="chart-title">Category Distribution</h3>
                </div>
                <canvas id="categoryChart" class="chart-canvas"></canvas>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <h3 class="chart-title" style="margin-bottom: 0;">Quick Report Actions</h3>
            <div class="actions-grid">
                <div class="action-card" id="exportPdfAction">
                    <i class="fas fa-file-pdf action-card-icon"></i>
                    <div class="action-card-title">Export PDF</div>
                </div>
                <div class="action-card" id="exportExcelAction">
                    <i class="fas fa-file-excel action-card-icon"></i>
                    <div class="action-card-title">Export Excel</div>
                </div>
                <div class="action-card" id="inventoryReportAction">
                    <i class="fas fa-warehouse action-card-icon"></i>
                    <div class="action-card-title">Inventory Report</div>
                </div>
                <div class="action-card" id="supplierReportAction">
                    <i class="fas fa-truck action-card-icon"></i>
                    <div class="action-card-title">Supplier Report</div>
                </div>
                <div class="action-card" id="userReportAction">
                    <i class="fas fa-users-cog action-card-icon"></i>
                    <div class="action-card-title">User Activity</div>
                </div>
                <div class="action-card" id="printReportAction">
                    <i class="fas fa-print action-card-icon"></i>
                    <div class="action-card-title">Print Report</div>
                </div>
            </div>
        </div>

        <!-- Data Tables -->
        <div class="tables-grid">
            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title">Top Performing Products</h3>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Product</th>
                            <th>Sales</th>
                            <th>Revenue</th>
                            <th>Trend</th>
                        </tr>
                    </thead>
                    <tbody id="topProductsTable">
                        <tr>
                            <td colspan="5" style="text-align: center; padding: 2rem;">
                                Loading data...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="table-container">
                <div class="table-header">
                    <h3 class="table-title">Recent Transactions</h3>
                </div>
                <table class="data-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Customer</th>
                            <th>Amount</th>
                            <th>Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="recentSalesTable">
                        <tr>
                            <td colspan="5" style="text-align: center; padding: 2rem;">
                                Loading data...
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Loading Overlay -->
<div class="loading-overlay" id="loadingOverlay">
    <div class="loading-spinner"></div>
</div>

<!-- Export Modal -->
<div id="exportModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Export Report</h3>
            <button class="modal-close" data-close-modal="exportModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="form-label">Report Type</label>
                <select id="exportReportType" class="form-control">
                    <option value="sales">Sales Report</option>
                    <option value="inventory">Inventory Report</option>
                    <option value="users">User Activity Report</option>
                    <option value="categories">Category Report</option>
                    <option value="suppliers">Supplier Report</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Export Format</label>
                <select id="exportFormat" class="form-control">
                    <option value="pdf">PDF Document</option>
                    <option value="excel">Excel Spreadsheet</option>
                    <option value="csv">CSV File</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Include Charts</label>
                <select id="includeCharts" class="form-control">
                    <option value="yes">Yes</option>
                    <option value="no">No</option>
                </select>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action" style="background: var(--gray-600);" data-close-modal="exportModal">
                Cancel
            </button>
            <button class="btn-action btn-export" id="performExportBtn">
                <i class="fas fa-download"></i>
                Export
            </button>
        </div>
    </div>
</div>

<!-- Email Modal -->
<div id="emailModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Email Report</h3>
            <button class="modal-close" data-close-modal="emailModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="form-label">Recipient Email</label>
                <input type="email" id="emailAddress" class="form-control" placeholder="Enter email address">
            </div>
            <div class="form-group">
                <label class="form-label">Report Type</label>
                <select id="emailReportType" class="form-control">
                    <option value="sales">Sales Report</option>
                    <option value="inventory">Inventory Report</option>
                    <option value="users">User Activity Report</option>
                    <option value="categories">Category Report</option>
                </select>
            </div>
            <div class="form-group">
                <label class="form-label">Additional Message</label>
                <textarea id="emailMessage" class="form-control" rows="3" placeholder="Optional message..."></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action" style="background: var(--gray-600);" data-close-modal="emailModal">
                Cancel
            </button>
            <button class="btn-action btn-email" id="sendEmailBtn">
                <i class="fas fa-paper-plane"></i>
                Send Email
            </button>
        </div>
    </div>
</div>

<!-- Receipt Modal -->
<div id="receiptModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Send Receipt</h3>
            <button class="modal-close" data-close-modal="receiptModal">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <div class="form-group">
                <label class="form-label">Search Sale</label>
                <input type="text" id="saleSearch" class="form-control" placeholder="Enter sale number or customer name">
            </div>
            <div class="form-group">
                <label class="form-label">Select Sale</label>
                <select id="saleSelect" class="form-control">
                    <option value="">Select a sale...</option>
                </select>
            </div>
            <div id="saleDetails" style="display: none; margin-top: 1rem; padding: 1rem; background: var(--gray-50); border-radius: 8px;">
                <!-- Sale details will be populated here -->
            </div>
            <div class="form-group">
                <label class="form-label">Customer Email</label>
                <input type="email" id="receiptEmail" class="form-control" placeholder="Enter customer email">
            </div>
        </div>
        <div class="modal-footer">
            <button class="btn-action" style="background: var(--gray-600);" data-close-modal="receiptModal">
                Cancel
            </button>
            <button class="btn-action btn-receipt" id="sendReceiptBtn">
                <i class="fas fa-envelope"></i>
                Send Receipt
            </button>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        // Global variables
        let mainChart = null;
        let categoryChart = null;
        let currentData = null;
        let currentPeriod = 'thisMonth';
        let currentChartType = 'line';
        let currentDataView = 'sales';
        let currentChartDataType = 'sales';

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Reports page initializing...');
            try {
                initializePage();
                setupSidebarToggle();
                setupEventListeners();
                console.log('✅ Reports page initialized successfully');
            } catch (error) {
                console.error('❌ Error initializing reports page:', error);
                showToast('Error initializing Reports page: ' + error.message, 'error');
            }
        });

        // Setup responsive sidebar toggle functionality
        function setupSidebarToggle() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const mainContent = document.getElementById('mainContent');

            if (sidebarToggle && sidebar && sidebarOverlay && mainContent) {
                sidebarToggle.addEventListener('click', function() {
                    const isMobile = window.innerWidth <= 1024;
                    
                    if (isMobile) {
                        // Mobile behavior - toggle overlay
                        sidebar.classList.toggle('open');
                        sidebarOverlay.classList.toggle('show');
                        document.body.style.overflow = sidebar.classList.contains('open') ? 'hidden' : 'auto';
                    } else {
                        // Desktop behavior - toggle between visible, collapsed, and hidden
                        const isVisible = !sidebar.classList.contains('hidden') && !sidebar.classList.contains('collapsed');
                        const isCollapsed = sidebar.classList.contains('collapsed');
                        const isHidden = sidebar.classList.contains('hidden');
                        
                        if (isVisible) {
                            // Currently visible, collapse it
                            sidebar.classList.add('collapsed');
                            mainContent.classList.add('sidebar-collapsed');
                            mainContent.classList.remove('sidebar-hidden');
                        } else if (isCollapsed) {
                            // Currently collapsed, hide it completely
                            sidebar.classList.remove('collapsed');
                            sidebar.classList.add('hidden');
                            mainContent.classList.remove('sidebar-collapsed');
                            mainContent.classList.add('sidebar-hidden');
                        } else if (isHidden) {
                            // Currently hidden, show it visible
                            sidebar.classList.remove('hidden');
                            mainContent.classList.remove('sidebar-hidden');
                        }
                    }
                });

                // Close sidebar when clicking overlay (mobile only)
                sidebarOverlay.addEventListener('click', function() {
                    sidebar.classList.remove('open');
                    sidebarOverlay.classList.remove('show');
                    document.body.style.overflow = 'auto';
                });

                // Handle window resize
                window.addEventListener('resize', function() {
                    const isMobile = window.innerWidth <= 1024;
                    
                    if (!isMobile) {
                        // Desktop mode - remove mobile classes
                        sidebar.classList.remove('open');
                        sidebarOverlay.classList.remove('show');
                        document.body.style.overflow = 'auto';
                    } else {
                        // Mobile mode - remove desktop classes
                        sidebar.classList.remove('collapsed', 'hidden');
                        mainContent.classList.remove('sidebar-hidden', 'sidebar-collapsed');
                    }
                });
                
                // Initialize sidebar state based on screen size
                if (window.innerWidth > 1024) {
                    // Desktop: visible by default
                    sidebar.classList.remove('hidden', 'collapsed');
                    mainContent.classList.remove('sidebar-hidden', 'sidebar-collapsed');
                } else {
                    // Mobile: hidden by default
                    sidebar.classList.remove('open');
                    sidebarOverlay.classList.remove('show');
                }

                // Close sidebar when clicking nav links on mobile
                const navLinks = sidebar.querySelectorAll('.nav-link');
                navLinks.forEach(link => {
                    link.addEventListener('click', function() {
                        if (window.innerWidth <= 1024) {
                            sidebar.classList.remove('open');
                            sidebarOverlay.classList.remove('show');
                            document.body.style.overflow = 'auto';
                        }
                    });
                });
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            console.log('🔧 Setting up event listeners...');

            // Date preset change
            const datePreset = document.getElementById('datePreset');
            if (datePreset) {
                datePreset.addEventListener('change', function() {
                    applyDatePreset();
                    setTimeout(() => loadReportsData(), 100);
                });
            }

            // Date range inputs change
            const startDate = document.getElementById('startDate');
            const endDate = document.getElementById('endDate');
            if (startDate) {
                startDate.addEventListener('change', function() {
                    console.log('📅 Start date changed, reloading fresh data...');
                    loadReportsData();
                });
            }
            if (endDate) {
                endDate.addEventListener('change', function() {
                    console.log('📅 End date changed, reloading fresh data...');
                    loadReportsData();
                });
            }

            // Chart type change
            const chartType = document.getElementById('chartType');
            if (chartType) {
                chartType.addEventListener('change', updateChartType);
            }

            // Data view change
            const dataView = document.getElementById('dataView');
            if (dataView) {
                dataView.addEventListener('change', updateDataView);
            }

            // Button event listeners
            const generateBtn = document.getElementById('generateReportsBtn');
            if (generateBtn) {
                generateBtn.addEventListener('click', generateReports);
            }

            const exportPdfBtn = document.getElementById('exportPdfBtn');
            if (exportPdfBtn) {
                exportPdfBtn.addEventListener('click', () => exportReport('pdf'));
            }

            const exportExcelBtn = document.getElementById('exportExcelBtn');
            if (exportExcelBtn) {
                exportExcelBtn.addEventListener('click', () => exportReport('excel'));
            }

            const printBtn = document.getElementById('printBtn');
            if (printBtn) {
                printBtn.addEventListener('click', printDashboard);
            }

            const emailBtn = document.getElementById('emailBtn');
            if (emailBtn) {
                emailBtn.addEventListener('click', showEmailModal);
            }

            const receiptBtn = document.getElementById('receiptBtn');
            if (receiptBtn) {
                receiptBtn.addEventListener('click', showReceiptModal);
            }

            // Quick action cards
            const quickActions = [
                { id: 'exportPdfAction', action: () => exportReport('pdf') },
                { id: 'exportExcelAction', action: () => exportReport('excel') },
                { id: 'inventoryReportAction', action: generateInventoryReport },
                { id: 'supplierReportAction', action: generateSupplierReport },
                { id: 'userReportAction', action: generateUserReport },
                { id: 'printReportAction', action: printDashboard }
            ];

            quickActions.forEach(({ id, action }) => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('click', action);
                }
            });

            // Chart control buttons
            document.querySelectorAll('.chart-control-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const chartType = this.getAttribute('data-chart-type');
                    switchMainChart(chartType);
                });
            });

            // Modal buttons
            const performExportBtn = document.getElementById('performExportBtn');
            if (performExportBtn) {
                performExportBtn.addEventListener('click', performExport);
            }

            const sendEmailBtn = document.getElementById('sendEmailBtn');
            if (sendEmailBtn) {
                sendEmailBtn.addEventListener('click', sendReportEmail);
            }

            const sendReceiptBtn = document.getElementById('sendReceiptBtn');
            if (sendReceiptBtn) {
                sendReceiptBtn.addEventListener('click', sendReceiptEmail);
            }

            // Modal close buttons
            document.querySelectorAll('[data-close-modal]').forEach(btn => {
                btn.addEventListener('click', function() {
                    const modalId = this.getAttribute('data-close-modal');
                    closeModal(modalId);
                });
            });

            // Sale search
            const saleSearch = document.getElementById('saleSearch');
            if (saleSearch) {
                saleSearch.addEventListener('input', searchSales);
            }

            const saleSelect = document.getElementById('saleSelect');
            if (saleSelect) {
                saleSelect.addEventListener('change', showSaleDetails);
            }

            // Close modal on outside click
            window.addEventListener('click', function(event) {
                if (event.target.classList.contains('modal')) {
                    event.target.style.display = 'none';
                }
            });

            console.log('✅ Event listeners setup completed');
        }

        // Initialize page
        function initializePage() {
            console.log('🚀 Initializing reports page...');
            
            // Set default dates
            const today = new Date();
            const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
            
            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');
            
            if (startDateInput) {
                startDateInput.value = firstDayOfMonth.toISOString().split('T')[0];
            }
            if (endDateInput) {
                endDateInput.value = today.toISOString().split('T')[0];
            }

            // Initialize chart variables
            currentChartDataType = 'sales';
            currentData = null;
            
            // Load initial data
            loadReportsData();
        }

        // Apply date preset
        function applyDatePreset() {
            const preset = document.getElementById('datePreset').value;
            const now = new Date();
            let startDate, endDate;

            console.log('📅 Applying date preset:', preset, 'Current time:', now);

            switch(preset) {
                case 'today':
                    startDate = new Date(now.getFullYear(), now.getMonth(), now.getDate());
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;
                case 'yesterday':
                    const yesterday = new Date(now);
                    yesterday.setDate(now.getDate() - 1);
                    startDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate());
                    endDate = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);
                    break;
                case 'thisWeek':
                    const thisWeekStart = new Date(now);
                    thisWeekStart.setDate(now.getDate() - now.getDay());
                    startDate = new Date(thisWeekStart.getFullYear(), thisWeekStart.getMonth(), thisWeekStart.getDate());
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;
                case 'lastWeek':
                    const lastWeekEnd = new Date(now);
                    lastWeekEnd.setDate(now.getDate() - now.getDay() - 1);
                    const lastWeekStart = new Date(lastWeekEnd);
                    lastWeekStart.setDate(lastWeekEnd.getDate() - 6);
                    startDate = new Date(lastWeekStart.getFullYear(), lastWeekStart.getMonth(), lastWeekStart.getDate());
                    endDate = new Date(lastWeekEnd.getFullYear(), lastWeekEnd.getMonth(), lastWeekEnd.getDate(), 23, 59, 59);
                    break;
                case 'thisMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth(), 1);
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;
                case 'lastMonth':
                    startDate = new Date(now.getFullYear(), now.getMonth() - 1, 1);
                    endDate = new Date(now.getFullYear(), now.getMonth(), 0, 23, 59, 59);
                    break;
                case 'thisQuarter':
                    const quarter = Math.floor(now.getMonth() / 3);
                    startDate = new Date(now.getFullYear(), quarter * 3, 1);
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;
                case 'thisYear':
                    startDate = new Date(now.getFullYear(), 0, 1);
                    endDate = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);
                    break;
                case 'custom':
                    document.getElementById('customDateStart').style.display = 'block';
                    document.getElementById('customDateEnd').style.display = 'block';
                    return;
            }

            console.log('📅 Date range calculated:', {
                preset: preset,
                startDate: startDate,
                endDate: endDate,
                startDateString: startDate.toISOString().split('T')[0],
                endDateString: endDate.toISOString().split('T')[0]
            });

            document.getElementById('customDateStart').style.display = 'none';
            document.getElementById('customDateEnd').style.display = 'none';

            const startDateInput = document.getElementById('startDate');
            const endDateInput = document.getElementById('endDate');

            if (startDateInput) {
                startDateInput.value = startDate.toISOString().split('T')[0];
                console.log('📅 Start date input set to:', startDateInput.value);
            }
            if (endDateInput) {
                endDateInput.value = endDate.toISOString().split('T')[0];
                console.log('📅 End date input set to:', endDateInput.value);
            }

            currentPeriod = preset;
        }

        // Show/hide loading overlay
        function showLoading(show) {
            try {
                const loadingOverlay = document.getElementById('loadingOverlay');
                console.log('🔄 showLoading called with:', show);

                if (loadingOverlay) {
                    if (show) {
                        loadingOverlay.style.display = 'flex';
                        loadingOverlay.classList.add('show');
                    } else {
                        loadingOverlay.style.display = 'none';
                        loadingOverlay.classList.remove('show');
                    }
                }
            } catch (error) {
                console.error('❌ Error in showLoading:', error);
            }
        }

        // Show toast notification
        function showToast(message, type = 'info') {
            try {
                console.log(`📢 Toast [${type}]:`, message);

                const toast = document.createElement('div');
                toast.className = `toast ${type} show`;
                toast.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' :
                                       type === 'error' ? 'exclamation-circle' :
                                       type === 'warning' ? 'exclamation-triangle' :
                                       'info-circle'}"></i>
                    <span>${message}</span>
                `;

                document.body.appendChild(toast);

                setTimeout(() => {
                    toast.remove();
                }, 5000);
            } catch (error) {
                console.error('❌ Error in showToast:', error);
                alert(`${type.toUpperCase()}: ${message}`);
            }
        }

        // Close modal
        function closeModal(modalId) {
            try {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.style.display = 'none';
                }
            } catch (error) {
                console.error('❌ Error closing modal:', error);
            }
        }

        // Load reports data
        function loadReportsData() {
            console.log('📊 Loading reports data for view:', currentDataView);
            
            showLoading(true);
            
            const startDate = document.getElementById('startDate')?.value;
            const endDate = document.getElementById('endDate')?.value;
            const dateRange = document.getElementById('dateRange')?.value;
            
            console.log('📊 Request parameters:', {
                reportType: currentDataView,
                chartType: currentChartDataType,
                startDate: startDate,
                endDate: endDate,
                dateRange: dateRange
            });
            
            const requestBody = {
                reportType: 'default',
                chartType: currentChartDataType,
                startDate: startDate,
                endDate: endDate,
                dateRange: dateRange
            };
            
            const timestamp = new Date().getTime();
            const randomId = Math.random().toString(36).substring(7);
            requestBody.timestamp = timestamp;
            requestBody.cacheBreaker = randomId;
            requestBody.forceRefresh = true;
            
            fetch('/Admin/GetReportData', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
                    'Cache-Control': 'no-cache, no-store, must-revalidate',
                    'Pragma': 'no-cache',
                    'Expires': '0'
                },
                body: JSON.stringify(requestBody)
            })
            .then(response => {
                console.log('📊 Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('📊 Raw response data:', data);
                if (data.success) {
                    console.log('✅ Report data loaded:', data.data);
                    currentData = data.data;
                    updateDashboardStats(data.data);
                } else {
                    console.error('❌ Failed to load report data:', data.message);
                    showToast('Failed to load report data', 'error');
                    const mockData = generateMockData();
                    currentData = mockData;
                    updateDashboardStats(mockData);
                }
            })
            .catch(error => {
                console.error('❌ Error loading report data:', error);
                showToast('Error loading report data', 'error');
                const mockData = generateMockData();
                currentData = mockData;
                updateDashboardStats(mockData);
            })
            .finally(() => {
                showLoading(false);
            });
        }

        // Generate mock data for fallback
        function generateMockData() {
            return {
                totalSales: 125000,
                totalOrders: 45,
                totalProducts: 120,
                totalCustomers: 35,
                salesTrend: [
                    { date: '2024-01-01', sales: 15000 },
                    { date: '2024-01-02', sales: 18000 },
                    { date: '2024-01-03', sales: 22000 },
                    { date: '2024-01-04', sales: 19000 },
                    { date: '2024-01-05', sales: 25000 }
                ],
                topProducts: [
                    { name: 'Product A', sales: 25000, revenue: 25000, stock: 50 },
                    { name: 'Product B', sales: 18000, revenue: 18000, stock: 30 },
                    { name: 'Product C', sales: 12000, revenue: 12000, stock: 20 }
                ],
                topCategories: [
                    { name: 'Electronics', sales: 45000 },
                    { name: 'Clothing', sales: 32000 },
                    { name: 'Home & Garden', sales: 28000 }
                ],
                recentSales: [
                    { id: 'S001', customerName: 'John Doe', totalAmount: 1500, saleDate: '2024-01-05', status: 'Completed' },
                    { id: 'S002', customerName: 'Jane Smith', totalAmount: 2200, saleDate: '2024-01-05', status: 'Completed' }
                ]
            };
        }

        // Update change indicator
        function updateChangeIndicator(elementId, percentage) {
            const element = document.getElementById(elementId);
            if (!element) return;

            const isPositive = percentage >= 0;
            const icon = isPositive ? 'fas fa-arrow-up' : 'fas fa-arrow-down';
            const sign = isPositive ? '+' : '';

            element.innerHTML = `
                <i class="${icon}"></i>
                <span>${sign}${percentage.toFixed(1)}% from last period</span>
            `;

            element.className = `stat-change ${isPositive ? 'positive' : 'negative'}`;
        }

        // Update dashboard stats
        function updateDashboardStats(data) {
            try {
                console.log('📊 Updating dashboard stats with:', data);
                
                const totalRevenue = data.totalSales || 0;
                const totalOrders = data.totalOrders || 0;
                const totalProducts = data.totalProducts || 0;
                const totalCustomers = data.totalCustomers || 0;
                
                console.log('📊 Calculated values:', { totalRevenue, totalOrders, totalProducts, totalCustomers });
                
                const revenueElement = document.getElementById('totalRevenue');
                const ordersElement = document.getElementById('totalOrders');
                const productsElement = document.getElementById('totalProducts');
                const customersElement = document.getElementById('totalCustomers');
                
                if (revenueElement) {
                    const formattedRevenue = 'KSh ' + totalRevenue.toLocaleString('en-KE', { minimumFractionDigits: 2 });
                    revenueElement.textContent = formattedRevenue;
                    console.log('📊 Revenue updated to:', formattedRevenue);
                }
                
                if (ordersElement) {
                    const formattedOrders = totalOrders.toLocaleString();
                    ordersElement.textContent = formattedOrders;
                    console.log('📊 Orders updated to:', formattedOrders);
                }
                
                if (productsElement) {
                    const formattedProducts = totalProducts.toLocaleString();
                    productsElement.textContent = formattedProducts;
                    console.log('📊 Products updated to:', formattedProducts);
                }
                
                if (customersElement) {
                    const formattedCustomers = totalCustomers.toLocaleString();
                    customersElement.textContent = formattedCustomers;
                    console.log('📊 Customers updated to:', formattedCustomers);
                }
                
                updateTopProductsTable(data.topProducts || []);
                updateRecentSalesTable(data.recentSales || []);
                updateCategoryChart(data.topCategories || []);
                
                console.log('📊 Updating main chart with sales data');
                currentData = data;
                updateMainChartWithSalesData(data);
                
                console.log('✅ Dashboard stats updated');
            } catch (error) {
                console.error('❌ Error updating dashboard stats:', error);
            }
        }

        // Generate distinct colors for charts
        function generateDistinctColors(count) {
            const colors = [
                '#2563eb', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6',
                '#06b6d4', '#ec4899', '#84cc16', '#f97316', '#6366f1',
                '#14b8a6', '#f43f5e', '#a855f7', '#22c55e', '#eab308',
                '#3b82f6', '#059669', '#dc2626', '#7c3aed', '#0891b2'
            ];
            
            if (count <= colors.length) {
                return colors.slice(0, count);
            }
            
            const additionalColors = [];
            const baseColors = colors.slice();
            
            for (let i = colors.length; i < count; i++) {
                const hue = (i * 137.508) % 360;
                const saturation = 70 + (i % 3) * 10;
                const lightness = 45 + (i % 4) * 10;
                additionalColors.push(`hsl(${hue}, ${saturation}%, ${lightness}%)`);
            }
            
            return [...baseColors, ...additionalColors];
        }

        // Update category chart
        function updateCategoryChart(categories) {
            try {
                console.log('📊 updateCategoryChart called with:', categories);
                const ctx = document.getElementById('categoryChart');
                if (!ctx) {
                    console.error('❌ categoryChart element not found');
                    return;
                }

                if (categoryChart) {
                    categoryChart.destroy();
                }

                if (!categories || categories.length === 0) {
                    console.warn('⚠️ No category data available for chart');
                    return;
                }

                console.log('📊 Processing', categories.length, 'categories for chart');
                const chartData = {
                    labels: categories.map(cat => {
                        const name = cat.name || cat.categoryName || 'Unknown';
                        console.log('📊 Category name:', name);
                        return name;
                    }),
                    datasets: [{
                        label: 'Category Sales (KSh)',
                        data: categories.map(cat => {
                            const sales = cat.sales || cat.totalSales || 0;
                            console.log('📊 Category sales:', sales);
                            return sales;
                        }),
                        backgroundColor: generateDistinctColors(categories.length),
                        borderWidth: 2,
                        borderColor: '#ffffff'
                    }]
                };

                console.log('📊 Chart data prepared:', chartData);

                categoryChart = new Chart(ctx.getContext('2d'), {
                    type: 'doughnut',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1);
                                        return `${context.label}: KSh ${context.parsed.toLocaleString('en-KE')} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                console.log('✅ Category chart updated with', categories.length, 'categories');
            } catch (error) {
                console.error('❌ Error updating category chart:', error);
            }
        }

        // Update top products table
        function updateTopProductsTable(products) {
            try {
                console.log('📊 updateTopProductsTable called with:', products);
                const tableBody = document.getElementById('topProductsTable');
                if (!tableBody) {
                    console.error('❌ topProductsTable element not found');
                    return;
                }

                if (!products || products.length === 0) {
                    console.log('⚠️ No products data available, showing empty message');
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" style="text-align: center; padding: 2rem; color: #6b7280;">
                                No product data available
                            </td>
                        </tr>
                    `;
                    return;
                }

                console.log('📊 Processing', products.length, 'products for table');
                let tableHTML = '';
                products.forEach((product, index) => {
                    console.log('📊 Processing product:', product);
                    const trend = Math.random() > 0.5 ? '↗️' : '↘️';
                    const trendClass = Math.random() > 0.5 ? 'positive' : 'negative';
                    
                    const productName = product.name || product.productName || 'Unknown Product';
                    const sales = product.sales || product.totalSales || 0;
                    const revenue = product.revenue || product.totalRevenue || 0;
                    
                    tableHTML += `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${productName}</td>
                            <td>${sales.toLocaleString()}</td>
                            <td>KSh ${revenue.toLocaleString('en-KE', { minimumFractionDigits: 2 })}</td>
                            <td><span class="stat-change ${trendClass}">${trend}</span></td>
                        </tr>
                    `;
                });

                tableBody.innerHTML = tableHTML;
                console.log('✅ Top Products table updated with', products.length, 'items');
            } catch (error) {
                console.error('❌ Error updating top products table:', error);
            }
        }

        // Update recent sales table
        function updateRecentSalesTable(sales) {
            try {
                console.log('📊 updateRecentSalesTable called with:', sales);
                const tableBody = document.getElementById('recentSalesTable');
                if (!tableBody) {
                    console.error('❌ recentSalesTable element not found');
                    return;
                }

                if (!sales || sales.length === 0) {
                    console.log('⚠️ No sales data available, showing empty message');
                    tableBody.innerHTML = `
                        <tr>
                            <td colspan="5" style="text-align: center; padding: 2rem; color: #6b7280;">
                                No recent sales data available
                            </td>
                        </tr>
                    `;
                    return;
                }

                console.log('📊 Processing', sales.length, 'sales for table');
                let tableHTML = '';
                sales.forEach((sale) => {
                    console.log('📊 Processing sale:', sale);
                    const statusClass = sale.status === 'Completed' ? 'success' : 
                                       sale.status === 'Pending' ? 'warning' : 'info';
                    
                    const saleId = sale.id || sale.saleNumber || 'N/A';
                    const customerName = sale.customerName || 'Walk-in Customer';
                    const amount = sale.totalAmount || sale.amount || 0;
                    const saleDate = new Date(sale.saleDate || sale.date).toLocaleDateString('en-KE');
                    const status = sale.status || 'Completed';
                    
                    tableHTML += `
                        <tr>
                            <td>${saleId}</td>
                            <td>${customerName}</td>
                            <td>KSh ${amount.toLocaleString('en-KE', { minimumFractionDigits: 2 })}</td>
                            <td>${saleDate}</td>
                            <td><span class="badge badge-${statusClass}">${status}</span></td>
                        </tr>
                    `;
                });

                tableBody.innerHTML = tableHTML;
                console.log('✅ Recent Sales table updated with', sales.length, 'items');
            } catch (error) {
                console.error('❌ Error updating recent sales table:', error);
            }
        }

        // Update main chart with sales data by default
        function updateMainChartWithSalesData(data) {
            try {
                console.log('📊 updateMainChartWithSalesData called with:', data);
                const ctx = document.getElementById('mainChart');
                if (!ctx) {
                    console.error('❌ mainChart element not found');
                    return;
                }

                if (mainChart) {
                    mainChart.destroy();
                }

                const salesTrend = data.salesTrend || [];
                console.log('📊 Sales trend data:', salesTrend);

                if (salesTrend.length === 0) {
                    console.warn('⚠️ No sales trend data available');
                    return;
                }

                const chartData = {
                    labels: salesTrend.map(item => item.date || 'N/A'),
                    datasets: [{
                        label: 'Sales Amount (KSh)',
                        data: salesTrend.map(item => item.sales || item.amount || 0),
                        borderColor: '#2563eb',
                        backgroundColor: 'rgba(37, 99, 235, 0.1)',
                        borderWidth: 3,
                        tension: 0.4,
                        fill: true,
                        pointBackgroundColor: '#2563eb',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 5
                    }]
                };

                console.log('📊 Main chart data prepared:', chartData);

                mainChart = new Chart(ctx.getContext('2d'), {
                    type: 'line',
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top',
                                labels: {
                                    usePointStyle: true,
                                    padding: 20
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                titleColor: '#ffffff',
                                bodyColor: '#ffffff',
                                borderColor: '#2563eb',
                                borderWidth: 1,
                                callbacks: {
                                    label: function(context) {
                                        return context.dataset.label + ': KSh ' + context.parsed.y.toLocaleString('en-KE', { minimumFractionDigits: 2 });
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return 'KSh ' + value.toLocaleString('en-KE');
                                    }
                                }
                            },
                            x: {
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                }
                            }
                        },
                        interaction: {
                            intersect: false,
                            mode: 'index'
                        }
                    }
                });

                console.log('✅ Main chart updated with sales data');
            } catch (error) {
                console.error('❌ Error updating main chart with sales data:', error);
            }
        }

        // Switch main chart data
        function switchMainChart(type) {
            console.log('🔄 Switching chart to:', type);

            document.querySelectorAll('.chart-control-btn').forEach(btn => {
                btn.classList.remove('active');
            });

            const clickedBtn = document.querySelector(`[data-chart-type="${type}"]`);
            if (clickedBtn) {
                clickedBtn.classList.add('active');
            }

            currentChartDataType = type;

            if (currentData) {
                console.log('📊 Using stored data for chart switch:', currentData);
                updateMainChartWithType(currentData, type);
            } else {
                console.log('⚠️ No data available, loading fresh data...');
                loadReportsData();
            }
        }

        // Update main chart with specific data type
        function updateMainChartWithType(data, dataType) {
            try {
                const ctx = document.getElementById('mainChart');
                if (!ctx) {
                    console.error('❌ Main chart canvas not found');
                    return;
                }

                if (mainChart) {
                    mainChart.destroy();
                }

                let chartData = { labels: [], datasets: [] };

                switch(dataType) {
                    case 'sales':
                        const salesTrend = data.salesTrend || [];
                        chartData = {
                            labels: salesTrend.map(item => item.date || 'N/A'),
                            datasets: [{
                                label: 'Sales Amount (KSh)',
                                data: salesTrend.map(item => item.sales || 0),
                                borderColor: '#2563eb',
                                backgroundColor: currentChartType === 'line' ? 'transparent' :
                                                  currentChartType === 'area' ? 'rgba(37, 99, 235, 0.1)' :
                                                  'rgba(37, 99, 235, 0.8)',
                                borderWidth: 2,
                                tension: 0.4,
                                fill: currentChartType === 'area'
                            }]
                        };
                        break;

                    case 'revenue':
                        const topProducts = data.topProducts || [];
                        chartData = {
                            labels: topProducts.map(item => item.name || 'Unknown'),
                            datasets: [{
                                label: 'Product Revenue (KSh)',
                                data: topProducts.map(item => item.revenue || 0),
                                borderColor: '#10b981',
                                backgroundColor: currentChartType === 'line' ? 'transparent' :
                                                  currentChartType === 'area' ? 'rgba(16, 185, 129, 0.1)' :
                                                  'rgba(16, 185, 129, 0.8)',
                                borderWidth: 2,
                                tension: 0.4,
                                fill: currentChartType === 'area'
                            }]
                        };
                        break;

                    case 'profit':
                        const topCategories = data.topCategories || [];
                        chartData = {
                            labels: topCategories.map(item => item.name || 'Unknown'),
                            datasets: [{
                                label: 'Category Sales (KSh)',
                                data: topCategories.map(item => item.sales || 0),
                                borderColor: '#f59e0b',
                                backgroundColor: currentChartType === 'line' ? 'transparent' :
                                                  currentChartType === 'area' ? 'rgba(245, 158, 11, 0.1)' :
                                                  'rgba(245, 158, 11, 0.8)',
                                borderWidth: 2,
                                tension: 0.4,
                                fill: currentChartType === 'area'
                            }]
                        };
                        break;
                }

                const chartTypeToUse = currentChartType === 'area' ? 'line' : currentChartType;

                mainChart = new Chart(ctx.getContext('2d'), {
                    type: chartTypeToUse,
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return context.dataset.label + ': KSh ' + context.parsed.y.toLocaleString('en-KE', { minimumFractionDigits: 2 });
                                    }
                                }
                            }
                        },
                        scales: chartTypeToUse !== 'doughnut' && chartTypeToUse !== 'pie' ? {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return 'KSh ' + value.toLocaleString('en-KE');
                                    }
                                }
                            }
                        } : {}
                    }
                });
            } catch (error) {
                console.error('❌ Error in updateMainChartWithType:', error);
            }
        }

        // Update chart type
         function updateChartType() {
             const chartTypeSelect = document.getElementById('chartType');
             if (chartTypeSelect) {
                 const newChartType = chartTypeSelect.value;
                 console.log('📊 Chart type changed to:', newChartType);

                 currentChartType = newChartType;

                 if (currentData) {
                     console.log('📊 Updating charts with stored data for new chart type:', newChartType);
                     updateChartsForSpecificView(currentData, currentDataView, newChartType);
                 } else {
                     console.log('📊 No stored data, loading fresh data for chart type:', newChartType);
                     loadSpecificViewData(currentDataView || 'sales');
                 }
             }
         }

         // Update data view
         function updateDataView() {
             const dataViewSelect = document.getElementById('dataView');
             if (dataViewSelect) {
                 currentDataView = dataViewSelect.value;
                 console.log('📊 Data view changed to:', currentDataView);

                 updateChartControlsForDataView(currentDataView);

                 console.log('📊 Loading data immediately for view change:', currentDataView);
                 loadSpecificViewData(currentDataView);
             }
         }

         // Load data for specific view
         function loadSpecificViewData(dataView) {
             console.log('📊 Loading data for view:', dataView);

             showLoading(true);

             const startDate = document.getElementById('startDate')?.value;
             const endDate = document.getElementById('endDate')?.value;
             const dateRange = document.getElementById('dateRange')?.value;

             const timestamp = new Date().getTime();

             const requestBody = {
                 reportType: dataView,
                 chartType: currentChartDataType,
                 startDate: startDate,
                 endDate: endDate,
                 dateRange: dateRange,
                 timestamp: timestamp
             };

             fetch('/Admin/GetReportData', {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
                     'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || '',
                     'Cache-Control': 'no-cache, no-store, must-revalidate',
                     'Pragma': 'no-cache',
                     'Expires': '0'
                 },
                 body: JSON.stringify(requestBody)
             })
             .then(response => response.json())
             .then(data => {
                 if (data.success) {
                     console.log('✅ View-specific data loaded:', data.data);
                     currentData = data.data;

                     if (dataView === 'sales' || dataView === 'default') {
                         updateDashboardStats(data.data);
                     }

                     setDefaultChartDataType(dataView);
                     updateChartsForSpecificView(data.data, dataView, currentChartType);
                 } else {
                     console.error('❌ Failed to load view data:', data.message);
                     showToast('Failed to load data for ' + dataView + ' view', 'error');
                 }
             })
             .catch(error => {
                 console.error('❌ Error loading view data:', error);
                 showToast('Error loading ' + dataView + ' data', 'error');
             })
             .finally(() => {
                 showLoading(false);
             });
         }

         // Set default chart data type for each view
         function setDefaultChartDataType(dataView) {
             switch(dataView) {
                 case 'sales':
                     currentChartDataType = 'sales';
                     break;
                 case 'products':
                     currentChartDataType = 'performance';
                     break;
                 case 'categories':
                     currentChartDataType = 'breakdown';
                     break;
                 case 'inventory':
                     currentChartDataType = 'levels';
                     break;
                 default:
                     currentChartDataType = 'sales';
             }
             console.log('📊 Set default chart data type for', dataView, ':', currentChartDataType);
         }

         // Update chart controls based on data view
         function updateChartControlsForDataView(dataView) {
             const chartControls = document.querySelector('.chart-controls');
             if (!chartControls) return;

             chartControls.innerHTML = '';

             let controls = [];
             switch(dataView) {
                 case 'sales':
                     controls = [
                         { type: 'sales', label: 'Sales', active: true },
                         { type: 'revenue', label: 'Revenue', active: false },
                         { type: 'profit', label: 'Profit', active: false }
                     ];
                     break;
                 case 'products':
                     controls = [
                         { type: 'performance', label: 'Performance', active: true },
                         { type: 'stock', label: 'Stock Levels', active: false },
                         { type: 'turnover', label: 'Turnover', active: false }
                     ];
                     break;
                 case 'categories':
                     controls = [
                         { type: 'breakdown', label: 'Breakdown', active: true },
                         { type: 'trends', label: 'Trends', active: false },
                         { type: 'comparison', label: 'Comparison', active: false }
                     ];
                     break;
                 case 'inventory':
                     controls = [
                         { type: 'stock', label: 'Stock Levels', active: true },
                         { type: 'valuation', label: 'Valuation', active: false },
                         { type: 'movement', label: 'Movement', active: false }
                     ];
                     break;
                 default:
                     controls = [
                         { type: 'overview', label: 'Overview', active: true }
                     ];
             }

             controls.forEach(control => {
                 const button = document.createElement('button');
                 button.className = `chart-control-btn ${control.active ? 'active' : ''}`;
                 button.setAttribute('data-chart-type', control.type);
                 button.textContent = control.label;
                 button.addEventListener('click', function() {
                     chartControls.querySelectorAll('.chart-control-btn').forEach(btn => {
                         btn.classList.remove('active');
                     });
                     this.classList.add('active');

                     const chartType = this.getAttribute('data-chart-type');
                     switchMainChartForDataView(chartType, currentDataView);
                 });
                 chartControls.appendChild(button);
             });

             currentChartDataType = controls[0].type;
         }

         // Switch main chart based on data view and chart type
         function switchMainChartForDataView(chartType, dataView) {
             currentChartDataType = chartType;
             loadSpecificChartData(dataView, chartType);
         }

         // Load specific chart data
         function loadSpecificChartData(dataView, chartType) {
             console.log(`📊 Loading ${chartType} data for ${dataView} view`);

             showLoading(true);

             fetch('/Admin/GetReportData', {
                 method: 'POST',
                 headers: {
                     'Content-Type': 'application/json',
                     'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                 },
                 body: JSON.stringify({
                     reportType: dataView,
                     chartType: chartType,
                     startDate: document.getElementById('startDate')?.value,
                     endDate: document.getElementById('endDate')?.value,
                     dateRange: document.getElementById('dateRange')?.value
                 })
             })
             .then(response => response.json())
             .then(data => {
                 if (data.success) {
                     updateChartsForSpecificView(data.data, dataView, chartType);
                 } else {
                     console.error('❌ Failed to load chart data:', data.message);
                     showToast('Failed to load chart data', 'error');
                 }
             })
             .catch(error => {
                 console.error('❌ Error loading chart data:', error);
                 showToast('Error loading chart data', 'error');
             })
             .finally(() => {
                 showLoading(false);
             });
         }

         // Update charts for specific view
         function updateChartsForSpecificView(data, dataView, chartType) {
             console.log(`📈 Updating charts for ${dataView} - ${currentChartDataType}:`, data);

             try {
                 if (mainChart) {
                     mainChart.destroy();
                     mainChart = null;
                 }

                 const ctx = document.getElementById('mainChart');
                 if (!ctx) {
                     console.error('❌ Main chart canvas not found');
                     return;
                 }

                 let chartData;
                 let chartTitle = '';

                 switch(dataView) {
                     case 'sales':
                         chartData = getSalesChartData(data, currentChartDataType);
                         chartTitle = `Sales ${currentChartDataType.charAt(0).toUpperCase() + currentChartDataType.slice(1)}`;
                         break;
                     case 'products':
                         chartData = getProductsChartData(data, currentChartDataType);
                         chartTitle = `Product ${currentChartDataType.charAt(0).toUpperCase() + currentChartDataType.slice(1)}`;
                         break;
                     case 'categories':
                         chartData = getCategoriesChartData(data, currentChartDataType);
                         chartTitle = `Category ${currentChartDataType.charAt(0).toUpperCase() + currentChartDataType.slice(1)}`;
                         break;
                     case 'inventory':
                         chartData = getInventoryChartData(data, currentChartDataType);
                         chartTitle = `Inventory ${currentChartDataType.charAt(0).toUpperCase() + currentChartDataType.slice(1)}`;
                         break;
                 }

                 const chartTitleElement = document.querySelector('.chart-title');
                 if (chartTitleElement) {
                     chartTitleElement.textContent = chartTitle;
                 }

                 let chartTypeToUse = currentChartType;

                 if (currentChartType === 'area') {
                     chartTypeToUse = 'line';
                     chartData.datasets.forEach(dataset => {
                         dataset.fill = true;
                         dataset.backgroundColor = dataset.backgroundColor || dataset.borderColor + '20';
                     });
                 }

                 console.log('📊 Creating main chart with type:', chartTypeToUse, 'for view:', dataView);

                 mainChart = new Chart(ctx.getContext('2d'), {
                     type: chartTypeToUse,
                     data: chartData,
                     options: {
                         responsive: true,
                         maintainAspectRatio: false,
                         plugins: {
                             legend: {
                                 display: true,
                                 position: 'top',
                                 labels: {
                                     usePointStyle: true,
                                     padding: 20
                                 }
                             },
                             tooltip: {
                                 backgroundColor: 'rgba(0, 0, 0, 0.8)',
                                 titleColor: '#ffffff',
                                 bodyColor: '#ffffff',
                                 borderColor: '#2563eb',
                                 borderWidth: 1,
                                 callbacks: {
                                     label: function(context) {
                                         if (chartTypeToUse === 'doughnut' || chartTypeToUse === 'pie') {
                                             const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                             const percentage = total > 0 ? ((context.parsed / total) * 100).toFixed(1) : 0;
                                             return context.label + ': ' + context.parsed.toLocaleString() + ' (' + percentage + '%)';
                                         } else {
                                             return context.dataset.label + ': ' + (context.parsed.y || context.parsed).toLocaleString();
                                         }
                                     }
                                 }
                             }
                         },
                         scales: chartTypeToUse !== 'doughnut' && chartTypeToUse !== 'pie' ? {
                             y: {
                                 beginAtZero: true,
                                 grid: {
                                     color: 'rgba(0, 0, 0, 0.1)'
                                 },
                                 ticks: {
                                     callback: function(value) {
                                         return value.toLocaleString();
                                     }
                                 }
                             },
                             x: {
                                 grid: {
                                     color: 'rgba(0, 0, 0, 0.1)'
                                 }
                             }
                         } : {},
                         interaction: {
                             intersect: false,
                             mode: 'index'
                         }
                     }
                 });
             } catch (error) {
                 console.error('❌ Error updating charts for specific view:', error);
             }
         }

         // Get sales chart data
         function getSalesChartData(data, chartType) {
             switch(chartType) {
                 case 'sales':
                     const salesTrend = data.salesTrend || [];
                     return {
                         labels: salesTrend.map(item => item.date || 'N/A'),
                         datasets: [{
                             label: 'Sales Amount (KSh)',
                             data: salesTrend.map(item => item.amount || 0),
                             backgroundColor: generateDistinctColors(1)[0],
                             borderColor: generateDistinctColors(1)[0],
                             borderWidth: 2,
                             fill: currentChartType === 'area'
                         }]
                     };
                 case 'revenue':
                     const revenueTrend = data.revenueTrend || data.salesTrend || [];
                     return {
                         labels: revenueTrend.map(item => item.date || 'N/A'),
                         datasets: [{
                             label: 'Revenue (KSh)',
                             data: revenueTrend.map(item => item.revenue || item.amount || 0),
                             backgroundColor: generateDistinctColors(1)[0],
                             borderColor: generateDistinctColors(1)[0],
                             borderWidth: 2,
                             fill: currentChartType === 'area'
                         }]
                     };
                 case 'profit':
                     const profitTrend = data.profitTrend || data.salesTrend || [];
                     return {
                         labels: profitTrend.map(item => item.date || 'N/A'),
                         datasets: [{
                             label: 'Profit (KSh)',
                             data: profitTrend.map(item => item.profit || (item.amount * 0.2) || 0),
                             backgroundColor: generateDistinctColors(1)[0],
                             borderColor: generateDistinctColors(1)[0],
                             borderWidth: 2,
                             fill: currentChartType === 'area'
                         }]
                     };
                 default:
                     return { labels: ['No Data'], datasets: [{ data: [0], backgroundColor: ['#e5e7eb'] }] };
             }
         }

         // Get products chart data
         function getProductsChartData(data, chartType) {
             switch(chartType) {
                 case 'performance':
                     const topProducts = data.topProducts || [];
                     return {
                         labels: topProducts.map(item => item.name || item.productName || 'Unknown'),
                         datasets: [{
                             label: 'Revenue (KSh)',
                             data: topProducts.map(item => item.revenue || item.totalRevenue || 0),
                             backgroundColor: generateDistinctColors(topProducts.length),
                             borderWidth: 2
                         }]
                     };
                 case 'stock':
                     const stockLevels = data.stockLevels || data.topProducts || [];
                     return {
                         labels: stockLevels.map(item => item.name || item.productName || 'Unknown'),
                         datasets: [{
                             label: 'Stock Quantity',
                             data: stockLevels.map(item => item.stock || item.quantity || 0),
                             backgroundColor: generateDistinctColors(stockLevels.length),
                             borderWidth: 2
                         }]
                     };
                 case 'turnover':
                     const turnoverData = data.productTurnover || data.topProducts || [];
                     return {
                         labels: turnoverData.map(item => item.name || item.productName || 'Unknown'),
                         datasets: [{
                             label: 'Sales Quantity',
                             data: turnoverData.map(item => item.sales || item.totalSales || 0),
                             backgroundColor: generateDistinctColors(turnoverData.length),
                             borderWidth: 2
                         }]
                     };
                 default:
                     return { labels: ['No Data'], datasets: [{ data: [0], backgroundColor: ['#e5e7eb'] }] };
             }
         }

         // Get categories chart data
         function getCategoriesChartData(data, chartType) {
             switch(chartType) {
                 case 'breakdown':
                     const topCategories = data.topCategories || [];
                     return {
                         labels: topCategories.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Product Count',
                             data: topCategories.map(item => item.productCount || item.totalProducts || 0),
                             backgroundColor: generateDistinctColors(topCategories.length),
                             borderWidth: 2
                         }]
                     };
                 case 'trends':
                     const categoryTrends = data.categoryTrends || data.topCategories || [];
                     return {
                         labels: categoryTrends.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Category Sales (KSh)',
                             data: categoryTrends.map(item => item.sales || item.totalSales || 0),
                             backgroundColor: generateDistinctColors(categoryTrends.length),
                             borderWidth: 2
                         }]
                     };
                 case 'comparison':
                     const categoryComparison = data.categoryComparison || data.topCategories || [];
                     return {
                         labels: categoryComparison.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Product Count',
                             data: categoryComparison.map(item => item.productCount || item.totalProducts || 0),
                             backgroundColor: generateDistinctColors(categoryComparison.length),
                             borderWidth: 2
                         }, {
                             label: 'Stock Value (KSh)',
                             data: categoryComparison.map(item => item.stockValue || 0),
                             backgroundColor: generateDistinctColors(categoryComparison.length).map(color => color + '80'),
                             borderWidth: 2
                         }]
                     };
                 default:
                     return { labels: ['No Data'], datasets: [{ data: [0], backgroundColor: ['#e5e7eb'] }] };
             }
         }

         // Get inventory chart data
         function getInventoryChartData(data, chartType) {
             switch(chartType) {
                 case 'stock':
                     const stockData = data.inventoryStock || data.topProducts || [];
                     return {
                         labels: stockData.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Current Stock',
                             data: stockData.map(item => item.currentStock || item.stock || 0),
                             backgroundColor: generateDistinctColors(stockData.length),
                             borderWidth: 2
                         }]
                     };
                 case 'valuation':
                     const valuationData = data.inventoryValuation || data.topProducts || [];
                     return {
                         labels: valuationData.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Stock Value (KSh)',
                             data: valuationData.map(item => item.value || (item.stock * item.price) || 0),
                             backgroundColor: generateDistinctColors(valuationData.length),
                             borderWidth: 2
                         }]
                     };
                 case 'movement':
                     const movementData = data.inventoryMovement || data.topProducts || [];
                     return {
                         labels: movementData.map(item => item.name || 'Unknown'),
                         datasets: [{
                             label: 'Items Sold',
                             data: movementData.map(item => item.sold || item.sales || 0),
                             backgroundColor: generateDistinctColors(movementData.length),
                             borderWidth: 2
                         }]
                     };
                 default:
                     return { labels: ['No Data'], datasets: [{ data: [0], backgroundColor: ['#e5e7eb'] }] };
             }
         }

         // Generate reports
         function generateReports() {
             console.log('🔄 Generating reports...');
             loadReportsData();
         }

         // Export report function
         async function exportReport(format) {
             console.log('📤 Exporting report in format:', format);

             try {
                 showLoading(true);

                 if (!currentData) {
                     showToast('No data available to export. Please wait for data to load.', 'error');
                     showLoading(false);
                     return;
                 }

                 const startDateInput = document.getElementById('startDate');
                 const endDateInput = document.getElementById('endDate');

                 const requestBody = {
                     reportType: currentDataView || 'sales',
                     format: format,
                     startDate: startDateInput ? startDateInput.value : new Date().toISOString().split('T')[0],
                     endDate: endDateInput ? endDateInput.value : new Date().toISOString().split('T')[0],
                     includeCharts: true
                 };

                 console.log('📤 Export request body:', requestBody);

                 const response = await fetch('/Admin/ExportReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'Accept': 'application/json, application/octet-stream',
                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                     },
                     body: JSON.stringify(requestBody)
                 });

                 console.log('📡 Export response status:', response.status);

                 if (response.ok) {
                     const contentType = response.headers.get('content-type');
                     console.log('📄 Response content type:', contentType);

                     if (contentType && (contentType.includes('application/pdf') ||
                                        contentType.includes('application/vnd.openxmlformats') ||
                                        contentType.includes('text/csv'))) {
                         const blob = await response.blob();
                         const url = window.URL.createObjectURL(blob);
                         const a = document.createElement('a');
                         a.href = url;
                         a.download = `${currentDataView || 'sales'}_report_${new Date().toISOString().split('T')[0]}.${format === 'excel' ? 'xlsx' : format}`;
                         document.body.appendChild(a);
                         a.click();
                         document.body.removeChild(a);
                         window.URL.revokeObjectURL(url);

                         showToast('Report exported successfully!', 'success');
                     } else {
                         const result = await response.json();
                         if (result.success === false) {
                             throw new Error(result.message || 'Export failed');
                         } else {
                             showToast('Report export completed!', 'success');
                         }
                     }
                 } else {
                     const errorText = await response.text();
                     console.error('❌ Export error:', errorText);
                     throw new Error(`Export failed with status ${response.status}`);
                 }
             } catch (error) {
                 console.error('❌ Export error:', error);
                 showToast('Error exporting report: ' + error.message, 'error');
             } finally {
                 showLoading(false);
             }
         }

         // Print dashboard
         async function printDashboard() {
             console.log('🖨️ Generating comprehensive PDF report...');
             try {
                 showToast('Generating comprehensive report for printing...', 'info');
                 const response = await fetch('/Admin/ExportReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                     },
                     body: JSON.stringify({
                         reportType: 'comprehensive',
                         format: 'pdf',
                         startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
                         endDate: new Date().toISOString().split('T')[0]
                     })
                 });

                 if (response.ok) {
                     const blob = await response.blob();
                     const url = window.URL.createObjectURL(blob);

                     const printWindow = window.open(url, '_blank');
                     if (printWindow) {
                         printWindow.onload = function() {
                             printWindow.print();
                         };
                     } else {
                         const a = document.createElement('a');
                         a.href = url;
                         a.download = `Comprehensive_Business_Report_${new Date().toISOString().split('T')[0]}.pdf`;
                         document.body.appendChild(a);
                         a.click();
                         document.body.removeChild(a);
                     }

                     window.URL.revokeObjectURL(url);
                     showToast('Comprehensive report generated successfully!', 'success');
                 } else {
                     throw new Error('Failed to generate comprehensive report');
                 }
             } catch (error) {
                 console.error('❌ Error generating comprehensive report:', error);
                 showToast('Failed to generate comprehensive report', 'error');
             }
         }

         // Additional report functions
         async function generateInventoryReport() {
             console.log('📦 Generating Inventory Report PDF...');
             try {
                 const response = await fetch('/Admin/ExportReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                     },
                     body: JSON.stringify({
                         reportType: 'inventory',
                         format: 'pdf',
                         startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
                         endDate: new Date().toISOString().split('T')[0]
                     })
                 });

                 if (response.ok) {
                     const blob = await response.blob();
                     const url = window.URL.createObjectURL(blob);
                     const a = document.createElement('a');
                     a.href = url;
                     a.download = `Inventory_Report_${new Date().toISOString().split('T')[0]}.pdf`;
                     document.body.appendChild(a);
                     a.click();
                     document.body.removeChild(a);
                     window.URL.revokeObjectURL(url);
                     showToast('Inventory Report downloaded successfully!', 'success');
                 } else {
                     throw new Error('Failed to generate report');
                 }
             } catch (error) {
                 console.error('❌ Error generating inventory report:', error);
                 showToast('Failed to generate Inventory Report', 'error');
             }
         }

         async function generateSupplierReport() {
             console.log('🏪 Generating Supplier Report PDF...');
             try {
                 const response = await fetch('/Admin/ExportReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                     },
                     body: JSON.stringify({
                         reportType: 'suppliers',
                         format: 'pdf',
                         startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
                         endDate: new Date().toISOString().split('T')[0]
                     })
                 });

                 if (response.ok) {
                     const blob = await response.blob();
                     const url = window.URL.createObjectURL(blob);
                     const a = document.createElement('a');
                     a.href = url;
                     a.download = `Supplier_Report_${new Date().toISOString().split('T')[0]}.pdf`;
                     document.body.appendChild(a);
                     a.click();
                     document.body.removeChild(a);
                     window.URL.revokeObjectURL(url);
                     showToast('Supplier Report downloaded successfully!', 'success');
                 } else {
                     throw new Error('Failed to generate report');
                 }
             } catch (error) {
                 console.error('❌ Error generating supplier report:', error);
                 showToast('Failed to generate Supplier Report', 'error');
             }
         }

         async function generateUserReport() {
             console.log('👥 Generating User Activity Report PDF...');
             try {
                 const response = await fetch('/Admin/ExportReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json',
                         'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                     },
                     body: JSON.stringify({
                         reportType: 'users',
                         format: 'pdf',
                         startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1).toISOString().split('T')[0],
                         endDate: new Date().toISOString().split('T')[0]
                     })
                 });

                 if (response.ok) {
                     const blob = await response.blob();
                     const url = window.URL.createObjectURL(blob);
                     const a = document.createElement('a');
                     a.href = url;
                     a.download = `User_Activity_Report_${new Date().toISOString().split('T')[0]}.pdf`;
                     document.body.appendChild(a);
                     a.click();
                     document.body.removeChild(a);
                     window.URL.revokeObjectURL(url);
                     showToast('User Activity Report downloaded successfully!', 'success');
                 } else {
                     throw new Error('Failed to generate report');
                 }
             } catch (error) {
                 console.error('❌ Error generating user report:', error);
                 showToast('Failed to generate User Activity Report', 'error');
             }
         }

         // Modal functions
         function showExportModal() {
             document.getElementById('exportModal').style.display = 'block';
         }

         function showEmailModal() {
             document.getElementById('emailModal').style.display = 'block';
         }

         function showReceiptModal() {
             document.getElementById('receiptModal').style.display = 'block';
         }

         // Perform export from modal
         function performExport() {
             const reportType = document.getElementById('exportReportType').value;
             const format = document.getElementById('exportFormat').value;

             console.log('📤 Performing export:', { reportType, format });
             exportReport(format);
             closeModal('exportModal');
         }

         // Send report email
         async function sendReportEmail() {
             const email = document.getElementById('emailAddress').value;
             const reportType = document.getElementById('emailReportType').value;
             const message = document.getElementById('emailMessage').value;

             if (!email) {
                 showToast('Please enter an email address', 'warning');
                 return;
             }

             try {
                 showLoading(true);

                 const requestBody = {
                     email: email,
                     reportType: reportType,
                     message: message,
                     startDate: document.getElementById('startDate')?.value || '',
                     endDate: document.getElementById('endDate')?.value || ''
                 };

                 const response = await fetch('/Admin/EmailReport', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json'
                     },
                     body: JSON.stringify(requestBody)
                 });

                 const result = await response.json();

                 if (result.success) {
                     showToast('Email sent successfully!', 'success');
                     closeModal('emailModal');
                 } else {
                     showToast('Error sending email: ' + result.message, 'error');
                 }
             } catch (error) {
                 console.error('❌ Error sending email:', error);
                 showToast('Error sending email: ' + error.message, 'error');
             } finally {
                 showLoading(false);
             }
         }

         // Search sales
         async function searchSales() {
             const searchTerm = document.getElementById('saleSearch').value;
             console.log('🔍 Searching sales:', searchTerm);

             try {
                 const response = await fetch(`/Admin/GetSalesForReceipt?search=${encodeURIComponent(searchTerm)}`);
                 const result = await response.json();

                 if (result.success) {
                     const select = document.getElementById('saleSelect');
                     select.innerHTML = '<option value="">Select a sale...</option>' +
                         result.sales.map(sale =>
                             `<option value="${sale.saleId}" data-sale='${JSON.stringify(sale)}'>
                                 Sale #${sale.saleNumber} - ${sale.customerName} - KSh ${sale.totalAmount.toLocaleString()}
                             </option>`
                         ).join('');
                 }
             } catch (error) {
                 console.error('❌ Error searching sales:', error);
                 showToast('Error searching sales', 'error');
             }
         }

         // Show sale details
         function showSaleDetails() {
             const select = document.getElementById('saleSelect');
             const selectedOption = select.options[select.selectedIndex];

             if (!selectedOption.value) {
                 document.getElementById('saleDetails').style.display = 'none';
                 return;
             }

             const sale = JSON.parse(selectedOption.dataset.sale);
             const detailsDiv = document.getElementById('saleDetails');

             detailsDiv.innerHTML = `
                 <h4>Sale Details</h4>
                 <p><strong>Sale Number:</strong> #${sale.saleNumber}</p>
                 <p><strong>Customer:</strong> ${sale.customerName}</p>
                 <p><strong>Amount:</strong> KSh ${sale.totalAmount.toLocaleString()}</p>
                 <p><strong>Date:</strong> ${new Date(sale.saleDate).toLocaleDateString()}</p>
             `;

             detailsDiv.style.display = 'block';

             if (sale.customerEmail) {
                 document.getElementById('receiptEmail').value = sale.customerEmail;
             }
         }

         // Send receipt email
         async function sendReceiptEmail() {
             const select = document.getElementById('saleSelect');
             const email = document.getElementById('receiptEmail').value;

             if (!select.value) {
                 showToast('Please select a sale', 'warning');
                 return;
             }

             if (!email) {
                 showToast('Please enter an email address', 'warning');
                 return;
             }

             try {
                 showLoading(true);

                 const requestBody = {
                     email: email,
                     saleId: parseInt(select.value)
                 };

                 const response = await fetch('/Admin/EmailReceipt', {
                     method: 'POST',
                     headers: {
                         'Content-Type': 'application/json'
                     },
                     body: JSON.stringify(requestBody)
                 });

                 const result = await response.json();

                 if (result.success) {
                     showToast('Receipt sent successfully!', 'success');
                     closeModal('receiptModal');
                 } else {
                     showToast('Error sending receipt: ' + result.message, 'error');
                 }
             } catch (error) {
                 console.error('❌ Error sending receipt:', error);
                 showToast('Error sending receipt: ' + error.message, 'error');
             } finally {
                 showLoading(false);
             }
         }

         console.log('✅ Reports JavaScript loaded successfully');
    </script>
}

<!-- Hidden form for CSRF token -->
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>