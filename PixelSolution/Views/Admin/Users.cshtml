@model PixelSolution.ViewModels.EmployeeListViewModel
@{
    ViewData["Title"] = "Employee Management - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .users-container {
            background: #f8fafc;
            min-height: calc(100vh - 80px);
            padding: 2rem 0;
        }

        .page-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 2rem;
            border-radius: 16px;
            margin-bottom: 2rem;
            box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);
        }

        .page-title {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .page-subtitle {
            opacity: 0.9;
            font-size: 1.1rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border-left: 4px solid var(--accent-color);
            transition: all 0.3s ease;
        }

            .stat-card:hover {
                transform: translateY(-4px);
                box-shadow: 0 8px 30px rgba(0,0,0,0.12);
            }

            .stat-card.employees {
                --accent-color: #3b82f6;
            }

            .stat-card.active {
                --accent-color: #10b981;
            }

            .stat-card.inactive {
                --accent-color: #ef4444;
            }

            .stat-card.budget {
                --accent-color: #f59e0b;
            }

        .stat-icon {
            width: 48px;
            height: 48px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 1rem;
            font-size: 1.5rem;
            color: white;
            background: var(--accent-color);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .stat-label {
            color: #64748b;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .controls-section {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .controls-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .search-filters {
            display: grid;
            grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
            gap: 1rem;
            align-items: end;
        }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        .form-label {
            font-weight: 600;
            color: #374151;
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .form-control {
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
            background: white;
        }

            .form-control:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            justify-content: center;
            font-size: 0.875rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

            .btn-secondary:hover {
                background: #4b5563;
            }

        .btn-outline {
            background: transparent;
            color: #667eea;
            border: 2px solid #667eea;
        }

            .btn-outline:hover {
                background: #667eea;
                color: white;
            }

        .employees-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
            gap: 1.5rem;
            margin-top: 2rem;
        }

        .employee-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .employee-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(135deg, #667eea, #764ba2);
            }

            .employee-card:hover {
                transform: translateY(-8px);
                box-shadow: 0 12px 40px rgba(0,0,0,0.15);
            }

            .employee-card.inactive {
                opacity: 0.7;
            }

        .employee-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .employee-avatar {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background: linear-gradient(135deg, #667eea, #764ba2);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 700;
            font-size: 1.5rem;
            margin-right: 1rem;
            position: relative;
        }

        .status-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 16px;
            height: 16px;
            border-radius: 50%;
            border: 3px solid white;
        }

            .status-indicator.active {
                background: #10b981;
            }

            .status-indicator.inactive {
                background: #ef4444;
            }

        .employee-info h3 {
            font-size: 1.25rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .employee-info .subtitle {
            color: #64748b;
            font-size: 0.875rem;
            margin-bottom: 0.25rem;
        }

        .employee-badges {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .badge {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

            .badge.active {
                background: #dcfdf7;
                color: #059669;
            }

            .badge.inactive {
                background: #fef2f2;
                color: #dc2626;
            }

            .badge.employee {
                background: #dbeafe;
                color: #2563eb;
            }

            .badge.admin {
                background: #f3e8ff;
                color: #7c3aed;
            }

            .badge.manager {
                background: #ecfdf5;
                color: #059669;
            }

        .employee-details {
            margin: 1.5rem 0;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f5f9;
        }

            .detail-row:last-child {
                border-bottom: none;
            }

        .detail-label {
            font-weight: 600;
            color: #374151;
            font-size: 0.875rem;
        }

        .detail-value {
            color: #6b7280;
            font-size: 0.875rem;
        }

            .detail-value.highlight {
                color: #059669;
                font-weight: 600;
            }

        .employee-actions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 0.5rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #f1f5f9;
            position: relative;
            z-index: 5;
        }

        .action-btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 0.25rem;
            text-decoration: none;
            text-align: center;
            position: relative;
            z-index: 10;
        }

            .action-btn.view {
                background: #f0f9ff;
                color: #0284c7;
            }

                .action-btn.view:hover {
                    background: #0284c7;
                    color: white;
                }

            .action-btn.edit {
                background: #fef3c7;
                color: #d97706;
            }

                .action-btn.edit:hover {
                    background: #d97706;
                    color: white;
                }

            .action-btn.activate {
                background: #dcfdf7;
                color: #059669;
            }

                .action-btn.activate:hover {
                    background: #059669;
                    color: white;
                }

            .action-btn.deactivate {
                background: #fef2f2;
                color: #dc2626;
            }

                .action-btn.deactivate:hover {
                    background: #dc2626;
                    color: white;
                }

            .action-btn.delete {
                background: #fef2f2;
                color: #dc2626;
            }

                .action-btn.delete:hover {
                    background: #dc2626;
                    color: white;
                }

        /* Mobile Responsive */
            @@media (max-width: 768px) {
            .users-container

        {
            padding: 1rem;
        }

        .page-header {
            padding: 1.5rem;
            text-align: center;
        }

        .page-title {
            font-size: 1.5rem;
        }

        .stats-grid {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
        }

        .controls-header {
            flex-direction: column;
            align-items: stretch;
        }

        .search-filters {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .employees-grid {
            grid-template-columns: 1fr;
            gap: 1rem;
        }

        .employee-actions {
            grid-template-columns: repeat(2, 1fr);
        }

        }

            @@media (max-width: 480px) {
            .employee-header

        {
            flex-direction: column;
            text-align: center;
        }

        .employee-avatar {
            margin-right: 0;
            margin-bottom: 1rem;
        }

        .employee-actions {
            grid-template-columns: 1fr;
            gap: 0.5rem;
        }

        }

        .empty-state {
            text-align: center;
            padding: 4rem 2rem;
            color: #6b7280;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            background-color: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            animation: modalSlideIn 0.3s ease-out;
        }

        @@keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 12px 12px 0 0;
        }

        .modal-title {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .close-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: background-color 0.2s;
        }

        .close-btn:hover {
            background-color: rgba(255,255,255,0.1);
        }

        .modal form {
            padding: 1.5rem;
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .btn-primary:hover {
            background: #5a67d8;
        }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-secondary:hover {
            background: #4b5563;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@(User.Identity.Name?.Length >= 2 ? User.Identity.Name.Substring(0, 2).ToUpper() : "U")</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>@(User.IsInRole("Admin") ? "System Administrator" : User.IsInRole("Manager") ? "Manager" : "Employee")</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager") || User.IsInRole("Employee"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                        <i class="fas fa-shopping-cart"></i>
                        Sales
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                        <i class="fas fa-box"></i>
                        Inventory
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Users", "Admin")" class="nav-link active">
                        <i class="fas fa-users"></i>
                        Employees
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                        <i class="fas fa-building"></i>
                        Departments
                    </a>
                </div>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                        <i class="fas fa-truck"></i>
                        Suppliers
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                        <i class="fas fa-tags"></i>
                        Categories
                    </a>
                </div>
                <div class="nav-item">
                    <a href="@Url.Action("Products", "Admin")" class="nav-link">
                        <i class="fas fa-cube"></i>
                        Products
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                        <i class="fas fa-file-invoice"></i>
                        Purchase Requests
                    </a>
                </div>
            }
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            @if (User.IsInRole("Admin") || User.IsInRole("Manager"))
            {
                <div class="nav-item">
                    <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                        <i class="fas fa-chart-bar"></i>
                        Reports
                    </a>
                </div>
            }
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Employee Management</h1>
        </div>
        <div class="header-right">
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <div class="dashboard-content users-container">
        <!-- Page Header -->
        <div class="page-header">
            <h1 class="page-title">
                <i class="fas fa-users"></i>
                Employee Management
            </h1>
            <p class="page-subtitle">Manage your team members, roles, and employee information</p>
        </div>

        <!-- Statistics Cards -->
        <div class="stats-grid">
            <div class="stat-card employees">
                <div class="stat-icon">
                    <i class="fas fa-users"></i>
                </div>
                <div class="stat-value">@Model.TotalEmployees</div>
                <div class="stat-label">Total Employees</div>
            </div>
            <div class="stat-card active">
                <div class="stat-icon">
                    <i class="fas fa-user-check"></i>
                </div>
                <div class="stat-value">@Model.ActiveEmployees</div>
                <div class="stat-label">Active</div>
            </div>
            <div class="stat-card inactive">
                <div class="stat-icon">
                    <i class="fas fa-user-times"></i>
                </div>
                <div class="stat-value">@Model.InactiveEmployees</div>
                <div class="stat-label">Inactive</div>
            </div>
            <div class="stat-card budget">
                <div class="stat-icon">
                    <i class="fas fa-money-bill-wave"></i>
                </div>
                <div class="stat-value">KSh @Model.TotalSalariesBudget.ToString("N0")</div>
                <div class="stat-label">Total Budget</div>
            </div>
        </div>

        <!-- Controls Section -->
        <div class="controls-section">
            <div class="controls-header">
                <h3 style="margin: 0; color: #1e293b;">
                    <i class="fas fa-filter"></i>
                    Filter & Search Employees
                </h3>
                <div>
                    <button class="btn btn-primary" onclick="openNewEmployeeModal()">
                        <i class="fas fa-plus"></i>
                        Add New Employee
                    </button>
                    <button class="btn btn-secondary" onclick="exportEmployees()">
                        <i class="fas fa-download"></i>
                        Export
                    </button>
                </div>
            </div>

            <form method="get" class="search-filters">
                <div class="form-group">
                    <label class="form-label">Search Employees</label>
                    <input type="text" name="searchTerm" value="@Model.SearchTerm"
                           class="form-control" placeholder="Search by name, email, or employee number...">
                </div>
                <div class="form-group">
                    <label class="form-label">Status</label>
                    <select name="statusFilter" class="form-control" onchange="this.form.submit()">
                        <option value="">All Status</option>
                        @foreach (var status in Model.AvailableStatuses)
                        {
                            <option value="@status" selected="@(status == Model.StatusFilter)">@status</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">User Type</label>
                    <select name="userTypeFilter" class="form-control" onchange="this.form.submit()">
                        <option value="">All Types</option>
                        @foreach (var type in Model.AvailableUserTypes)
                        {
                            <option value="@type" selected="@(type == Model.UserTypeFilter)">@type</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label">Department</label>
                    <select name="departmentFilter" class="form-control" onchange="this.form.submit()">
                        <option value="">All Departments</option>
                        @foreach (var dept in Model.AvailableDepartments)
                        {
                            <option value="@dept.DepartmentId" selected="@(dept.DepartmentId.ToString() == Model.DepartmentFilter)">@dept.Name</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-search"></i>
                        Search
                    </button>
                </div>
            </form>
        </div>

        <!-- Employees Grid -->
        <div class="employees-grid" id="employeesGrid">
            @if (Model.Employees?.Any() == true)
            {
                @foreach (var employee in Model.Employees)
                {
                    <div class="employee-card @(employee.Status != "Active" ? "inactive" : "")" data-employee-id="@employee.UserId">
                        <div class="employee-header">
                            <div class="employee-avatar">
                                @employee.UserInitials
                                <div class="status-indicator @employee.Status.ToLower()"></div>
                            </div>
                            <div class="employee-info">
                                <h3>@employee.FullName</h3>
                                <div class="subtitle">@employee.Email</div>
                                <div class="employee-badges">
                                    <span class="badge @employee.Status.ToLower()">@employee.Status</span>
                                    <span class="badge @employee.UserType.ToLower()">@employee.UserType</span>
                                    @if (!string.IsNullOrEmpty(employee.EmploymentStatus) && employee.EmploymentStatus != "Active")
                                    {
                                        <span class="badge @employee.EmploymentStatus.ToLower()">@employee.EmploymentStatus</span>
                                    }
                                </div>
                            </div>
                        </div>

                        <div class="employee-details">
                            @if (!string.IsNullOrEmpty(employee.Position))
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Position</span>
                                    <span class="detail-value">@employee.Position</span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(employee.EmployeeNumber))
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Employee #</span>
                                    <span class="detail-value">@employee.EmployeeNumber</span>
                                </div>
                            }
                            @if (employee.HireDate.HasValue)
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Hire Date</span>
                                    <span class="detail-value">@employee.HireDate.Value.ToString("MMM dd, yyyy")</span>
                                </div>
                            }
                            @if (employee.BaseSalary.HasValue)
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Salary</span>
                                    <span class="detail-value highlight">KSh @employee.BaseSalary.Value.ToString("N2")</span>
                                </div>
                            }
                            @if (employee.TotalSales > 0)
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Total Sales</span>
                                    <span class="detail-value highlight">@employee.TotalSales (@employee.TotalSalesAmount.ToString("C"))</span>
                                </div>
                            }
                            @if (!string.IsNullOrEmpty(employee.DepartmentNames))
                            {
                                <div class="detail-row">
                                    <span class="detail-label">Department</span>
                                    <span class="detail-value">@employee.DepartmentNames</span>
                                </div>
                            }
                        </div>

                        <div class="employee-actions">
                            <!-- View Link - Always visible -->
                            <a class="action-btn view" title="View Details"
                               href="/userdetails/@employee.UserId">
                                <i class="fas fa-eye"></i>
                                View
                            </a>

                            @if (User.IsInRole("Admin"))
                            {
                                <!-- Edit Button -->
                                <button class="action-btn edit"
                                        onclick="editUser(@employee.UserId)"
                                        title="Edit Employee">
                                    <i class="fas fa-edit"></i>
                                    Edit
                                </button>

                                <!-- Activate/Deactivate Button -->
                                @if (employee.Status == "Active")
                                {
                                    <button class="action-btn deactivate"
                                            onclick="toggleEmployeeStatus(@employee.UserId, 'Inactive')"
                                            title="Deactivate Employee">
                                        <i class="fas fa-user-slash"></i>
                                        Deactivate
                                    </button>
                                }
                                else
                                {
                                    <button class="action-btn activate"
                                            onclick="toggleEmployeeStatus(@employee.UserId, 'Active')"
                                            title="Activate Employee">
                                        <i class="fas fa-user-check"></i>
                                        Activate
                                    </button>
                                }

                                <!-- Delete Button (optional, can be hidden for production) -->
                                <button class="action-btn delete"
                                        onclick="deleteEmployee(@employee.UserId, '@employee.FullName')"
                                        title="Delete Employee">
                                    <i class="fas fa-trash"></i>
                                    Delete
                                </button>
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="empty-state">
                    <i class="fas fa-users empty-state-icon"></i>
                    <h3>No Employees Found</h3>
                    <p>No employees match your current search criteria.</p>
                    <button class="btn btn-primary" onclick="openNewEmployeeModal()">
                        <i class="fas fa-plus"></i>
                        Add First Employee
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create/Edit User Modal (kept for edit functionality) -->
<div id="userModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle" class="modal-title">Edit User</h2>
            <button class="close-btn" onclick="closeUserModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <form id="userForm">
            @Html.AntiForgeryToken()
            <input type="hidden" id="userId" name="UserId">

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label" for="firstName">First Name *</label>
                    <input type="text" id="firstName" name="FirstName" class="form-control" required maxlength="100">
                </div>
                <div class="form-group">
                    <label class="form-label" for="lastName">Last Name *</label>
                    <input type="text" id="lastName" name="LastName" class="form-control" required maxlength="100">
                </div>
            </div>

            <div class="form-group">
                <label class="form-label" for="email">Email Address *</label>
                <input type="email" id="email" name="Email" class="form-control" required maxlength="255">
            </div>

            <div class="form-group">
                <label class="form-label" for="phone">Phone Number</label>
                <input type="tel" id="phone" name="Phone" class="form-control" maxlength="20">
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label class="form-label" for="userType">User Type *</label>
                    <select id="userType" name="UserType" class="form-control" required>
                        <option value="">Select Role</option>
                        <option value="Admin">Admin</option>
                        <option value="Manager">Manager</option>
                        <option value="Employee">Employee</option>
                    </select>
                </div>
                <div class="form-group">
                    <label class="form-label" for="isActive">Status</label>
                    <select id="isActive" name="IsActive" class="form-control">
                        <option value="true">Active</option>
                        <option value="false">Inactive</option>
                    </select>
                </div>
            </div>

            <div class="form-group">
                <label class="form-label" for="newPassword">New Password</label>
                <input type="password" id="newPassword" name="NewPassword" class="form-control" minlength="6"
                       placeholder="Leave blank to keep current password">
            </div>

            <div class="form-group">
                <label class="form-label" for="confirmNewPassword">Confirm New Password</label>
                <input type="password" id="confirmNewPassword" name="ConfirmNewPassword" class="form-control" minlength="6"
                       placeholder="Confirm new password">
            </div>

            <div style="display: flex; justify-content: flex-end; gap: 0.5rem; margin-top: 1.25rem;">
                <button type="button" class="btn btn-secondary" onclick="closeUserModal()">Cancel</button>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-save"></i> Update User
                </button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        var allEmployees = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Employees ?? new List<PixelSolution.ViewModels.EmployeeCardViewModel>()));

        function editUser(userId) {
            console.log('Opening edit modal for user:', userId);

            // Find employee data
            var employee = allEmployees.find(function(e) { return e.UserId === userId; });
            if (!employee) {
                showToast('Employee data not found. Please refresh the page.', 'error');
                return;
            }

            // Split full name
            var nameParts = employee.FullName.split(' ');
            var firstName = nameParts[0] || '';
            var lastName = nameParts.slice(1).join(' ') || '';

            // Populate form
            document.getElementById('modalTitle').textContent = 'Edit Employee';
            document.getElementById('userId').value = employee.UserId;
            document.getElementById('firstName').value = firstName;
            document.getElementById('lastName').value = lastName;
            document.getElementById('email').value = employee.Email;
            document.getElementById('phone').value = employee.Phone || '';
            document.getElementById('userType').value = employee.UserType;
            document.getElementById('isActive').value = employee.Status === 'Active' ? 'true' : 'false';

            // Clear password fields and make them optional for editing
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmNewPassword').value = '';
            document.getElementById('newPassword').required = false;
            document.getElementById('confirmNewPassword').required = false;

            // Update submit button
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save"></i> Update Employee';

            // Show modal
            document.getElementById('userModal').style.display = 'flex';
        }

        function closeUserModal() {
            console.log('Closing user modal');
            document.getElementById('userModal').style.display = 'none';
            document.getElementById('userForm').reset();
            
            // Reset password field requirements
            document.getElementById('newPassword').required = false;
            document.getElementById('confirmNewPassword').required = false;
        }

        function toggleEmployeeStatus(userId, newStatus) {
            console.log('Toggling employee status:', userId, newStatus);
            if (confirm(`Are you sure you want to ${newStatus.toLowerCase()} this employee?`)) {
                var requestData = {
                    UserId: userId,
                    Status: newStatus
                };

                fetch('@Url.Action("ToggleUserStatus", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => {
                    console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Response data:', data);
                    if (data.success) {
                        showToast(data.message || `Employee ${newStatus.toLowerCase()}d successfully`, 'success');
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showToast(data.message || 'Error updating employee status', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error details:', error);
                    showToast('Error updating employee status: ' + error.message, 'error');
                });
            }
        }

        function deleteEmployee(userId, employeeName) {
            console.log('Deleting employee:', userId, employeeName);
            if (confirm(`Are you sure you want to delete employee "${employeeName}"? This action cannot be undone.`)) {
                var requestData = {
                    UserId: userId
                };

                fetch('@Url.Action("DeleteUser", "Admin")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(requestData)
                })
                .then(response => {
                    console.log('Delete response status:', response.status);
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Delete response data:', data);
                    if (data.success) {
                        showToast('Employee deleted successfully', 'success');
                        setTimeout(() => {
                            location.reload();
                        }, 1500);
                    } else {
                        showToast(data.message || 'Error deleting employee', 'error');
                    }
                })
                .catch(error => {
                    console.error('Delete error details:', error);
                    showToast('Error deleting employee: ' + error.message, 'error');
                });
            }
        }

        function viewEmployeeDetails(userId) {
            console.log('Viewing employee details for user:', userId);
            
            // Validate userId before navigation
            if (!userId || userId <= 0) {
                console.error('Invalid user ID:', userId);
                showToast('Invalid user ID', 'error');
                return;
            }
            
            // Use server-generated route to avoid hardcoded paths
            var urlTemplate = '@Url.Action("UserDetails", "Admin", new { id = "__ID__" })';
            var url = urlTemplate.replace('__ID__', userId);
            console.log('Redirecting to:', url, 'with userId:', userId);
            window.location.href = url;
        }

        function exportEmployees() {
            window.location.href = '@Url.Action("ExportEmployees", "Admin")';
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                max-width: 300px;
                font-weight: 500;
            `;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 5000);
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        function openNewEmployeeModal() {
            console.log('Opening new employee modal');
            
            // Clear form for new employee
            document.getElementById('modalTitle').textContent = 'Add New Employee';
            document.getElementById('userId').value = '0';
            document.getElementById('firstName').value = '';
            document.getElementById('lastName').value = '';
            document.getElementById('email').value = '';
            document.getElementById('phone').value = '';
            document.getElementById('userType').value = '';
            document.getElementById('isActive').value = 'true';
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmNewPassword').value = '';
            
            // Make password fields required for new employee
            document.getElementById('newPassword').required = true;
            document.getElementById('confirmNewPassword').required = true;
            
            // Update submit button
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-plus"></i> Create Employee';
            
            // Show modal
            document.getElementById('userModal').style.display = 'flex';
        }

        // Form submission for edit modal
        document.getElementById('userForm').addEventListener('submit', function(e) {
            e.preventDefault();

            var formData = new FormData(this);
            var userData = {
                UserId: parseInt(formData.get('UserId')) || 0,
                FirstName: formData.get('FirstName').trim(),
                LastName: formData.get('LastName').trim(),
                Email: formData.get('Email').trim(),
                Phone: formData.get('Phone') ? formData.get('Phone').trim() : null,
                UserType: formData.get('UserType'),
                IsActive: formData.get('IsActive') === 'true'
            };

            // Validation
            if (!userData.FirstName || !userData.LastName || !userData.Email || !userData.UserType) {
                showToast('Please fill in all required fields.', 'error');
                return;
            }

            // For new employees, password is required
            var isNewEmployee = !userData.UserId || userData.UserId === 0;
            if (isNewEmployee && (!formData.get('NewPassword') || !formData.get('NewPassword').trim())) {
                showToast('Password is required for new employees.', 'error');
                return;
            }

            var newPassword = formData.get('NewPassword');
            var confirmNewPassword = formData.get('ConfirmNewPassword');

            if (newPassword && newPassword.trim()) {
                if (newPassword !== confirmNewPassword) {
                    showToast('New passwords do not match.', 'error');
                    return;
                }
                userData.NewPassword = newPassword;
                userData.ConfirmNewPassword = confirmNewPassword;
            }

            var submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            var isNewEmployee = !userData.UserId || userData.UserId === 0;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ' + (isNewEmployee ? 'Creating...' : 'Updating...');

            var isNewEmployee = !userData.UserId || userData.UserId === 0;
            var actionUrl = isNewEmployee ? '@Url.Action("CreateUser", "Admin")' : '@Url.Action("UpdateUser", "Admin")';
            
            fetch(actionUrl, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': getAntiForgeryToken()
                },
                body: JSON.stringify(userData)
            })
            .then(response => response.json())
            .then(result => {
                if (result.success) {
                    var message = userData.UserId ? 'Employee updated successfully!' : 'Employee created successfully!';
                    showToast(message, 'success');
                    closeUserModal();
                    setTimeout(() => {
                        location.reload();
                    }, 1000);
                } else {
                    showToast('Error: ' + (result.message || 'Failed to update employee'), 'error');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                showToast('An error occurred while updating the employee.', 'error');
            })
            .finally(() => {
                submitBtn.disabled = false;
                var isEdit = document.getElementById('userId').value;
                submitBtn.innerHTML = isEdit ? '<i class="fas fa-save"></i> Update User' : '<i class="fas fa-plus"></i> Create Employee';
            });
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            var modal = document.getElementById('userModal');
            if (event.target === modal) {
                closeUserModal();
            }
        });
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>