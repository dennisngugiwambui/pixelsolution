@{
    ViewData["Title"] = "M-Pesa Test";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h4>üß™ M-Pesa STK Push Test</h4>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="testPhone" class="form-label">Phone Number (254XXXXXXXXX)</label>
                        <input type="text" class="form-control" id="testPhone" placeholder="254712345678">
                    </div>
                    <div class="mb-3">
                        <label for="testAmount" class="form-label">Amount (KSh)</label>
                        <input type="number" class="form-control" id="testAmount" value="1" min="1">
                    </div>
                    <div class="mb-3">
                        <label for="checkoutRequestId" class="form-label">Checkout Request ID (for status query)</label>
                        <input type="text" class="form-control" id="checkoutRequestId" placeholder="ws_CO_12345678901234567890">
                    </div>
                    <div class="d-grid gap-2">
                        <button type="button" class="btn btn-primary" onclick="testToken()">üîë Test Token</button>
                        <button type="button" class="btn btn-info" onclick="testTokenCaching()">üîÑ Test Token Caching</button>
                        <button type="button" class="btn btn-success" onclick="testStkPush()">üì± Test STK Push (Original)</button>
                        <button type="button" class="btn btn-warning" onclick="testLaravelStkPush()">üöÄ Test Laravel-Style STK Push</button>
                        <button type="button" class="btn btn-info" onclick="testMpesaMiddleware()">üîß Test M-Pesa Middleware</button>
                        <button type="button" class="btn btn-secondary" onclick="queryStkStatus()">üîç Query STK Status</button>
                        <button type="button" class="btn btn-light" onclick="testB2C()">üí∏ Test B2C (Future)</button>
                        <button type="button" class="btn btn-danger btn-sm" onclick="clearResults()">üóëÔ∏è Clear Results</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>üìã Test Results</h5>
                </div>
                <div class="card-body">
                    <div id="testResults" style="font-family: monospace; font-size: 12px; max-height: 400px; overflow-y: auto;">
                        Ready for testing...
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function logResult(message, type = 'info') {
    const results = document.getElementById('testResults');
    const timestamp = new Date().toLocaleTimeString();
    const color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'blue';
    results.innerHTML += `<div style="color: ${color}; margin-bottom: 5px;">[${timestamp}] ${message}</div>`;
    results.scrollTop = results.scrollHeight;
}

async function testToken() {
    logResult('üîë Testing M-Pesa token generation...');
    try {
        const response = await fetch('/api/MpesaTest/test-token');
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ Token test successful: ${result.message}`, 'success');
            logResult(`Token length: ${result.tokenLength}`, 'info');
        } else {
            logResult(`‚ùå Token test failed: ${result.message}`, 'error');
        }
    } catch (error) {
        logResult(`üí• Token test error: ${error.message}`, 'error');
    }
}

async function testTokenCaching() {
    logResult('üîÑ Testing token caching mechanism (3 consecutive requests)...');
    try {
        const response = await fetch('/api/MpesaTest/test-token-caching');
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ Token caching test completed`, 'success');
            result.results.forEach((test, index) => {
                logResult(`Request ${test.requestNumber}: ${test.durationMs}ms - Token: ${test.tokenPreview}`, 'info');
            });
            logResult(result.note, 'info');
        } else {
            logResult(`‚ùå Token caching test failed: ${result.message}`, 'error');
        }
    } catch (error) {
        logResult(`üí• Token caching test error: ${error.message}`, 'error');
    }
}

async function testStkPush() {
    const phone = document.getElementById('testPhone').value;
    const amount = document.getElementById('testAmount').value;
    
    if (!phone || !amount) {
        logResult('‚ùå Please enter phone number and amount', 'error');
        return;
    }
    
    logResult(`üì± Testing STK Push to ${phone} for KSh ${amount}...`);
    
    try {
        const response = await fetch('/api/MpesaTest/test-stk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                phoneNumber: phone,
                amount: parseFloat(amount)
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ STK Push initiated successfully`, 'success');
            logResult(`Response Code: ${result.responseCode}`, 'info');
            logResult(`Response Description: ${result.responseDescription}`, 'info');
            logResult(`CheckoutRequestID: ${result.checkoutRequestId}`, 'info');
            logResult(`MerchantRequestID: ${result.merchantRequestId}`, 'info');
            
            // Auto-populate checkout request ID for status query
            document.getElementById('checkoutRequestId').value = result.checkoutRequestId;
            
            if (result.responseCode === '0') {
                logResult('üéâ STK Push should appear on your phone now!', 'success');
                logResult('üí° CheckoutRequestID has been auto-filled for status query', 'info');
            } else {
                logResult(`‚ö†Ô∏è STK Push may have failed. Check response code: ${result.responseCode}`, 'error');
            }
        } else {
            logResult(`‚ùå STK Push failed: ${result.message}`, 'error');
            if (result.stackTrace) {
                logResult(`Stack trace: ${result.stackTrace}`, 'error');
            }
        }
    } catch (error) {
        logResult(`üí• STK Push error: ${error.message}`, 'error');
    }
}

async function queryStkStatus() {
    const checkoutRequestId = document.getElementById('checkoutRequestId').value;
    
    if (!checkoutRequestId) {
        logResult('‚ùå Please enter CheckoutRequestID', 'error');
        return;
    }
    
    logResult(`üîç Querying STK Push status for: ${checkoutRequestId}...`);
    
    try {
        const response = await fetch('/api/MpesaTest/query-stk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                checkoutRequestId: checkoutRequestId
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ STK Push status retrieved successfully`, 'success');
            logResult(`Status Data: ${JSON.stringify(result.data, null, 2)}`, 'info');
        } else {
            logResult(`‚ùå STK Push query failed: ${result.message}`, 'error');
        }
    } catch (error) {
        logResult(`üí• STK Push query error: ${error.message}`, 'error');
    }
}

async function testB2C() {
    const phone = document.getElementById('testPhone').value;
    const amount = document.getElementById('testAmount').value;
    
    logResult(`üí∏ Testing B2C functionality (future feature)...`);
    
    try {
        const response = await fetch('/api/MpesaTest/test-b2c', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                phoneNumber: phone || '254712345678',
                amount: parseFloat(amount) || 10,
                remarks: 'Test B2C Payment',
                occasion: 'Testing'
            })
        });
        
        const result = await response.json();
        logResult(`‚ÑπÔ∏è ${result.message}`, 'info');
        logResult(`Note: ${result.note}`, 'info');
    } catch (error) {
        logResult(`üí• B2C test error: ${error.message}`, 'error');
    }
}

async function testLaravelStkPush() {
    const phone = document.getElementById('testPhone').value;
    const amount = document.getElementById('testAmount').value;
    
    if (!phone || !amount) {
        logResult('‚ùå Please enter phone number and amount', 'error');
        return;
    }
    
    logResult(`üöÄ Testing Laravel-style STK Push to ${phone} for KSh ${amount}...`);
    
    try {
        const response = await fetch('/api/MpesaTest/test-laravel-stk', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                phoneNumber: phone,
                amount: parseFloat(amount)
            })
        });
        
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ Laravel-style STK Push completed successfully`, 'success');
            logResult(`Response: ${JSON.stringify(result.data, null, 2)}`, 'info');
        } else {
            logResult(`‚ùå Laravel-style STK Push failed: ${result.message}`, 'error');
            if (result.error) {
                logResult(`Error details: ${result.error}`, 'error');
            }
        }
    } catch (error) {
        logResult(`üí• Laravel-style STK Push error: ${error.message}`, 'error');
    }
}

async function testMpesaMiddleware() {
    logResult('üîß Testing M-Pesa middleware token injection...');
    
    try {
        const response = await fetch('/api/MpesaPayment/test-token');
        const result = await response.json();
        
        if (result.success) {
            logResult(`‚úÖ Middleware test successful: ${result.message}`, 'success');
            logResult(`Token preview: ${result.tokenPreview}`, 'info');
        } else {
            logResult(`‚ùå Middleware test failed: ${result.message}`, 'error');
        }
    } catch (error) {
        logResult(`üí• Middleware test error: ${error.message}`, 'error');
    }
}

function clearResults() {
    document.getElementById('testResults').innerHTML = 'Ready for testing...';
}
</script>
