@model List<PixelSolution.ViewModels.ProductListViewModel>
@{
    ViewData["Title"] = "Products Management - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .products-container {
            padding: 1rem;
        }

        .product-card {
            background: white;
            border-radius: 16px;
            padding: 1.5rem;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            border-left: 4px solid #10b981;
            position: relative;
            overflow: hidden;
        }

            .product-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }

            .product-card.low-stock {
                border-left-color: #ef4444;
            }

            .product-card.inactive {
                border-left-color: #6b7280;
                opacity: 0.7;
            }

        .product-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            background: #f3f4f6;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #9ca3af;
            font-size: 1.5rem;
        }

        .product-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #f1f5f9;
        }

        .metric {
            text-align: center;
        }

        .metric-value {
            font-size: 1.1rem;
            font-weight: 700;
            color: #1e293b;
            display: block;
        }

        .metric-label {
            font-size: 0.75rem;
            color: #64748b;
            font-weight: 500;
            margin-top: 0.25rem;
        }

        .profit-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            padding: 0.25rem 0.5rem;
            border-radius: 6px;
            font-size: 0.75rem;
            font-weight: 600;
        }

        .profit-high {
            background: #dcfce7;
            color: #166534;
        }

        .profit-medium {
            background: #fef3c7;
            color: #92400e;
        }

        .profit-low {
            background: #fee2e2;
            color: #991b1b;
        }

        .quick-actions {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .status-indicator {
            position: absolute;
            top: 0.75rem;
            left: 0.75rem;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
        }

            .status-indicator.inactive {
                background: #ef4444;
            }

            .status-indicator.low-stock {
                background: #f59e0b;
            }

        .filters-bar {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            backdrop-filter: blur(8px);
        }

            .modal.show {
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 1rem;
            }

        .modal-content {
            background-color: white;
            margin: 1rem;
            padding: 0;
            border: none;
            border-radius: 16px;
            width: 100%;
            max-width: 900px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 1.5rem;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                outline: none;
                border-color: #10b981;
                box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.1);
            }

            .form-control:read-only {
                background-color: #f9fafb;
                cursor: not-allowed;
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-warning {
            background: #f59e0b;
            color: white;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        .sku-generator {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

            .sku-generator button {
                padding: 0.75rem;
                background: #10b981;
                color: white;
                border: 2px solid #10b981;
                border-radius: 8px;
                cursor: pointer;
                transition: all 0.3s ease;
                font-weight: 600;
            }

                .sku-generator button:hover {
                    background: #059669;
                    border-color: #059669;
                    transform: translateY(-1px);
                }

        .image-upload-container {
            position: relative;
        }

        .image-preview {
            width: 120px;
            height: 120px;
            border-radius: 8px;
            object-fit: cover;
            margin-top: 0.5rem;
            border: 2px solid #e5e7eb;
            display: none;
        }

        .image-upload-options {
            display: flex;
            gap: 0.5rem;
            margin-top: 0.5rem;
            flex-wrap: wrap;
        }

        .file-input {
            display: none;
        }

        .profit-calculation {
            background: linear-gradient(135deg, #f0f9ff, #e0f2fe);
            border: 2px solid #0ea5e9;
            border-radius: 12px;
            padding: 1.5rem;
            margin: 1.5rem 0;
        }

        .profit-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            text-align: center;
        }

        .profit-item {
            padding: 1rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .profit-value {
            font-size: 1.25rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .profit-label {
            font-size: 0.75rem;
            color: #6b7280;
            font-weight: 600;
            text-transform: uppercase;
        }

        .barcode-section {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            margin-top: 1.5rem;
        }

        .barcode-preview {
            text-align: center;
            padding: 2rem;
            background: white;
            border-radius: 8px;
            margin-bottom: 1rem;
            border: 2px dashed #cbd5e1;
        }

        /* Mobile Responsive */
            @@media (max-width: 768px) {
            .products-container

        {
            padding: 0.5rem;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .modal-content {
            margin: 0.5rem;
            width: calc(100% - 1rem);
        }

        .modal-body {
            padding: 1rem;
        }

        .quick-actions {
            justify-content: center;
        }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.8rem;
        }

        .image-upload-options {
            flex-direction: column;
        }

        .profit-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        }

        .inventory-alerts {
            background: white;
            border-radius: 12px;
            padding: 1.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .alert-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            padding: 0.75rem;
            background: #fef3c7;
            border-radius: 8px;
            margin-bottom: 0.5rem;
        }

            .alert-item:last-child {
                margin-bottom: 0;
            }

        /* Enhanced Export Dropdown Styles */
        .btn-gradient {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            position: relative;
            overflow: hidden;
        }

            .btn-gradient:hover {
                background: linear-gradient(135deg, #5a6fd8 0%, #6a4190 100%);
                transform: translateY(-1px);
                box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
            }

        .export-btn {
            padding: 0.75rem 1.25rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
        }

        .dropdown-arrow {
            font-size: 0.75rem;
            transition: transform 0.3s ease;
        }

        .export-dropdown.active .dropdown-arrow {
            transform: rotate(180deg);
        }

        .export-dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            right: 0;
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);
            opacity: 0;
            visibility: hidden;
            transform: translateY(-10px);
            transition: all 0.3s ease;
            z-index: 1000;
            min-width: 280px;
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }

        .export-dropdown.active .export-dropdown-menu {
            opacity: 1;
            visibility: visible;
            transform: translateY(5px);
        }

        .export-option {
            display: flex;
            align-items: center;
            padding: 1rem 1.25rem;
            cursor: pointer;
            transition: all 0.2s ease;
            border-bottom: 1px solid #f3f4f6;
        }

            .export-option:last-child {
                border-bottom: none;
            }

            .export-option:hover {
                background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
                transform: translateX(5px);
            }

        .export-icon {
            width: 40px;
            height: 40px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1.25rem;
        }

        .excel-icon {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
        }

        .pdf-icon {
            background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
            color: white;
        }

        .export-details {
            flex: 1;
        }

        .export-title {
            font-weight: 600;
            color: #1f2937;
            margin-bottom: 0.25rem;
            font-size: 0.95rem;
        }

        .export-description {
            font-size: 0.8rem;
            color: #6b7280;
            font-weight: 500;
        }

        /* Mobile responsiveness for export dropdown */
        @@media (max-width: 768px) {
            .export-dropdown-menu {
                min-width: 250px;
                left: auto;
                right: 0;
            }

            .export-option {
                padding: 0.875rem 1rem;
            }

            .export-icon {
                width: 35px;
                height: 35px;
                font-size: 1.1rem;
            }
        }
    </style>
}

<!-- <!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link active">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("CartManagement", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-basket"></i>
                    Cart Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("WishlistManagement", "Admin")" class="nav-link">
                    <i class="fas fa-heart"></i>
                    Wishlist Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>


<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Products Management</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search products..." id="searchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Page Content -->
    <div class="products-container">
        <!-- Inventory Alerts -->
        <div class="inventory-alerts" id="inventoryAlerts" style="display: none;">
            <h3 style="margin-bottom: 1rem; color: #f59e0b;">
                <i class="fas fa-exclamation-triangle"></i>
                Inventory Alerts
            </h3>
            <div id="alertsList">
                <!-- Low stock alerts will be populated here -->
            </div>
        </div>

        <!-- Filters and Actions Bar -->
        <div class="filters-bar">
            <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;">
                <div style="display: flex; gap: 1rem; align-items: center; flex-wrap: wrap;">
                    <div style="position: relative;">
                        <select id="categoryFilter" class="form-control" style="width: 200px;">
                            <option value="">All Categories</option>
                        </select>
                    </div>
                    <div style="position: relative;">
                        <select id="supplierFilter" class="form-control" style="width: 200px;">
                            <option value="">All Suppliers</option>
                        </select>
                    </div>
                    <div style="position: relative;">
                        <select id="statusFilter" class="form-control" style="width: 150px;">
                            <option value="">All Status</option>
                            <option value="active">Active</option>
                            <option value="inactive">Inactive</option>
                            <option value="lowstock">Low Stock</option>
                        </select>
                    </div>
                    <div style="position: relative;">
                        <select id="sortBy" class="form-control" style="width: 150px;">
                            <option value="name">Sort by Name</option>
                            <option value="sku">Sort by SKU</option>
                            <option value="price">Sort by Price</option>
                            <option value="stock">Sort by Stock</option>
                            <option value="profit">Sort by Profit</option>
                            <option value="created">Sort by Created</option>
                        </select>
                    </div>
                </div>
                <div style="display: flex; gap: 1rem;">
                    <button class="btn btn-warning btn-sm" onclick="showLowStockProducts()">
                        <i class="fas fa-exclamation-triangle"></i>
                        Low Stock
                    </button>
                    <div class="export-dropdown" style="display: inline-block; position: relative;">
                        <button class="btn btn-gradient btn-sm export-btn" type="button" id="exportDropdown" onclick="toggleExportDropdown()">
                            <i class="fas fa-file-download"></i>
                            Generate Report
                            <i class="fas fa-chevron-down dropdown-arrow"></i>
                        </button>
                        <div class="export-dropdown-menu" id="exportDropdownMenu">
                            <div class="export-option" onclick="exportToExcel()">
                                <div class="export-icon excel-icon">
                                    <i class="fas fa-file-excel"></i>
                                </div>
                                <div class="export-details">
                                    <div class="export-title">Excel Report</div>
                                    <div class="export-description">Download as .xlsx file</div>
                                </div>
                            </div>
                            <div class="export-option" onclick="exportToPdf()">
                                <div class="export-icon pdf-icon">
                                    <i class="fas fa-file-pdf"></i>
                                </div>
                                <div class="export-details">
                                    <div class="export-title">PDF Report</div>
                                    <div class="export-description">Download as .pdf file</div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button class="btn btn-primary" onclick="openCreateProductModal()">
                        <i class="fas fa-plus"></i>
                        Add Product
                    </button>
                </div>
            </div>
        </div>

        <!-- Products Grid -->
        @if (Model != null && Model.Any())
        {
            <div id="productsGrid" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(350px, 1fr)); gap: 1.5rem;">
                @foreach (var product in Model)
                {
                    <div class="product-card @(product.IsLowStock ? "low-stock" : "") @(!product.IsActive ? "inactive" : "")"
                         data-product-id="@product.ProductId"
                         data-category-id="@(product.CategoryName ?? "")"
                         data-supplier-id="@(product.SupplierName ?? "")"
                         data-is-active="@product.IsActive.ToString().ToLower()"
                         data-is-low-stock="@product.IsLowStock.ToString().ToLower()"
                         data-name="@product.Name.ToLower()"
                         data-sku="@product.SKU.ToLower()">

                        <div class="status-indicator @(product.IsLowStock ? "low-stock" : (!product.IsActive ? "inactive" : ""))"></div>

                        @{
                            var profitClass = product.ProfitPercentage >= 50 ? "profit-high" :
                            product.ProfitPercentage >= 25 ? "profit-medium" : "profit-low";
                        }
                        <div class="profit-indicator @profitClass">
                            @product.ProfitPercentage.ToString("F1")% Profit
                        </div>

                        <div style="display: flex; align-items: flex-start; gap: 1rem; margin-bottom: 1rem;">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@product.ImageUrl" alt="@product.Name" class="product-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                <div class="product-image" style="display: none;">
                                    <i class="fas fa-image"></i>
                                </div>
                            }
                            else
                            {
                                <div class="product-image">
                                    <i class="fas fa-cube"></i>
                                </div>
                            }

                            <div style="flex: 1; min-width: 0;">
                                <h3 style="margin: 0 0 0.5rem 0; color: #1e293b; font-size: 1.1rem; line-height: 1.3;">@product.Name</h3>
                                <p style="margin: 0 0 0.25rem 0; color: #64748b; font-size: 0.875rem; font-weight: 600;">SKU: @product.SKU</p>
                                @if (!string.IsNullOrEmpty(product.CategoryName))
                                {
                                    <p style="margin: 0; color: #64748b; font-size: 0.75rem;">Category: @product.CategoryName</p>
                                }
                                @if (!string.IsNullOrEmpty(product.SupplierName))
                                {
                                    <p style="margin: 0; color: #64748b; font-size: 0.75rem;">Supplier: @product.SupplierName</p>
                                }
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(product.Description))
                        {
                            <p style="margin: 0 0 1rem 0; color: #6b7280; font-size: 0.875rem; line-height: 1.4;">
                                @(product.Description.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description)
                            </p>
                        }

                        <div class="product-metrics">
                            <div class="metric">
                                <span class="metric-value">KSh @product.BuyingPrice.ToString("N0")</span>
                                <span class="metric-label">Buying Price</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value">KSh @product.SellingPrice.ToString("N0")</span>
                                <span class="metric-label">Selling Price</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value @(product.IsLowStock ? "text-red-600" : "")">@product.StockQuantity</span>
                                <span class="metric-label">In Stock</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value">@product.MinStockLevel</span>
                                <span class="metric-label">Min Level</span>
                            </div>
                            <div class="metric">
                                <span class="metric-value text-green-600">KSh @product.ProfitMargin.ToString("N0")</span>
                                <span class="metric-label">Profit</span>
                            </div>
                        </div>

                        <div class="quick-actions">
                            <button class="btn btn-secondary btn-sm" onclick="viewProduct(@product.ProductId)" title="View Details">
                                <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-primary btn-sm" onclick="editProduct(@product.ProductId)" title="Edit Product">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-warning btn-sm" onclick="updateStock(@product.ProductId, @product.StockQuantity)" title="Update Stock">
                                <i class="fas fa-boxes"></i>
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="console.log(' Button clicked with ProductId:', @product.ProductId); generateBarcode(@product.ProductId)" title="Generate Barcode">
                                <i class="fas fa-qrcode"></i>
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="console.log(' Button clicked with ProductId:', @product.ProductId); generateSticker(@product.ProductId)" title="Print Sticker">
                                <i class="fas fa-print"></i>
                            </button>
                            @if (User.IsInRole("Admin"))
                            {
                                <button class="btn btn-danger btn-sm" onclick="deleteProduct(@product.ProductId)" title="Delete Product">
                                    <i class="fas fa-trash"></i>
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Empty State -->
            <div style="text-align: center; padding: 4rem; color: #64748b;">
                <i class="fas fa-cube" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                <h3>No products found</h3>
                <p>No products are currently available in the database. Click "Add Product" to create your first product.</p>
                <button class="btn btn-primary" onclick="openCreateProductModal()" style="margin-top: 1rem;">
                    <i class="fas fa-plus"></i>
                    Add Your First Product
                </button>
            </div>
        }

        <!-- Empty State for Filtered Results -->
        <div id="emptyState" style="display: none; text-align: center; padding: 4rem; color: #64748b;">
            <i class="fas fa-cube" style="font-size: 4rem; margin-bottom: 1rem; opacity: 0.3;"></i>
            <h3>No products found</h3>
            <p>Try adjusting your search criteria or add a new product.</p>
        </div>
    </div>
</div>

<!-- Create/Edit Product Modal -->
<div id="productModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2 id="modalTitle">Add New Product</h2>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closeProductModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="productForm">
                <input type="hidden" id="productId" name="ProductId" value="">

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label" for="productName">Product Name *</label>
                        <input type="text" id="productName" name="Name" class="form-control" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="productSKU">SKU (Auto-Generated) *</label>
                        <div class="sku-generator">
                            <input type="text" id="productSKU" name="SKU" class="form-control" readonly required>
                            <button type="button" onclick="generateSKU()" title="Generate New SKU">
                                <i class="fas fa-sync-alt"></i>
                                Generate
                            </button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label" for="productDescription">Description</label>
                    <textarea id="productDescription" name="Description" class="form-control" rows="3" placeholder="Enter a detailed description of this product..."></textarea>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label" for="categoryId">Category *</label>
                        <select id="categoryId" name="CategoryId" class="form-control" required>
                            <option value="">Select Category</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="supplierId">Supplier</label>
                        <select id="supplierId" name="SupplierId" class="form-control">
                            <option value="">Select Supplier</option>
                        </select>
                    </div>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label" for="buyingPrice">Buying Price (KSh) *</label>
                        <input type="number" id="buyingPrice" name="BuyingPrice" class="form-control" step="0.01" min="0" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="sellingPrice">Selling Price (KSh) *</label>
                        <input type="number" id="sellingPrice" name="SellingPrice" class="form-control" step="0.01" min="0" required>
                    </div>
                </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label" for="stockQuantity">Stock Quantity *</label>
                        <input type="number" id="stockQuantity" name="StockQuantity" class="form-control" min="0" required>
                    </div>

                    <div class="form-group">
                        <label class="form-label" for="minStockLevel">Minimum Stock Level *</label>
                        <input type="number" id="minStockLevel" name="MinStockLevel" class="form-control" min="0" value="10" required>
                    </div>
                </div>

                <!-- Profit Calculation -->
                <div class="profit-calculation">
                    <h4 style="margin-bottom: 1rem; color: #0369a1; text-align: center;">
                        <i class="fas fa-chart-line"></i>
                        Profit Analysis
                    </h4>
                    <div class="profit-grid">
                        <div class="profit-item">
                            <div class="profit-value" id="profitMargin" style="color: #10b981;">KSh 0</div>
                            <div class="profit-label">Per-Unit Profit</div>
                        </div>
                        <div class="profit-item">
                            <div class="profit-value" id="profitPercentage" style="color: #10b981;">0%</div>
                            <div class="profit-label">Profit %</div>
                        </div>
                        <div class="profit-item">
                            <div class="profit-value" id="breakEvenQty" style="color: #3b82f6;">KSh 0</div>
                            <div class="profit-label">Total Profit</div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Product Image</label>
                    <div class="image-upload-container">
                        <input type="url" id="imageUrl" name="ImageUrl" class="form-control" placeholder="Enter image URL or upload from computer" style="margin-bottom: 0.5rem;">
                        <img id="imagePreview" class="image-preview" alt="Image Preview">
                        <div class="image-upload-options">
                            <input type="file" id="imageFile" class="file-input" accept="image/*">
                            <button type="button" class="btn btn-secondary btn-sm" onclick="document.getElementById('imageFile').click()">
                                <i class="fas fa-upload"></i>
                                Upload Image
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="clearImage()">
                                <i class="fas fa-trash"></i>
                                Clear
                            </button>
                            <button type="button" class="btn btn-secondary btn-sm" onclick="useDefaultImage()">
                                <i class="fas fa-image"></i>
                                Use Default
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Barcode Section -->
                <div class="barcode-section">
                    <h4 style="margin-bottom: 1rem; color: #374151;">
                        <i class="fas fa-qrcode"></i>
                        Barcode Preview
                    </h4>
                    <div class="barcode-preview" id="barcodePreview">
                        <i class="fas fa-qrcode" style="font-size: 3rem; color: #cbd5e1; margin-bottom: 0.5rem;"></i>
                        <p style="color: #64748b; margin: 0;">Barcode will be generated automatically</p>
                    </div>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeProductModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i>
                        Save Product
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Stock Update Modal -->
<div id="stockModal" class="modal">
    <div class="modal-content" style="max-width: 400px;">
        <div class="modal-header">
            <h2>Update Stock</h2>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closeStockModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="stockForm">
                <input type="hidden" id="stockProductId">

                <div class="form-group">
                    <label class="form-label" for="currentStock">Current Stock</label>
                    <input type="number" id="currentStock" class="form-control" readonly>
                </div>

                <div class="form-group">
                    <label class="form-label" for="newStock">New Stock Quantity *</label>
                    <input type="number" id="newStock" class="form-control" min="0" required>
                </div>

                <div class="form-group">
                    <label class="form-label" for="stockReason">Reason for Change</label>
                    <select id="stockReason" class="form-control">
                        <option value="">Select Reason</option>
                        <option value="restock">Restock</option>
                        <option value="adjustment">Stock Adjustment</option>
                        <option value="damaged">Damaged Goods</option>
                        <option value="expired">Expired Items</option>
                        <option value="transfer">Stock Transfer</option>
                        <option value="other">Other</option>
                    </select>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeStockModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i>
                        Update Stock
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        let allProducts = [];
        let filteredProducts = [];
        let allCategories = [];
        let allSuppliers = [];

        document.addEventListener('DOMContentLoaded', function() {
            initializeProductsPage();
        });

        async function initializeProductsPage() {
            console.log('🔧 Initializing Products page...');

            // Get products from the page
            const productCards = Array.from(document.querySelectorAll('.product-card'));
            console.log(`📦 Found ${productCards.length} product cards on page`);
            
            allProducts = productCards.map(card => {
                const productId = parseInt(card.dataset.productId);
                console.log(`🔍 Mapping product card:`, {
                    rawId: card.dataset.productId,
                    parsedId: productId,
                    name: card.dataset.name,
                    sku: card.dataset.sku
                });
                
                return {
                    productId: productId,
                    name: card.dataset.name,
                    sku: card.dataset.sku,
                    categoryName: card.dataset.categoryId,
                    supplierName: card.dataset.supplierId,
                    isActive: card.dataset.isActive === 'true',
                    isLowStock: card.dataset.isLowStock === 'true',
                    element: card
                };
            });

            console.log(`📦 Mapped ${allProducts.length} products from DOM`);
            console.log(`🔍 All mapped products:`, allProducts.map(p => ({ id: p.productId, name: p.name })));
            console.log('✅ Products loaded successfully - ready for operations');

            await loadDropdownData();
            setupEventListeners();
            setupImageHandling();
            setupProfitCalculation();
            checkLowStockAlerts();

            // Generate SKU for new products
            generateSKU();
            
            // Check if we need to open edit modal from URL parameter
            checkForEditParameter();
        }
        


        async function loadDropdownData() {
            try {
                // Load categories
                const categoriesResponse = await fetch('/api/categories');
                if (categoriesResponse.ok) {
                    allCategories = await categoriesResponse.json();
                    console.log(`✅ Loaded ${allCategories.length} categories`);
                }

                // Load suppliers
                const suppliersResponse = await fetch('/api/suppliers');
                if (suppliersResponse.ok) {
                    allSuppliers = await suppliersResponse.json();
                    console.log(`✅ Loaded ${allSuppliers.length} suppliers`);
                }

                populateDropdowns();
                setupEventListeners();
            } catch (error) {
                console.error('❌ Error loading dropdown data:', error);
                showToast('Error loading form data. Some features may not work properly.', 'warning');
            }
        }

        function populateDropdowns() {
            // Populate category dropdowns
            const categoryFilter = document.getElementById('categoryFilter');
            const categorySelect = document.getElementById('categoryId');

            // Clear existing options (except first)
            categoryFilter.innerHTML = '<option value="">All Categories</option>';
            categorySelect.innerHTML = '<option value="">Select Category</option>';

            allCategories.forEach(category => {
                const filterOption = document.createElement('option');
                filterOption.value = category.name;
                filterOption.textContent = category.name;
                categoryFilter.appendChild(filterOption);

                const selectOption = document.createElement('option');
                selectOption.value = category.categoryId;
                selectOption.textContent = category.name;
                categorySelect.appendChild(selectOption);
            });

            // Populate supplier dropdowns
            const supplierFilter = document.getElementById('supplierFilter');
            const supplierSelect = document.getElementById('supplierId');

            supplierFilter.innerHTML = '<option value="">All Suppliers</option>';
            supplierSelect.innerHTML = '<option value="">Select Supplier</option>';

            allSuppliers.forEach(supplier => {
                const filterOption = document.createElement('option');
                filterOption.value = supplier.companyName;
                filterOption.textContent = supplier.companyName;
                supplierFilter.appendChild(filterOption);

                const selectOption = document.createElement('option');
                selectOption.value = supplier.supplierId;
                selectOption.textContent = supplier.companyName;
                supplierSelect.appendChild(selectOption);
            });
        }

        function setupEventListeners() {
            // Search and filters
            document.getElementById('searchInput').addEventListener('input', debounce(filterProducts, 300));
            document.getElementById('categoryFilter').addEventListener('change', filterProducts);
            document.getElementById('supplierFilter').addEventListener('change', filterProducts);
            document.getElementById('statusFilter').addEventListener('change', filterProducts);
            document.getElementById('sortBy').addEventListener('change', filterProducts);

            // Form submissions
            document.getElementById('productForm').addEventListener('submit', handleProductSubmit);
            document.getElementById('stockForm').addEventListener('submit', handleStockSubmit);

            // Modal close on outside click
            document.querySelectorAll('.modal').forEach(modal => {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeAllModals();
                    }
                });
            });

            // Category and name change for SKU generation
            document.getElementById('categoryId').addEventListener('change', generateSKU);
            document.getElementById('productName').addEventListener('input', debounce(generateSKU, 500));
        }

        function setupImageHandling() {
            const imageUrlInput = document.getElementById('imageUrl');
            const imageFileInput = document.getElementById('imageFile');
            const imagePreview = document.getElementById('imagePreview');

            // URL input handling
            imageUrlInput.addEventListener('input', function() {
                const url = this.value.trim();
                if (url) {
                    showImagePreview(url);
                } else {
                    hideImagePreview();
                }
            });

            // File input handling
            imageFileInput.addEventListener('change', function() {
                const file = this.files[0];
                if (file) {
                    // Validate file size (max 5MB)
                    if (file.size > 5 * 1024 * 1024) {
                        showToast('Image file too large. Please choose a file smaller than 5MB.', 'error');
                        this.value = '';
                        return;
                    }

                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                        showToast('Please select a valid image file.', 'error');
                        this.value = '';
                        return;
                    }

                    // Compress and resize the image before converting to base64
                    compressImage(file, 800, 600, 0.8).then(compressedDataUrl => {
                        console.log('🖼️ Image compressed:', {
                            originalSize: file.size,
                            originalDataUrlLength: 'N/A',
                            compressedDataUrlLength: compressedDataUrl.length
                        });
                        
                        imageUrlInput.value = compressedDataUrl;
                        showImagePreview(compressedDataUrl);
                        showToast('Image uploaded and optimized successfully', 'success');
                    }).catch(error => {
                        console.error('❌ Error compressing image:', error);
                        showToast('Error processing image. Please try a different image.', 'error');
                        this.value = '';
                    });
                }
            });
        }

        function showImagePreview(url) {
            const preview = document.getElementById('imagePreview');
            preview.src = url;
            preview.style.display = 'block';
            preview.onerror = function() {
                this.style.display = 'none';
                showToast('Invalid image URL or unable to load image', 'error');
            };
        }

        function hideImagePreview() {
            const preview = document.getElementById('imagePreview');
            preview.style.display = 'none';
            preview.src = '';
        }

        function clearImage() {
            document.getElementById('imageUrl').value = '';
            document.getElementById('imageFile').value = '';
            hideImagePreview();
        }

        function useDefaultImage() {
            const defaultImageUrl = '/images/default-product.png'; // Default product image
            document.getElementById('imageUrl').value = defaultImageUrl;
            showImagePreview(defaultImageUrl);
        }

        function setupProfitCalculation() {
            const buyingPriceInput = document.getElementById('buyingPrice');
            const sellingPriceInput = document.getElementById('sellingPrice');
            const stockQuantityInput = document.getElementById('stockQuantity');

            buyingPriceInput.addEventListener('input', calculateProfit);
            sellingPriceInput.addEventListener('input', calculateProfit);
            stockQuantityInput.addEventListener('input', calculateProfit);
        }

        function calculateProfit() {
            const buyingPrice = parseFloat(document.getElementById('buyingPrice').value) || 0;
            const sellingPrice = parseFloat(document.getElementById('sellingPrice').value) || 0;
            const stockQuantity = parseInt(document.getElementById('stockQuantity').value) || 0;

            // Calculate per-unit profit
            const profitPerUnit = sellingPrice - buyingPrice;
            
            // Calculate total profit for all stock
            const totalProfit = profitPerUnit * stockQuantity;
            
            // Calculate profit percentage
            const profitPercentage = buyingPrice > 0 ? (profitPerUnit / buyingPrice) * 100 : 0;
            
            // Calculate break-even quantity (how many units to sell to cover costs)
            const breakEvenQty = profitPerUnit > 0 ? Math.ceil(buyingPrice / profitPerUnit) : 0;

            // Update the display elements
            document.getElementById('profitMargin').textContent = `KSh ${profitPerUnit.toLocaleString()}`;
            document.getElementById('profitPercentage').textContent = `${profitPercentage.toFixed(1)}%`;
            document.getElementById('breakEvenQty').textContent = totalProfit.toLocaleString();

            // Update colors based on profit percentage
            const marginElement = document.getElementById('profitMargin');
            const percentageElement = document.getElementById('profitPercentage');
            const totalProfitElement = document.getElementById('breakEvenQty');

            const color = profitPercentage >= 50 ? '#10b981' : 
                         profitPercentage >= 25 ? '#f59e0b' : '#ef4444';
            
            marginElement.style.color = color;
            percentageElement.style.color = color;
            totalProfitElement.style.color = color;
            
            console.log('💰 Profit calculation:', {
                buyingPrice,
                sellingPrice,
                stockQuantity,
                profitPerUnit,
                totalProfit,
                profitPercentage: profitPercentage.toFixed(1) + '%'
            });
        }

        // Generate SKU automatically
        function generateSKU() {
            const productName = document.getElementById('productName').value.trim();
            const categoryId = document.getElementById('categoryId').value;

            let categoryCode = 'GEN';
            if (categoryId) {
                const category = allCategories.find(c => c.categoryId == categoryId);
                if (category) {
                    categoryCode = category.name.substring(0, 3).toUpperCase().replace(/[^A-Z]/g, '');
                    if (categoryCode.length < 3) {
                        categoryCode = categoryCode.padEnd(3, 'X');
                    }
                }
            }

            let nameCode = 'PRD';
            if (productName) {
                nameCode = productName.substring(0, 3).toUpperCase().replace(/[^A-Z]/g, '');
                if (nameCode.length < 3) {
                    nameCode = nameCode.padEnd(3, 'X');
                }
            }

            const randomCode = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
            const timestamp = Date.now().toString().slice(-3);

            const sku = `${categoryCode}-${nameCode}-${randomCode}${timestamp}`;
            document.getElementById('productSKU').value = sku;

            // Update barcode preview
            updateBarcodePreview(sku);
        }

        function updateBarcodePreview(sku) {
            const barcodePreview = document.getElementById('barcodePreview');
            if (sku) {
                barcodePreview.innerHTML = `
                    <div style="font-family: 'Courier New', monospace; font-size: 2rem; font-weight: bold; margin-bottom: 0.5rem;">${sku}</div>
                    <div style="display: flex; justify-content: center; margin-bottom: 0.5rem;">
                        <div style="width: 2px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 1px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 2px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 1px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 2px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 3px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 1px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 2px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 1px; height: 40px; background: #000; margin: 0 1px;"></div>
                        <div style="width: 2px; height: 40px; background: #000; margin: 0 1px;"></div>
                    </div>
                    <p style="color: #64748b; margin: 0; font-size: 0.875rem;">Barcode preview for ${sku}</p>
                `;
            } else {
                barcodePreview.innerHTML = `
                    <i class="fas fa-qrcode" style="font-size: 3rem; color: #cbd5e1; margin-bottom: 0.5rem;"></i>
                    <p style="color: #64748b; margin: 0;">Barcode will be generated automatically</p>
                `;
            }
        }

        function filterProducts() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase();
            const categoryFilter = document.getElementById('categoryFilter').value.toLowerCase();
            const supplierFilter = document.getElementById('supplierFilter').value.toLowerCase();
            const statusFilter = document.getElementById('statusFilter').value;
            const sortBy = document.getElementById('sortBy').value;

            const grid = document.getElementById('productsGrid');
            const emptyState = document.getElementById('emptyState');

            if (!grid) return;

            let visibleCount = 0;

            allProducts.forEach(product => {
                const card = product.element;
                if (!card) return;

                let visible = true;

                // Search filter
                if (searchTerm && !product.name.includes(searchTerm) && !product.sku.includes(searchTerm)) {
                    visible = false;
                }

                // Category filter
                if (categoryFilter && !product.categoryName.toLowerCase().includes(categoryFilter)) {
                    visible = false;
                }

                // Supplier filter
                if (supplierFilter && !product.supplierName.toLowerCase().includes(supplierFilter)) {
                    visible = false;
                }

                // Status filter
                if (statusFilter) {
                    if (statusFilter === 'active' && !product.isActive) visible = false;
                    if (statusFilter === 'inactive' && product.isActive) visible = false;
                    if (statusFilter === 'lowstock' && !product.isLowStock) visible = false;
                }

                card.style.display = visible ? 'block' : 'none';
                if (visible) visibleCount++;
            });

            // Show/hide empty state
            if (visibleCount === 0) {
                if (grid) grid.style.display = 'none';
                if (emptyState) emptyState.style.display = 'block';
            } else {
                if (grid) grid.style.display = 'grid';
                if (emptyState) emptyState.style.display = 'none';
            }

            console.log(`🔍 Filtered products: ${visibleCount} visible out of ${allProducts.length}`);
        }

        function checkLowStockAlerts() {
            const lowStockProducts = allProducts.filter(p => p.isLowStock);

            if (lowStockProducts.length > 0) {
                const alertsContainer = document.getElementById('inventoryAlerts');
                const alertsList = document.getElementById('alertsList');

                if (alertsContainer && alertsList) {
                    alertsList.innerHTML = lowStockProducts.map(product => {
                        const productName = product.element.querySelector('h3').textContent;

                        return `
                            <div class="alert-item">
                                <i class="fas fa-exclamation-triangle" style="color: #f59e0b;"></i>
                                <div style="flex: 1;">
                                    <strong>${productName}</strong> - Low stock alert
                                </div>
                                <button class="btn btn-primary btn-sm" onclick="updateStock(${product.productId}, 0)">
                                    <i class="fas fa-plus"></i>
                                    Restock
                                </button>
                            </div>
                        `;
                    }).join('');

                    alertsContainer.style.display = 'block';
                }
            }
        }

        // Modal functions
        function openCreateProductModal() {
            document.getElementById('modalTitle').textContent = 'Add New Product';
            document.getElementById('productForm').reset();
            document.getElementById('productId').value = '';
            hideImagePreview();
            calculateProfit();
            generateSKU();
            document.getElementById('productModal').classList.add('show');

            // Focus on first input
            setTimeout(() => {
                document.getElementById('productName').focus();
            }, 100);
        }

        function openProductModal() {
            document.getElementById('productModal').classList.add('show');
        }

        async function editProduct(productId) {
            try {
                console.log(`🔧 Loading product ${productId} for editing`);
                
                // Ensure dropdowns are loaded first
                if (allCategories.length === 0 || allSuppliers.length === 0) {
                    console.log('📋 Dropdowns not loaded, loading now...');
                    await loadDropdownData();
                }
                
                const response = await fetch(`/Admin/GetProductDetails?productId=${productId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.message || 'Failed to load product details');
                }
                
                const product = result.product;
                console.log('📦 Product data loaded for editing:', product);
                
                // Populate form fields
                document.getElementById('productId').value = product.productId;
                document.getElementById('productName').value = product.name;
                document.getElementById('productSKU').value = product.sku;
                document.getElementById('productDescription').value = product.description || '';
                document.getElementById('buyingPrice').value = product.buyingPrice;
                document.getElementById('sellingPrice').value = product.sellingPrice;
                document.getElementById('stockQuantity').value = product.stockQuantity;
                document.getElementById('minStockLevel').value = product.minStockLevel;
                document.getElementById('imageUrl').value = product.imageUrl || '';
                
                // Set dropdown values with robust validation and retry logic
                const setDropdownValues = async (retryCount = 0) => {
                    const maxRetries = 10;
                    const categorySelect = document.getElementById('categoryId');
                    const supplierSelect = document.getElementById('supplierId');
                    
                    // Debug: Log complete product data structure
                    console.log('🔍 Complete product data for edit modal:', product);
                    console.log('🔍 Product properties:', {
                        productId: product.productId,
                        categoryId: product.categoryId,
                        supplierId: product.supplierId,
                        name: product.name,
                        sku: product.sku
                    });
                    
                    // Ensure dropdowns are loaded - more robust checking
                    const categoryLoaded = categorySelect && categorySelect.options.length > 1;
                    const supplierLoaded = supplierSelect && supplierSelect.options.length > 1;
                    
                    if (!categoryLoaded || !supplierLoaded) {
                        if (retryCount < maxRetries) {
                            console.log(`⏳ Dropdowns not fully loaded (attempt ${retryCount + 1}/${maxRetries}), retrying...`);
                            console.log(`  Category loaded: ${categoryLoaded} (${categorySelect?.options.length || 0} options)`);
                            console.log(`  Supplier loaded: ${supplierLoaded} (${supplierSelect?.options.length || 0} options)`);
                            
                            // Try to reload dropdown data if not loaded after several attempts
                            if (retryCount === 3) {
                                console.log('🔄 Attempting to reload dropdown data...');
                                await loadDropdownData();
                            }
                            
                            setTimeout(() => setDropdownValues(retryCount + 1), 300);
                            return;
                        } else {
                            console.error('❌ Dropdowns failed to load after maximum retries');
                            showToast('Error loading dropdown data. Please refresh the page.', 'error');
                            return;
                        }
                    }
                    
                    console.log('✅ Dropdowns are loaded, proceeding with selection...');
                    console.log('📋 Dropdown status:', {
                        categoryOptions: categorySelect.options.length,
                        supplierOptions: supplierSelect.options.length
                    });
                    
                    // Debug: List all available options
                    console.log('📋 Available category options:');
                    for (let i = 0; i < categorySelect.options.length; i++) {
                        const option = categorySelect.options[i];
                        console.log(`  ${i}: value="${option.value}", text="${option.text}"`);
                    }
                    
                    console.log('📋 Available supplier options:');
                    for (let i = 0; i < supplierSelect.options.length; i++) {
                        const option = supplierSelect.options[i];
                        console.log(`  ${i}: value="${option.value}", text="${option.text}"`);
                    }
                    
                    // Set category value with comprehensive selection logic
                    if (product.categoryId !== null && product.categoryId !== undefined && product.categoryId > 0) {
                        const categoryValue = product.categoryId.toString();
                        console.log(`📂 Attempting to set category: ${categoryValue}`);
                        
                        // Reset to default first
                        categorySelect.selectedIndex = 0;
                        
                        // Method 1: Direct value assignment
                        categorySelect.value = categoryValue;
                        
                        // Method 2: If first attempt failed, try selectedIndex with exact matching
                        if (categorySelect.value !== categoryValue) {
                            console.log('🔄 Direct assignment failed, trying selectedIndex with exact matching...');
                            let found = false;
                            for (let i = 0; i < categorySelect.options.length; i++) {
                                const optionValue = categorySelect.options[i].value;
                                if (optionValue === categoryValue || optionValue === product.categoryId.toString()) {
                                    categorySelect.selectedIndex = i;
                                    found = true;
                                    console.log(`✅ Found category at index ${i} with value "${optionValue}"`);
                                    break;
                                }
                            }
                            if (!found) {
                                console.warn(`⚠️ Category ${categoryValue} not found in dropdown options`);
                                // Try to find by partial match or similar
                                for (let i = 0; i < categorySelect.options.length; i++) {
                                    const optionValue = categorySelect.options[i].value;
                                    if (parseInt(optionValue) === parseInt(categoryValue)) {
                                        categorySelect.selectedIndex = i;
                                        console.log(`✅ Found category by parseInt match at index ${i}`);
                                        break;
                                    }
                                }
                            }
                        }
                        
                        console.log(`📂 Category result: Expected=${categoryValue}, Actual=${categorySelect.value}, Success=${categorySelect.value === categoryValue}`);
                    } else {
                        console.log('📂 No valid category ID to set (null, undefined, or 0)');
                    }
                    
                    // Set supplier value with comprehensive selection logic
                    if (product.supplierId !== null && product.supplierId !== undefined && product.supplierId > 0) {
                        const supplierValue = product.supplierId.toString();
                        console.log(`🚛 Attempting to set supplier: ${supplierValue}`);
                        
                        // Reset to default first
                        supplierSelect.selectedIndex = 0;
                        
                        // Method 1: Direct value assignment
                        supplierSelect.value = supplierValue;
                        
                        // Method 2: If first attempt failed, try selectedIndex with exact matching
                        if (supplierSelect.value !== supplierValue) {
                            console.log('🔄 Direct assignment failed, trying selectedIndex with exact matching...');
                            let found = false;
                            for (let i = 0; i < supplierSelect.options.length; i++) {
                                const optionValue = supplierSelect.options[i].value;
                                if (optionValue === supplierValue || optionValue === product.supplierId.toString()) {
                                    supplierSelect.selectedIndex = i;
                                    found = true;
                                    console.log(`✅ Found supplier at index ${i} with value "${optionValue}"`);
                                    break;
                                }
                            }
                            if (!found) {
                                console.warn(`⚠️ Supplier ${supplierValue} not found in dropdown options`);
                                // Try to find by partial match or similar
                                for (let i = 0; i < supplierSelect.options.length; i++) {
                                    const optionValue = supplierSelect.options[i].value;
                                    if (parseInt(optionValue) === parseInt(supplierValue)) {
                                        supplierSelect.selectedIndex = i;
                                        console.log(`✅ Found supplier by parseInt match at index ${i}`);
                                        break;
                                    }
                                }
                            }
                        }
                        
                        console.log(`🚛 Supplier result: Expected=${supplierValue}, Actual=${supplierSelect.value}, Success=${supplierSelect.value === supplierValue}`);
                    } else {
                        console.log('🚛 No valid supplier ID to set (null, undefined, or 0)');
                    }
                    
                    // Final verification and manual trigger of change events
                    categorySelect.dispatchEvent(new Event('change', { bubbles: true }));
                    supplierSelect.dispatchEvent(new Event('change', { bubbles: true }));
                    
                    // Final state logging
                    const finalState = {
                        categoryValue: categorySelect.value,
                        supplierValue: supplierSelect.value,
                        categoryText: categorySelect.options[categorySelect.selectedIndex]?.text || 'None',
                        supplierText: supplierSelect.options[supplierSelect.selectedIndex]?.text || 'None'
                    };
                    
                    console.log('✅ Final dropdown state:', finalState);
                    
                    // Show success message if both dropdowns are properly set
                    const categorySuccess = !product.categoryId || categorySelect.value == product.categoryId;
                    const supplierSuccess = !product.supplierId || supplierSelect.value == product.supplierId;
                    
                    if (categorySuccess && supplierSuccess) {
                        console.log('✅ All dropdowns set successfully!');
                    } else {
                        console.warn('⚠️ Some dropdowns may not be set correctly');
                    }
                };
                
                // Start the dropdown setting process
                setTimeout(() => setDropdownValues(0), 100);
                
                // Show image preview if exists
                if (product.imageUrl) {
                    showImagePreview(product.imageUrl);
                } else {
                    hideImagePreview();
                }
                
                // Update barcode preview
                updateBarcodePreview(product.sku);
                
                // Calculate and show profit
                calculateProfit();
                
                // Change modal title and button text
                document.querySelector('#productModal .modal-header h2').textContent = 'Edit Product';
                document.querySelector('#productModal button[type="submit"]').innerHTML = '<i class="fas fa-save"></i> Update Product';
                
                // Show modal
                document.getElementById('productModal').classList.add('show');
                
                // Focus on first input
                setTimeout(() => {
                    document.getElementById('productName').focus();
                }, 100);
                
                console.log(`✅ Product ${product.name} loaded for editing`);
            } catch (error) {
                console.error('❌ Error loading product for editing:', error);
                showToast(`Error loading product: ${error.message}`, 'error');
            }
        }

        function closeProductModal() {
            document.getElementById('productModal').classList.remove('show');
        }

        function updateStock(productId, currentStock) {
            document.getElementById('stockProductId').value = productId;
            document.getElementById('currentStock').value = currentStock;
            document.getElementById('newStock').value = currentStock;
            document.getElementById('stockModal').classList.add('show');

            // Focus on new stock input
            setTimeout(() => {
                document.getElementById('newStock').focus();
                document.getElementById('newStock').select();
            }, 100);
        }

        function closeStockModal() {
            document.getElementById('stockModal').classList.remove('show');
        }

        function closeAllModals() {
            document.querySelectorAll('.modal').forEach(modal => {
                modal.classList.remove('show');
            });
        }

        function viewProduct(productId) {
            window.location.href = `/Admin/ProductDetails/${productId}`;
        }

        async function generateBarcode(productId) {
            if (!productId || productId <= 0) {
                showToast('Invalid product ID for barcode generation', 'error');
                return;
            }
            
            console.log(`🏷️ Generating barcode for product ID: ${productId}`);
            
            // Find product info for better user feedback
            const product = allProducts.find(p => p.productId === productId);
            const productName = product ? product.name : `Product ${productId}`;
            
            console.log(`🔍 Looking for product with ID: ${productId}`);
            console.log(`📦 All products:`, allProducts.map(p => ({ id: p.productId, name: p.name })));
            console.log(`✅ Found product:`, product);
            
            try {
                console.log(`🏷️ Opening barcode generation for: ${productName}`);
                
                // Open barcode generation window directly
                const newWindow = window.open(`/Admin/GenerateBarcode/${productId}`, '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
                
                if (!newWindow) {
                    showToast('Please allow popups to generate barcode. Check your browser popup blocker.', 'warning');
                    return;
                }
                
                showToast(`Opening barcode for ${productName}...`, 'info');
                
                // Monitor window for errors
                const checkWindow = () => {
                    try {
                        if (newWindow.closed) {
                            console.log(`✅ Barcode window closed for ${productName}`);
                            return;
                        }
                        
                        // Check if window loaded successfully
                        if (newWindow.document && newWindow.document.title) {
                            if (newWindow.document.title.includes('Error') || newWindow.document.body.innerText.includes('not found')) {
                                console.warn(`⚠️ Barcode generation may have failed for ${productName}`);
                                showToast('If barcode didn\'t generate properly, please try again or refresh the page.', 'warning');
                            } else {
                                console.log(`✅ Barcode generated successfully for ${productName}`);
                                showToast(`Barcode ready for ${productName}`, 'success');
                            }
                        }
                    } catch (e) {
                        // Cross-origin restrictions prevent checking window content
                        console.log(`✅ Barcode window opened for ${productName}`);
                    }
                };
                
                // Check window status after a delay
                setTimeout(checkWindow, 2000);
                
            } catch (error) {
                console.error('❌ Error opening barcode window:', error);
                showToast('Error generating barcode. Please try again.', 'error');
            }
        }

        async function generateSticker(productId) {
            if (!productId || productId <= 0) {
                showToast('Invalid product ID for sticker generation', 'error');
                return;
            }
            
            console.log(`🏷️ Generating sticker for product ID: ${productId}`);
            
            // Find product info for better user feedback
            const product = allProducts.find(p => p.productId === productId);
            const productName = product ? product.name : `Product ${productId}`;
            
            console.log(`🔍 Looking for product with ID: ${productId}`);
            console.log(`📦 All products:`, allProducts.map(p => ({ id: p.productId, name: p.name })));
            console.log(`✅ Found product:`, product);
            
            try {
                console.log(`🏷️ Opening sticker generation for: ${productName}`);
                
                // Open sticker generation window directly
                const newWindow = window.open(`/Admin/GenerateSticker/${productId}`, '_blank', 'width=800,height=600,scrollbars=yes,resizable=yes');
                
                if (!newWindow) {
                    showToast('Please allow popups to generate sticker. Check your browser popup blocker.', 'warning');
                    return;
                }
                
                showToast(`Opening sticker for ${productName}...`, 'info');
                
                // Monitor window for errors
                const checkWindow = () => {
                    try {
                        if (newWindow.closed) {
                            console.log(`✅ Sticker window closed for ${productName}`);
                            return;
                        }
                        
                        // Check if window loaded successfully
                        if (newWindow.document && newWindow.document.title) {
                            if (newWindow.document.title.includes('Error') || newWindow.document.body.innerText.includes('not found')) {
                                console.warn(`⚠️ Sticker generation may have failed for ${productName}`);
                                showToast('If sticker didn\'t generate properly, please try again or refresh the page.', 'warning');
                            } else {
                                console.log(`✅ Sticker generated successfully for ${productName}`);
                                showToast(`Sticker ready for ${productName}`, 'success');
                            }
                        }
                    } catch (e) {
                        // Cross-origin restrictions prevent checking window content
                        console.log(`✅ Sticker window opened for ${productName}`);
                    }
                };
                
                // Check window status after a delay
                setTimeout(checkWindow, 2000);
                
            } catch (error) {
                console.error('❌ Error opening sticker window:', error);
                showToast('Error generating sticker. Please try again.', 'error');
            }
        }

        function showLowStockProducts() {
            document.getElementById('statusFilter').value = 'lowstock';
            filterProducts();
            showToast('Showing low stock products only', 'info');
        }

        // Enhanced Export Functions with Dropdown Toggle
        function toggleExportDropdown() {
            const dropdown = document.querySelector('.export-dropdown');
            const menu = document.getElementById('exportDropdownMenu');
            
            dropdown.classList.toggle('active');
            
            // Close dropdown when clicking outside
            if (dropdown.classList.contains('active')) {
                document.addEventListener('click', closeExportDropdownOnOutsideClick);
            } else {
                document.removeEventListener('click', closeExportDropdownOnOutsideClick);
            }
        }

        function closeExportDropdownOnOutsideClick(event) {
            const dropdown = document.querySelector('.export-dropdown');
            if (!dropdown.contains(event.target)) {
                dropdown.classList.remove('active');
                document.removeEventListener('click', closeExportDropdownOnOutsideClick);
            }
        }

        function exportToExcel() {
            // Close dropdown
            document.querySelector('.export-dropdown').classList.remove('active');
            document.removeEventListener('click', closeExportDropdownOnOutsideClick);
            
            showToast('📊 Generating Excel report...', 'info');
            
            // Add loading animation to button temporarily
            const btn = document.getElementById('exportDropdown');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
            btn.disabled = true;
            
            // Reset button after a delay
            setTimeout(() => {
                btn.innerHTML = originalHTML;
                btn.disabled = false;
            }, 2000);
            
            window.location.href = '/Admin/ExportProductsToExcel';
        }

        function exportToPdf() {
            // Close dropdown
            document.querySelector('.export-dropdown').classList.remove('active');
            document.removeEventListener('click', closeExportDropdownOnOutsideClick);
            
            showToast('📄 Generating PDF report...', 'info');
            
            // Add loading animation to button temporarily
            const btn = document.getElementById('exportDropdown');
            const originalHTML = btn.innerHTML;
            btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Generating...';
            btn.disabled = true;
            
            // Reset button after a delay
            setTimeout(() => {
                btn.innerHTML = originalHTML;
                btn.disabled = false;
            }, 2000);
            
            window.location.href = '/Admin/ExportProductsToPdf';
        }

        // Form submission handlers
        async function handleProductSubmit(e) {
            e.preventDefault();

            // Wait a moment to ensure any ongoing image processing is complete
            await new Promise(resolve => setTimeout(resolve, 100));

            // Get form data directly from DOM elements to ensure we have the latest values
            const productId = document.getElementById('productId').value;
            const isEdit = productId && productId !== '0';

            // Get values directly from form elements
            const name = document.getElementById('productName').value?.trim();
            const sku = document.getElementById('productSKU').value?.trim();
            const categoryId = document.getElementById('categoryId').value;
            const buyingPriceStr = document.getElementById('buyingPrice').value;
            const sellingPriceStr = document.getElementById('sellingPrice').value;
            const stockQuantityStr = document.getElementById('stockQuantity').value;
            const minStockLevelStr = document.getElementById('minStockLevel').value;
            const imageUrl = document.getElementById('imageUrl').value;
            
            console.log('🔍 Form submission data (from DOM):');
            console.log(`  name: "${name}"`);
            console.log(`  sku: "${sku}"`);
            console.log(`  categoryId: "${categoryId}"`);
            console.log(`  buyingPrice: "${buyingPriceStr}"`);
            console.log(`  sellingPrice: "${sellingPriceStr}"`);
            console.log(`  stockQuantity: "${stockQuantityStr}"`);
            console.log(`  imageUrl length: ${imageUrl?.length || 0}`);
            
            console.log('🔍 Form validation data:', {
                name, sku, categoryId, buyingPriceStr, sellingPriceStr, stockQuantityStr, minStockLevelStr
            });

            if (!name) {
                showToast('Product name is required', 'error');
                document.getElementById('productName').focus();
                return;
            }

            if (!sku) {
                showToast('SKU is required', 'error');
                document.getElementById('productSKU').focus();
                return;
            }

            if (!categoryId || categoryId === '') {
                showToast('Please select a category', 'error');
                document.getElementById('categoryId').focus();
                return;
            }

            const buyingPrice = parseFloat(buyingPriceStr);
            const sellingPrice = parseFloat(sellingPriceStr);
            const stockQuantity = parseInt(stockQuantityStr);
            const minStockLevel = parseInt(minStockLevelStr);

            if (isNaN(buyingPrice) || buyingPrice <= 0) {
                showToast('Buying price must be greater than 0', 'error');
                document.getElementById('buyingPrice').focus();
                return;
            }

            if (isNaN(sellingPrice) || sellingPrice <= 0) {
                showToast('Selling price must be greater than 0', 'error');
                document.getElementById('sellingPrice').focus();
                return;
            }

            if (isNaN(stockQuantity) || stockQuantity < 0) {
                showToast('Stock quantity must be 0 or greater', 'error');
                document.getElementById('stockQuantity').focus();
                return;
            }

            if (isNaN(minStockLevel) || minStockLevel < 0) {
                showToast('Minimum stock level must be 0 or greater', 'error');
                document.getElementById('minStockLevel').focus();
                return;
            }

            if (sellingPrice <= buyingPrice) {
                showToast('Selling price must be greater than buying price', 'error');
                document.getElementById('sellingPrice').focus();
                return;
            }

            // Handle image URL validation (imageUrl already defined above)
            
            console.log('🖼️ Image URL processing:', {
                hasImage: !!imageUrl,
                isDataUrl: imageUrl.startsWith('data:image/'),
                length: imageUrl.length,
                preview: imageUrl.substring(0, 100) + (imageUrl.length > 100 ? '...' : '')
            });
            
            // Handle different types of image URLs
            if (imageUrl) {
                if (imageUrl.startsWith('data:image/')) {
                    // Base64 data URL from file upload
                    console.log('🖼️ Base64 data URL detected, length:', imageUrl.length);
                    
                    // For base64 images, we'll store them as-is in the backend
                    // The backend should handle long data URLs properly
                    // No length validation needed for data URLs as they're valid image data
                    
                    showToast('Image uploaded successfully from file', 'success');
                } else if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://') || imageUrl.startsWith('/')) {
                    // Regular URL (online or local path)
                    if (imageUrl.length > 255) {
                        showToast('Image URL is too long. Please use a shorter URL or upload the image file directly.', 'error');
                        document.getElementById('imageUrl').focus();
                        return;
                    }
                    
                    // Validate URL format for non-local URLs
                    if (!imageUrl.startsWith('/') && !isValidUrl(imageUrl)) {
                        showToast('Please enter a valid image URL (must start with http:// or https://)', 'error');
                        document.getElementById('imageUrl').focus();
                        return;
                    }
                    
                    console.log('✅ Valid image URL provided');
                } else {
                    // Invalid format
                    showToast('Invalid image format. Please upload a file or provide a valid URL starting with http:// or https://', 'error');
                    document.getElementById('imageUrl').focus();
                    return;
                }
            }

            const productData = {
                ProductId: isEdit ? parseInt(productId) : 0,
                Name: name,
                Description: document.getElementById('productDescription').value?.trim() || '',
                SKU: sku,
                CategoryId: parseInt(categoryId),
                SupplierId: document.getElementById('supplierId').value ? parseInt(document.getElementById('supplierId').value) : null,
                BuyingPrice: buyingPrice,
                SellingPrice: sellingPrice,
                StockQuantity: stockQuantity,
                MinStockLevel: minStockLevel,
                ImageUrl: imageUrl
            };

            console.log('📦 Product data to be sent:', productData);

            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

            try {
                const url = isEdit ? '/Admin/UpdateProduct' : '/Admin/CreateProduct';

                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify(productData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    showToast(result.message || 'Product saved successfully!', 'success');
                    closeProductModal();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message || 'Error saving product', 'error');
                }
            } catch (error) {
                console.error('❌ Error saving product:', error);
                showToast('Error saving product. Please check your connection and try again.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        async function handleStockSubmit(e) {
            e.preventDefault();

            const productId = document.getElementById('stockProductId').value;
            const newStock = parseInt(document.getElementById('newStock').value);
            const reason = document.getElementById('stockReason').value;

            if (newStock < 0) {
                showToast('Stock quantity cannot be negative', 'error');
                return;
            }

            const submitBtn = e.target.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Updating...';

            try {
                const response = await fetch('/Admin/UpdateStock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({
                        productId: parseInt(productId),
                        newQuantity: newStock,
                        reason: reason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message || 'Stock updated successfully!', 'success');
                    closeStockModal();
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message || 'Error updating stock', 'error');
                }
            } catch (error) {
                console.error('❌ Error updating stock:', error);
                showToast('Error updating stock. Please try again.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.innerHTML = originalText;
            }
        }

        async function deleteProduct(productId) {
            if (!confirm('Are you sure you want to delete this product? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch('/Admin/DeleteProduct', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({ productId: productId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message || 'Product deleted successfully!', 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message || 'Error deleting product', 'error');
                }
            } catch (error) {
                console.error('❌ Error deleting product:', error);
                showToast('Error deleting product.', 'error');
            }
        }

        // Image compression function
        function compressImage(file, maxWidth = 800, maxHeight = 600, quality = 0.8) {
            return new Promise((resolve, reject) => {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();
                
                img.onload = function() {
                    // Calculate new dimensions while maintaining aspect ratio
                    let { width, height } = img;
                    
                    if (width > maxWidth || height > maxHeight) {
                        const ratio = Math.min(maxWidth / width, maxHeight / height);
                        width *= ratio;
                        height *= ratio;
                    }
                    
                    // Set canvas dimensions
                    canvas.width = width;
                    canvas.height = height;
                    
                    // Draw and compress image
                    ctx.drawImage(img, 0, 0, width, height);
                    
                    // Convert to base64 with compression
                    let compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
                    
                    // If still too large, try more aggressive compression
                    if (compressedDataUrl.length > 100000) { // ~100KB limit
                        console.log('⚠️ Image still large, applying more compression...');
                        compressedDataUrl = canvas.toDataURL('image/jpeg', 0.5); // Lower quality
                        
                        // If STILL too large, resize further
                        if (compressedDataUrl.length > 100000) {
                            console.log('⚠️ Image extremely large, resizing further...');
                            const smallerWidth = width * 0.7;
                            const smallerHeight = height * 0.7;
                            
                            canvas.width = smallerWidth;
                            canvas.height = smallerHeight;
                            ctx.drawImage(img, 0, 0, smallerWidth, smallerHeight);
                            compressedDataUrl = canvas.toDataURL('image/jpeg', 0.3);
                        }
                    }
                    
                    console.log('🔧 Image compression details:', {
                        originalDimensions: `${img.width}x${img.height}`,
                        newDimensions: `${canvas.width}x${canvas.height}`,
                        originalFileSize: `${(file.size / 1024).toFixed(1)}KB`,
                        finalDataUrlLength: `${(compressedDataUrl.length / 1024).toFixed(1)}KB`,
                        compressionSuccess: compressedDataUrl.length < 100000 ? '✅' : '⚠️'
                    });
                    
                    resolve(compressedDataUrl);
                };
                
                img.onerror = function() {
                    reject(new Error('Failed to load image for compression'));
                };
                
                // Create object URL for the image
                img.src = URL.createObjectURL(file);
            });
        }

        // Utility functions
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func(...args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        function getCSRFToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        function isValidUrl(string) {
            try {
                new URL(string);
                return true;
            } catch (_) {
                return false;
            }
        }

        function checkForEditParameter() {
            const urlParams = new URLSearchParams(window.location.search);
            const editProductId = urlParams.get('edit');
            
            if (editProductId) {
                console.log(`🔗 URL parameter detected: edit=${editProductId}`);
                // Wait a bit for dropdowns to load, then trigger edit
                setTimeout(() => {
                    editProduct(parseInt(editProductId));
                    // Clean up URL
                    window.history.replaceState({}, document.title, window.location.pathname);
                }, 1000);
            }
        }

        // Toast notification system
        function showToast(message, type) {
            const existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                padding: 1rem 1.5rem;
                border-radius: 12px;
                color: white;
                font-weight: 600;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
                max-width: 350px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            `;

            switch(type) {
                case 'success':
                    toast.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                    break;
                case 'error':
                    toast.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                    break;
                case 'warning':
                    toast.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
                    break;
                case 'info':
                    toast.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
                    break;
            }

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>