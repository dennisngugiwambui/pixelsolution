@model PixelSolution.ViewModels.MessagesPageViewModel
@{
    ViewData["Title"] = "Messages - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .messages-container {
            height: calc(100vh - 120px);
            display: flex;
            background: #f8fafc;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .contacts-sidebar {
            width: 380px;
            background: white;
            border-right: 1px solid #e2e8f0;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
        }

        .contacts-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
        }

        .contacts-search {
            padding: 1rem;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .search-box {
            position: relative;
            width: 100%;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 12px;
            font-size: 0.875rem;
            background: white;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

        .contacts-list {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .contact-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
            user-select: none;
        }

            .contact-item:hover {
                background: #f1f5f9;
                transform: translateX(4px);
            }

            .contact-item.active {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
                z-index: 2;
            }

            .contact-item.clicking {
                pointer-events: none;
                opacity: 0.7;
            }

            .contact-item * {
                pointer-events: none;
            }

        .contact-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            margin-right: 1rem;
            position: relative;
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid white;
        }

            .online-indicator.online {
                background: #10b981;
                animation: pulse 2s infinite;
            }

            .online-indicator.offline {
                background: #6b7280;
            }

        .contact-info {
            flex: 1;
            min-width: 0;
        }

        .contact-name {
            font-weight: 600;
            font-size: 0.95rem;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .contact-last-message {
            font-size: 0.8rem;
            opacity: 0.7;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .contact-meta {
            text-align: right;
            font-size: 0.75rem;
            opacity: 0.7;
        }

        .unread-badge {
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-user-info {
            display: flex;
            align-items: center;
        }

        .chat-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-right: 1rem;
            position: relative;
        }

        .chat-user-details h4 {
            font-weight: 600;
            margin: 0;
            color: #1e293b;
        }

        .chat-user-status {
            font-size: 0.8rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        .status-online {
            color: #10b981;
        }

        .status-offline {
            color: #6b7280;
        }

        .chat-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 8px;
            background: #f1f5f9;
            color: #64748b;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .action-btn:hover {
                background: #e2e8f0;
                color: #475569;
            }

        .messages-container-inner {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: #f8fafc;
            scroll-behavior: smooth;
            max-height: calc(100vh - 300px);
        }

        .message-bubble {
            max-width: 70%;
            margin-bottom: 1rem;
            animation: slideInMessage 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

            @@keyframes slideInMessage {
            from

        {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .message-bubble.sent {
            margin-left: auto;
            align-items: flex-end;
        }

        .message-bubble.received {
            margin-right: auto;
            align-items: flex-start;
        }

        .message-content {
            padding: 1rem 1.25rem;
            border-radius: 20px;
            position: relative;
            word-wrap: break-word;
            line-height: 1.5;
            max-width: fit-content;
            display: inline-block;
        }

        .message-bubble.sent .message-content {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-bubble.received .message-content {
            background: white;
            color: #1e293b;
            border: 1px solid #e2e8f0;
            border-bottom-left-radius: 6px;
        }

        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
            font-size: 0.75rem;
            opacity: 0.7;
            max-width: fit-content;
        }

        .message-bubble.sent .message-meta {
            align-self: flex-end;
        }

        .message-bubble.received .message-meta {
            align-self: flex-start;
        }

        .message-time {
            color: #64748b;
        }

        .message-status {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            color: #64748b;
        }

        .message-bubble.sent .message-status {
            color: rgba(255, 255, 255, 0.8);
        }

        .status-icon {
            width: 16px;
            height: 16px;
        }

        .message-input-area {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid #e2e8f0;
        }

        .message-form {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .message-input-container {
            flex: 1;
            position: relative;
        }

        .message-input {
            width: 100%;
            min-height: 50px;
            max-height: 120px;
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 25px;
            resize: none;
            font-size: 0.875rem;
            line-height: 1.5;
            overflow-y: auto;
            transition: all 0.3s ease;
        }

            .message-input:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .send-btn {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }

            .send-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
            }

            .send-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #64748b;
            text-align: center;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        .new-message-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

        .new-message-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border: none;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }

        .typing-indicator {
            display: none;
            padding: 0.5rem 1rem;
            margin: 0.5rem 0;
            background: #f1f5f9;
            border-radius: 20px;
            max-width: 150px;
            align-items: center;
        }

        .typing-dots {
            display: flex;
            gap: 0.25rem;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #64748b;
            animation: typingDot 1.4s infinite ease-in-out;
        }

            .typing-dot:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dot:nth-child(3) {
                animation-delay: 0.4s;
            }

            @@keyframes typingDot {
            0%, 80%, 100%

        {
            transform: scale(0.8);
            opacity: 0.5;
        }

        40% {
            transform: scale(1);
            opacity: 1;
        }

        }

            @@keyframes pulse {
            0%

        {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
        }

        }

        /* Mobile Responsive Enhancements */
            @@media (max-width: 768px) {
            .messages-container

        {
            height: calc(100vh - 80px);
            flex-direction: column;
            position: relative;
        }

        .contacts-sidebar {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 10;
            transform: translateX(0);
            transition: transform 0.3s ease;
        }

            .contacts-sidebar.hidden {
                transform: translateX(-100%);
            }

        .chat-area {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 5;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

            .chat-area.active {
                transform: translateX(0);
            }

        .mobile-back-btn {
            display: flex !important;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.15);
            border: none;
            color: white;
            cursor: pointer;
            font-size: 1rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 1rem;
        }

            .mobile-back-btn:hover {
                background: rgba(255, 255, 255, 0.25);
            }

            .mobile-back-btn:active {
                transform: scale(0.95);
            }

        /* Enhanced mobile chat header */
        .chat-header {
            padding: 1rem 1.5rem;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border-bottom: none;
        }

            .chat-header .chat-user-info h4 {
                color: white;
            }

            .chat-header .chat-user-status {
                color: rgba(255, 255, 255, 0.8);
            }

            .chat-header .action-btn {
                background: rgba(255, 255, 255, 0.15);
                color: white;
            }

                .chat-header .action-btn:hover {
                    background: rgba(255, 255, 255, 0.25);
                }

        .compose-btn {
            display: flex !important;
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border: none;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
            transition: all 0.3s ease;
            z-index: 1000;
            font-size: 1.2rem;
        }

        .contacts-header .action-btn {
            display: none;
        }

        .message-bubble {
            max-width: 85%;
        }

        .contacts-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Add a floating back button for extra visibility */
        .floating-back-btn {
            display: flex !important;
            position: fixed;
            top: 1rem;
            left: 1rem;
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            border-radius: 50%;
            width: 48px;
            height: 48px;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            z-index: 1001;
            font-size: 1.1rem;
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
            touch-action: manipulation;
        }

            .floating-back-btn:hover,
            .floating-back-btn:focus {
                background: rgba(0, 0, 0, 0.8);
                transform: scale(1.05);
                outline: none;
            }

            .floating-back-btn:active {
                transform: scale(0.95);
            }

        /* Make mobile back button more prominent */
        .mobile-back-btn {
            display: flex !important;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 1rem;
            min-width: 80px;
            touch-action: manipulation;
        }

            .mobile-back-btn:hover,
            .mobile-back-btn:focus {
                background: rgba(255, 255, 255, 0.3);
                border-color: rgba(255, 255, 255, 0.5);
                outline: none;
            }

            .mobile-back-btn:active {
                transform: scale(0.95);
                background: rgba(255, 255, 255, 0.15);
            }

        /* Enhanced touch targets for mobile */
        .contact-item {
            min-height: 72px;
            touch-action: manipulation;
            -webkit-tap-highlight-color: rgba(139, 92, 246, 0.2);
        }

        .send-btn,
        .compose-btn {
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
        }

        /* Better mobile message input */
        .message-input {
            font-size: 16px; /* Prevents zoom on iOS */
            -webkit-appearance: none;
            border-radius: 25px;
        }

        /* Swipe hint for conversations */
        .contacts-list::before {
            content: "👆 Tap any conversation to open • Swipe right in chat to go back";
            display: block;
            text-align: center;
            padding: 0.75rem;
            font-size: 0.8rem;
            color: #64748b;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 0.5rem;
            font-style: italic;
            border-radius: 8px 8px 0 0;
            line-height: 1.3;
        }

        /* Add visual indicator for swipe gesture */
        .chat-area.active::before {
            content: "← Swipe right or tap back button to return to conversations";
            position: fixed;
            bottom: 80px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.75rem;
            z-index: 1000;
            pointer-events: none;
            animation: fadeInOut 4s ease-in-out;
        }

            @@keyframes fadeInOut {
            0%, 100%

        {
            opacity: 0;
        }

        10%, 90% {
            opacity: 1;
        }

        }
        }

            @@media (min-width: 769px) {
            .mobile-back-btn

        {
            display: none !important;
        }

        .floating-back-btn {
            display: none !important;
        }

        .chat-area {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .contacts-sidebar {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .compose-btn {
            display: none !important;
        }

        .contacts-header .action-btn {
            display: flex;
        }

        .chat-header {
            background: white;
            color: inherit;
        }

            .chat-header .chat-user-info h4 {
                color: #1e293b;
            }

            .chat-header .chat-user-status {
                color: #64748b;
            }

            .chat-header .action-btn {
                background: #f1f5f9;
                color: #64748b;
            }

        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

            @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .last-seen {
            font-size: 0.7rem;
            color: #9ca3af;
        }

        /* Select2 Custom Styling */
        .select2-container--default .select2-selection--single {
            height: 42px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 0.75rem;
        }

            .select2-container--default .select2-selection--single .select2-selection__rendered {
                line-height: 26px;
                padding-left: 0;
            }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 40px;
            }

        .select2-dropdown {
            border: 1px solid #d1d5db;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .select2-container--default .select2-results__option--highlighted[aria-selected] {
            background-color: #8b5cf6;
        }

        .select2-container--default .select2-results__option {
            padding: 0.75rem;
            border-bottom: 1px solid #f1f5f9;
        }

            .select2-container--default .select2-results__option:last-child {
                border-bottom: none;
            }

        .user-option {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .user-option-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.8rem;
        }

        .user-option-info {
            flex: 1;
        }

        .user-option-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.125rem;
        }

        .user-option-details {
            font-size: 0.8rem;
            color: #64748b;
        }

        .message-type-badge {
            background: #3b82f6;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            width: fit-content;
        }

            .message-type-badge.type-reminder {
                background: #f59e0b;
            }

            .message-type-badge.type-promotion {
                background: #10b981;
            }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>@(User.IsInRole("Admin") ? "Administrator" : User.IsInRole("Manager") ? "Manager" : "Employee")</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link active">
                    <i class="fas fa-envelope"></i>
                    Messages
                    @if (Model.UnreadCount > 0)
                    {
                        <span class="notification-badge">@Model.UnreadCount</span>
                    }
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Messages</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search messages..." id="headerSearchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="New Message" onclick="openNewMessageModal()">
                    <i class="fas fa-plus"></i>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Messages Container -->
    <div class="dashboard-content">
        <div class="messages-container">
            <!-- Contacts Sidebar -->
            <div class="contacts-sidebar" id="contactsSidebar">
                <div class="contacts-header">
                    <h2 style="margin: 0; font-size: 1.25rem; font-weight: 600;">
                        <i class="fas fa-comments" style="margin-right: 0.5rem;"></i>
                        Conversations
                    </h2>
                    <button class="mobile-back-btn" onclick="showContactsList()" style="display: none;">
                        <i class="fas fa-arrow-left"></i>
                        Back
                    </button>
                    <button class="action-btn" onclick="openNewMessageModal()" title="New Message" style="background: rgba(255,255,255,0.2); color: white;">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>

                <div class="contacts-search">
                    <div class="search-box">
                        <input type="text" class="search-input" placeholder="Search conversations..." id="contactsSearchInput">
                        <i class="fas fa-search search-icon"></i>
                    </div>
                </div>

                <div class="contacts-list" id="contactsList">
                    @foreach (var conversation in Model.Conversations)
                    {
                        <div class="contact-item @(Model.SelectedConversation?.UserId == conversation.UserId ? "active" : "")"
                             data-user-id="@conversation.UserId"
                             data-user-name="@conversation.FullName"
                             data-user-initials="@conversation.UserInitials"
                             data-is-online="@conversation.IsOnline.ToString().ToLower()">
                            <div class="contact-avatar">
                                @conversation.UserInitials
                                <div class="online-indicator @(conversation.IsOnline ? "online" : "offline")"></div>
                            </div>
                            <div class="contact-info">
                                <div class="contact-name">@conversation.FullName</div>
                                <div class="contact-last-message">@(string.IsNullOrEmpty(conversation.LastMessage) ? "No messages yet" : conversation.LastMessage)</div>
                                @if (!string.IsNullOrEmpty(conversation.LastSeenFormatted))
                                {
                                    <div class="last-seen">@conversation.LastSeenFormatted</div>
                                }
                            </div>
                            <div class="contact-meta">
                                <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                                    @conversation.LastMessageTime
                                </div>
                                @if (conversation.UnreadCount > 0)
                                {
                                    <div class="unread-badge">@conversation.UnreadCount</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>

            <!-- Chat Area -->
            <div class="chat-area" id="chatArea">
                @if (Model.SelectedConversation != null)
                {
                    <!-- Chat Header -->
                    <div class="chat-header">
                        <div style="display: flex; align-items: center; width: 100%;">
                            <button class="mobile-back-btn" onclick="showContactsList()">
                                <i class="fas fa-arrow-left"></i>
                                <span>Back</span>
                            </button>
                            <div class="chat-user-info" style="flex: 1;">
                                <div class="chat-avatar" style="position: relative;">
                                    @Model.SelectedConversation.UserInitials
                                    @if (Model.SelectedConversation.IsOnline)
                                    {
                                        <div class="online-indicator online"></div>
                                    }
                                </div>
                                <div class="chat-user-details">
                                    <h4>@Model.SelectedConversation.FullName</h4>
                                    <div class="chat-user-status @(Model.SelectedConversation.IsOnline ? "status-online" : "status-offline")" id="userStatus-@Model.SelectedConversation.UserId">
                                        @if (Model.SelectedConversation.IsOnline)
                                        {
                                            <i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i>
                                            <span>Online</span>
                                        }
                                        else
                                        {
                                            <span>Last seen @Model.SelectedConversation.LastSeen?.ToString("MMM dd, HH:mm")</span>
                                        }
                                    </div>
                                </div>
                            </div>
                            <div class="chat-actions">
                                <button class="action-btn" title="Search Messages" onclick="toggleMessageSearch()">
                                    <i class="fas fa-search"></i>
                                </button>
                                <button class="action-btn" title="More Options">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Messages Container -->
                    <div class="messages-container-inner" id="messagesContainer">
                        @foreach (var message in Model.Messages.OrderBy(m => m.SentDate))
                        {
                            <div class="message-bubble @(message.IsFromCurrentUser ? "sent" : "received")" data-message-id="@message.MessageId">
                                @if (!string.IsNullOrEmpty(message.MessageType) && message.MessageType != "General")
                                {
                                    <div class="message-type-badge type-@message.MessageType.ToLower()">
                                        @message.MessageType
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(message.Subject))
                                {
                                    <div style="font-weight: 600; margin-bottom: 0.5rem; opacity: 0.9;">
                                        @message.Subject
                                    </div>
                                }

                                <div class="message-content">
                                    @message.Content
                                </div>

                                <div class="message-meta">
                                    <span class="message-time">@message.SentDate.ToString("HH:mm")</span>
                                    @if (message.IsFromCurrentUser)
                                    {
                                        <div class="message-status">
                                            @if (message.IsRead)
                                            {
                                                <i class="fas fa-eye status-icon" title="Read"></i>
                                                @if (message.ReadDate.HasValue)
                                                {
                                                    <span>@message.ReadDate.Value.ToString("HH:mm")</span>
                                                }
                                            }
                                            else
                                            {
                                                <i class="fas fa-check status-icon" title="Sent"></i>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Typing Indicator -->
                        <div class="typing-indicator" id="typingIndicator">
                            <div class="typing-dots">
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                                <div class="typing-dot"></div>
                            </div>
                            <span style="margin-left: 0.5rem; font-size: 0.8rem; color: #64748b;">typing...</span>
                        </div>
                    </div>

                    <!-- Message Input -->
                    <div class="message-input-area">
                        <div class="message-form">
                            <div class="message-input-container">
                                <textarea id="messageInput"
                                          class="message-input"
                                          placeholder="Type your message..."
                                          rows="1"></textarea>
                            </div>
                            <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <!-- Empty State -->
                    <div class="empty-state">
                        <i class="fas fa-comments empty-state-icon"></i>
                        <h3>Select a conversation</h3>
                        <p>Choose a contact from the sidebar to start messaging</p>
                        <button class="btn btn-primary" onclick="openNewMessageModal()" style="margin-top: 1rem;">
                            <i class="fas fa-plus"></i>
                            Start New Conversation
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Floating Compose Button (Mobile) -->
<button class="compose-btn" onclick="openNewMessageModal()">
    <i class="fas fa-plus"></i>
</button>

<!-- Floating Back Button (Mobile) -->
<button class="floating-back-btn" id="floatingBackBtn" onclick="goBackToContactsList()" style="display: none;">
    <i class="fas fa-arrow-left"></i>
</button>

<!-- New Message Modal -->
<div id="newMessageModal" class="new-message-modal">
    <div class="new-message-content">
        <div class="modal-header">
            <h3 style="margin: 0; font-weight: 600;">
                <i class="fas fa-plus-circle" style="margin-right: 0.5rem;"></i>
                New Message
            </h3>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closeNewMessageModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="newMessageForm">
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label class="form-label" for="recipientSelect">Send To *</label>
                    <select id="recipientSelect" name="ToUserId" class="form-control" required>
                        <option value="">Search and select recipient...</option>
                        @foreach (var user in Model.AllUsers)
                        {
                            <option value="@user.UserId"
                                    data-email="@user.Email"
                                    data-usertype="@user.UserType"
                                    data-initials="@(user.FullName.Split(' ').Select(n => n.FirstOrDefault()).Take(2).Aggregate("", (acc, c) => acc + c).ToUpper())">
                                @user.FullName (@user.UserType) - @user.Email
                            </option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageSubject">Subject *</label>
                    <input type="text" id="messageSubject" name="Subject" class="form-control" required placeholder="Enter message subject...">
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageType">Message Type</label>
                    <select id="messageType" name="MessageType" class="form-control">
                        <option value="General">General</option>
                        <option value="Reminder">Reminder</option>
                        <option value="Promotion">Promotion</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageContent">Message *</label>
                    <textarea id="messageContent" name="Content" class="form-control" rows="6" required placeholder="Type your message here..."></textarea>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeNewMessageModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="sendModalBtn">
                        <i class="fas fa-paper-plane"></i>
                        Send Message
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        let currentSelectedUserId = @(Model.SelectedConversation?.UserId ?? 0);
        let currentUserId = @Model.CurrentUserId;
        let isTyping = false;
        let typingTimeout;
        let lastMessageCheck = new Date();
        let allConversations = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Conversations));
        let messagePollingInterval;
        let onlineStatusInterval;
        let isLoadingConversation = false;

        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded - Initializing Messages Page');
            initializeMessagesPage();
        });

        function initializeMessagesPage() {
            try {
                setupMessageInput();
                setupSearch();
                setupConversationClickHandlers(); // New function for handling clicks
                initializeSelect2();
                setupMobileNavigation();
                addMobileTouchHandlers(); // Add touch support for mobile

                // Only start polling after a delay to ensure user interaction takes precedence
                setTimeout(() => {
                    if (!isLoadingConversation) {
                        startMessagePolling();
                        startOnlineStatusPolling();
                    }
                }, 3000);

                // Mark current conversation messages as read
                if (currentSelectedUserId > 0) {
                    markMessagesAsRead();
                }

                // Scroll to bottom of current conversation
                scrollToBottom();

                console.log('Messages page initialized successfully');
                console.log('Initial selected user ID:', currentSelectedUserId);
                console.log('Is mobile view:', window.innerWidth <= 768);
            } catch (error) {
                console.error('Error initializing messages page:', error);
            }
        }

        // Setup conversation click handlers using event delegation
        function setupConversationClickHandlers() {
            const contactsList = document.getElementById('contactsList');

            if (contactsList) {
                // Remove any existing listeners
                contactsList.removeEventListener('click', handleConversationClick);

                // Add event delegation listener
                contactsList.addEventListener('click', handleConversationClick);
                console.log('Conversation click handlers setup completed');
            }
        }

        // Handle conversation item clicks using event delegation
        function handleConversationClick(event) {
            // Find the closest contact-item element
            const contactItem = event.target.closest('.contact-item');

            if (!contactItem) {
                console.log('Click was not on a contact item');
                return;
            }

            // Prevent multiple clicks or clicks during loading
            if (contactItem.classList.contains('clicking') || isLoadingConversation) {
                console.log('Click ignored - already processing or loading');
                return;
            }

            const userId = parseInt(contactItem.dataset.userId);
            const userName = contactItem.dataset.userName;

            console.log('Contact item clicked:', { userId, userName, currentSelectedUserId });

            if (userId && userName && userId !== currentSelectedUserId) {
                // Add temporary class to prevent double clicks
                contactItem.classList.add('clicking');

                // Clear any existing polling to prevent interference
                if (messagePollingInterval) clearInterval(messagePollingInterval);
                if (onlineStatusInterval) clearInterval(onlineStatusInterval);

                setTimeout(() => {
                    contactItem.classList.remove('clicking');
                }, 1000);

                selectConversation(userId, userName);
            } else if (userId === currentSelectedUserId) {
                console.log('Same conversation already selected, ignoring click');
            } else {
                console.error('Missing or invalid user data on contact item:', contactItem.dataset);
            }
        }

        // Initialize Select2 with custom formatting
        function initializeSelect2() {
            try {
                document.getElementById('recipientSelect').select2({
                    placeholder: 'Search and select recipient...',
                    allowClear: true,
                    width: '100%',
                    templateResult: formatUserOption,
                    templateSelection: formatUserSelection,
                    matcher: customUserMatcher,
                    dropdownParent: document.getElementById('newMessageModal'),
                    language: {
                        noResults: function() {
                            return "No users found";
                        },
                        searching: function() {
                            return "Searching users...";
                        }
                    }
                });
                console.log('Select2 initialized successfully');
            } catch (error) {
                console.error('Error initializing Select2:', error);
            }
        }

        // Custom formatter for Select2 options
        function formatUserOption(user) {
            if (!user.id) return user.text;

            const userElement = user.element;
            const initials = userElement?.dataset?.initials || user.text.substring(0, 2).toUpperCase();
            const email = userElement?.dataset?.email || '';
            const userType = userElement?.dataset?.usertype || '';

            const div = document.createElement('div');
            div.className = 'user-option';
            div.innerHTML = `
                <div class="user-option-avatar">${initials}</div>
                <div class="user-option-info">
                    <div class="user-option-name">${user.text.split(' (')[0]}</div>
                    <div class="user-option-details">${userType} • ${email}</div>
                </div>
            `;
            return div;
        }

        // Custom formatter for Select2 selection
        function formatUserSelection(user) {
            if (!user.id) return user.text;
            return user.text.split(' (')[0]; // Show only the name
        }

        // Custom matcher for Select2 search
        function customUserMatcher(params, data) {
            if ($.trim(params.term) === '') {
                return data;
            }

            const searchTerm = params.term.toLowerCase();
            const optionElement = data.element;
            const name = data.text.toLowerCase();
            const email = optionElement?.dataset?.email?.toLowerCase() || '';
            const userType = optionElement?.dataset?.usertype?.toLowerCase() || '';

            if (name.includes(searchTerm) || email.includes(searchTerm) || userType.includes(searchTerm)) {
                return data;
            }

            return null;
        }

        function setupMessageInput() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (messageInput && sendBtn) {
                messageInput.addEventListener('input', function() {
                    const hasContent = this.value.trim().length > 0;
                    sendBtn.disabled = !hasContent;
                    autoResizeTextarea(this);
                    handleTyping();
                });

                messageInput.addEventListener('keydown', function(event) {
                    if (event.key === 'Enter' && !event.shiftKey) {
                        event.preventDefault();
                        sendMessage();
                    }
                });

                // Initial state
                sendBtn.disabled = true;
                console.log('Message input setup completed');
            }
        }

        function setupSearch() {
            const contactsSearch = document.getElementById('contactsSearchInput');
            const headerSearch = document.getElementById('headerSearchInput');

            if (contactsSearch) {
                contactsSearch.addEventListener('input', filterContacts);
            }

            if (headerSearch) {
                headerSearch.addEventListener('input', searchMessages);
            }
        }

        function filterContacts() {
            const searchTerm = document.getElementById('contactsSearchInput').value.toLowerCase();
            const contactItems = document.querySelectorAll('#contactsList .contact-item');

            console.log('Filtering contacts with term:', searchTerm);
            console.log('Found contact items:', contactItems.length);

            let visibleCount = 0;

            contactItems.forEach((item, index) => {
                try {
                    const nameElement = item.querySelector('.contact-name');
                    const lastMessageElement = item.querySelector('.contact-last-message');

                    if (!nameElement) {
                        console.warn('Contact name element not found for item:', index);
                        return;
                    }

                    const name = nameElement.textContent.toLowerCase();
                    const lastMessage = lastMessageElement ? lastMessageElement.textContent.toLowerCase() : '';

                    const shouldShow = !searchTerm || name.includes(searchTerm) || lastMessage.includes(searchTerm);

                    item.style.display = shouldShow ? 'flex' : 'none';

                    if (shouldShow) {
                        visibleCount++;
                    }
                } catch (error) {
                    console.error('Error filtering contact item:', index, error);
                }
            });

            console.log('Filtered contacts - visible:', visibleCount, 'total:', contactItems.length);
        }

        function searchMessages() {
            const searchTerm = document.getElementById('headerSearchInput').value.toLowerCase();
            const messageBubbles = document.querySelectorAll('.message-bubble');

            messageBubbles.forEach(bubble => {
                const content = bubble.querySelector('.message-content').textContent.toLowerCase();
                const subject = bubble.querySelector('[style*="font-weight: 600"]');
                const subjectText = subject ? subject.textContent.toLowerCase() : '';

                if (content.includes(searchTerm) || subjectText.includes(searchTerm)) {
                    bubble.style.display = 'flex';
                } else {
                    bubble.style.display = searchTerm === '' ? 'flex' : 'none';
                }
            });
        }

        // Fixed conversation selection function
        function selectConversation(userId, userName) {
            console.log('selectConversation called with:', { userId, userName, currentSelectedUserId });

            // Validate inputs
            if (!userId || userId <= 0) {
                console.error('Invalid userId provided:', userId);
                return;
            }

            try {
                // Stop any polling temporarily to prevent interference
                clearInterval(messagePollingInterval);
                clearInterval(onlineStatusInterval);

                // Update active state in contacts list
                document.querySelectorAll('.contact-item').forEach(item => {
                    item.classList.remove('active');
                });

                const selectedContact = document.querySelector(`[data-user-id="${userId}"]`);
                if (selectedContact) {
                    selectedContact.classList.add('active');
                    console.log('Active state updated for contact:', userId);
                } else {
                    console.error('Contact item not found for userId:', userId);
                }

                // Update current selected user BEFORE any async operations
                currentSelectedUserId = userId;

                if (window.innerWidth <= 768) {
                    // Mobile: show chat area and load conversation
                    console.log('Mobile view - loading conversation messages');
                    showChatArea();
                    loadConversationMessages(userId);
                } else {
                    // Desktop: Use pushState to avoid page reload but update URL
                    console.log('Desktop view - updating URL without reload');
                    const newUrl = `/Admin/Messages?userId=${userId}`;
                    history.pushState({ userId: userId, userName: userName }, '', newUrl);

                    // Load the conversation directly without page reload
                    loadConversationMessages(userId);
                }

                // Restart polling after a short delay
                setTimeout(() => {
                    startMessagePolling();
                    startOnlineStatusPolling();
                }, 2000);

            } catch (error) {
                console.error('Error in selectConversation:', error);
                showToast('Error selecting conversation', 'error');
            }
        }

        function startOnlineStatusPolling() {
            // Clear any existing polling interval
            if (onlineStatusInterval) {
                clearInterval(onlineStatusInterval);
            }

            // Poll for online status updates every 30 seconds
            onlineStatusInterval = setInterval(async function() {
                if (currentSelectedUserId > 0 && !isLoadingConversation) {
                    try {
                        const response = await fetch(`/Admin/GetUserOnlineStatus?userId=${currentSelectedUserId}`);
                        if (response.ok) {
                            const statusData = await response.json();
                            updateUserOnlineStatus(currentSelectedUserId, statusData.isOnline, statusData.lastSeen);
                        }
                    } catch (error) {
                        console.error('Error checking online status:', error);
                    }
                }
            }, 30000);
        }

        // Load conversation messages for mobile
        async function loadConversationMessages(userId) {
            console.log('loadConversationMessages called for userId:', userId);

            if (!userId || userId <= 0) {
                console.error('Invalid userId for loading messages:', userId);
                return;
            }

            if (isLoadingConversation) {
                console.log('Already loading a conversation, skipping...');
                return;
            }

            isLoadingConversation = true;

            try {
                showLoadingSpinner();

                const url = `/Admin/GetConversationMessages?userId=${userId}`;
                console.log('Fetching conversation from:', url);

                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
                }

                const data = await response.json();
                console.log('Conversation data received for userId:', userId, data);

                if (data.success) {
                    // Ensure we're still on the same conversation (user might have clicked another)
                    if (userId === currentSelectedUserId) {
                        updateChatArea(data.conversation, data.messages);
                        scrollToBottom();
                        markMessagesAsRead();
                        console.log('Conversation loaded successfully for user:', userId);
                    } else {
                        console.log('User changed conversation while loading, skipping update');
                    }
                } else {
                    console.error('Server returned error:', data.message);
                    showToast(data.message || 'Error loading messages', 'error');
                }
            } catch (error) {
                console.error('Error loading conversation for userId', userId, ':', error);
                showToast('Error loading conversation. Please try again.', 'error');
            } finally {
                isLoadingConversation = false;
                hideLoadingSpinner();
            }
        }

        // Update chat area with conversation data
        function updateChatArea(conversation, messages) {
            const chatArea = document.getElementById('chatArea');

            if (!conversation) {
                chatArea.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-comments empty-state-icon"></i>
                        <h3>No conversation selected</h3>
                        <p>Select a contact to start messaging</p>
                        <button class="btn btn-primary" onclick="openNewMessageModal()" style="margin-top: 1rem;">
                            <i class="fas fa-plus"></i>
                            Start New Conversation
                        </button>
                    </div>
                `;
                return;
            }

            const messagesHtml = messages.map(message => {
                const messageTypeHtml = message.messageType && message.messageType !== 'General'
                    ? `<div class="message-type-badge type-${message.messageType.toLowerCase()}">${message.messageType}</div>`
                    : '';

                const subjectHtml = message.subject
                    ? `<div style="font-weight: 600; margin-bottom: 0.5rem; opacity: 0.9;">${escapeHtml(message.subject)}</div>`
                    : '';

                const statusHtml = message.isFromCurrentUser
                    ? `<div class="message-status">
                         ${message.isRead
                           ? `<i class="fas fa-eye status-icon" title="Read"></i>${message.readDate ? `<span>${formatTime(message.readDate)}</span>` : ''}`
                           : `<i class="fas fa-check status-icon" title="Sent"></i>`}
                       </div>`
                    : '';

                return `
                    <div class="message-bubble ${message.isFromCurrentUser ? 'sent' : 'received'}" data-message-id="${message.messageId}">
                        ${messageTypeHtml}
                        ${subjectHtml}
                        <div class="message-content">${escapeHtml(message.content)}</div>
                        <div class="message-meta">
                            <span class="message-time">${formatTime(message.sentDate)}</span>
                            ${statusHtml}
                        </div>
                    </div>
                `;
            }).join('');

            chatArea.innerHTML = `
                <div class="chat-header">
                    <div style="display: flex; align-items: center; width: 100%;">
                        <button class="mobile-back-btn" onclick="goBackToContactsList()">
                            <i class="fas fa-arrow-left"></i>
                            <span>Back</span>
                        </button>
                        <div class="chat-user-info" style="flex: 1;">
                            <div class="chat-avatar" style="position: relative;">
                                ${conversation.userInitials}
                                ${conversation.isOnline ? '<div class="online-indicator online"></div>' : ''}
                            </div>
                            <div class="chat-user-details">
                                <h4>${escapeHtml(conversation.fullName)}</h4>
                                <div class="chat-user-status ${conversation.isOnline ? 'status-online' : 'status-offline'}" id="userStatus-${conversation.userId}">
                                    ${conversation.isOnline
                                      ? '<i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i><span>Online</span>'
                                      : `<span>Last seen ${conversation.lastSeenFormatted || 'Unknown'}</span>`}
                                </div>
                            </div>
                        </div>
                        <div class="chat-actions">
                            <button class="action-btn" title="Search Messages" onclick="toggleMessageSearch()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button class="action-btn" title="More Options">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="messages-container-inner" id="messagesContainer">
                    ${messagesHtml}
                    <div class="typing-indicator" id="typingIndicator">
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                        <span style="margin-left: 0.5rem; font-size: 0.8rem; color: #64748b;">typing...</span>
                    </div>
                </div>

                <div class="message-input-area">
                    <div class="message-form">
                        <div class="message-input-container">
                            <textarea
                                id="messageInput"
                                class="message-input"
                                placeholder="Type your message..."
                                rows="1"></textarea>
                        </div>
                        <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            `;

            // Re-initialize message input after updating chat area
            setupMessageInput();

            // Re-add mobile touch handlers for new elements
            addMobileTouchHandlers();
        }

        function showChatArea() {
            console.log('showChatArea called - mobile view');

            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');
                const floatingBackBtn = document.getElementById('floatingBackBtn');

                // Hide contacts sidebar
                if (contactsSidebar) {
                    contactsSidebar.classList.add('hidden');
                }

                // Show chat area
                if (chatArea) {
                    chatArea.classList.add('active');
                }

                // Show floating back button
                if (floatingBackBtn) {
                    floatingBackBtn.style.display = 'flex';
                }

                console.log('Mobile chat area activated');
            }
        }

        function showContactsList() {
            console.log('showContactsList called - returning to contacts list');

            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');
                const floatingBackBtn = document.getElementById('floatingBackBtn');

                // Show contacts sidebar
                if (contactsSidebar) {
                    contactsSidebar.classList.remove('hidden');
                }

                // Hide chat area
                if (chatArea) {
                    chatArea.classList.remove('active');
                }

                // Hide floating back button
                if (floatingBackBtn) {
                    floatingBackBtn.style.display = 'none';
                }

                // Clear current selection to allow re-selection
                currentSelectedUserId = 0;

                // Remove active state from all contacts
                document.querySelectorAll('.contact-item').forEach(item => {
                    item.classList.remove('active');
                });

                console.log('Mobile contacts list activated');
            }
        }

        function setupMobileNavigation() {
            const isMobile = window.innerWidth <= 768;
            const floatingBackBtn = document.getElementById('floatingBackBtn');

            console.log('setupMobileNavigation called - isMobile:', isMobile, 'currentSelectedUserId:', currentSelectedUserId);

            if (isMobile) {
                if (currentSelectedUserId > 0) {
                    // Show chat area if there's a selected conversation
                    showChatArea();
                } else {
                    // Show contacts list if no conversation selected
                    showContactsList();
                }
            } else {
                // Desktop: ensure everything is visible and back button is hidden
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.remove('hidden');
                if (chatArea) chatArea.classList.remove('active');
                if (floatingBackBtn) floatingBackBtn.style.display = 'none';
            }
        }

        // Fixed modal functions
        function openNewMessageModal() {
            console.log('Opening new message modal');
            try {
                const modal = document.getElementById('newMessageModal');
                if (modal) {
                    modal.style.display = 'block';

                    // Reset form
                    const form = document.getElementById('newMessageForm');
                    if (form) {
                        form.reset();
                    }

                    // Reset and focus Select2
                    const recipientSelect = document.getElementById('recipientSelect');
                    if (recipientSelect) {
                        recipientSelect.value = '';
                        recipientSelect.dispatchEvent(new Event('change'));
                    }

                    // Focus on the select after a short delay
                    setTimeout(() => {
                        try {
                            const recipientSelect = document.getElementById('recipientSelect');
                            if (recipientSelect && recipientSelect.select2) {
                                recipientSelect.select2('open');
                            }
                        } catch (e) {
                            console.warn('Could not open Select2 dropdown:', e);
                            // Fallback to focus on the select element
                            document.getElementById('recipientSelect').focus();
                        }
                    }, 100);
                } else {
                    console.error('New message modal not found');
                    showToast('Error opening message modal', 'error');
                }
            } catch (error) {
                console.error('Error opening new message modal:', error);
                showToast('Error opening message modal', 'error');
            }
        }

        function closeNewMessageModal() {
            console.log('Closing new message modal');
            try {
                const modal = document.getElementById('newMessageModal');
                if (modal) {
                    modal.style.display = 'none';

                    // Reset form
                    const form = document.getElementById('newMessageForm');
                    if (form) {
                        form.reset();
                    }

                    // Clear Select2 selection
                    const recipientSelect = document.getElementById('recipientSelect');
                    if (recipientSelect) {
                        recipientSelect.value = '';
                        recipientSelect.dispatchEvent(new Event('change'));
                    }
                }
            } catch (error) {
                console.error('Error closing modal:', error);
            }
        }

        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !currentSelectedUserId || messageInput.value.trim() === '') {
                console.log('Cannot send message: missing input or recipient');
                return;
            }

            const messageContent = messageInput.value.trim();

            try {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '<div class="loading-spinner"></div>';

                const response = await fetch('/Admin/SendQuickMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({
                        ToUserId: currentSelectedUserId,
                        Content: messageContent,
                        Subject: '',
                        MessageType: 'General'
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    messageInput.value = '';
                    autoResizeTextarea(messageInput);

                    // Add message to UI immediately for better UX
                    addMessageToUI({
                        messageId: result.messageId || Date.now(),
                        content: messageContent,
                        sentDate: new Date().toISOString(),
                        isFromCurrentUser: true,
                        isRead: false,
                        subject: '',
                        messageType: 'General'
                    });

                    scrollToBottom();
                    updateContactsList();
                } else {
                    showToast(result.message || 'Error sending message', 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showToast('Error sending message. Please try again.', 'error');
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
            }
        }

        function addMessageToUI(message) {
            const messagesContainer = document.getElementById('messagesContainer');
            const typingIndicator = document.getElementById('typingIndicator');

            if (!messagesContainer) return;

            const messageTypeHtml = message.messageType && message.messageType !== 'General'
                ? `<div class="message-type-badge type-${message.messageType.toLowerCase()}">${message.messageType}</div>`
                : '';

            const subjectHtml = message.subject
                ? `<div style="font-weight: 600; margin-bottom: 0.5rem; opacity: 0.9;">${escapeHtml(message.subject)}</div>`
                : '';

            const statusHtml = message.isFromCurrentUser
                ? `<div class="message-status">
                     ${message.isRead
                       ? `<i class="fas fa-eye status-icon" title="Read"></i>${message.readDate ? `<span>${formatTime(message.readDate)}</span>` : ''}`
                       : `<i class="fas fa-check status-icon" title="Sent"></i>`}
                   </div>`
                : '';

            const messageHtml = `
                <div class="message-bubble ${message.isFromCurrentUser ? 'sent' : 'received'}" data-message-id="${message.messageId}">
                    ${messageTypeHtml}
                    ${subjectHtml}
                    <div class="message-content">${escapeHtml(message.content)}</div>
                    <div class="message-meta">
                        <span class="message-time">${formatTime(message.sentDate)}</span>
                        ${statusHtml}
                    </div>
                </div>
            `;

            if (typingIndicator) {
                typingIndicator.insertAdjacentHTML('beforebegin', messageHtml);
            } else {
                messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            }
        }

        function autoResizeTextarea(textarea) {
            if (!textarea) return;
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        function handleTyping() {
            if (!isTyping && currentSelectedUserId > 0) {
                isTyping = true;
                // In a real implementation, you'd send typing status to server
            }

            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                if (isTyping) {
                    isTyping = false;
                }
            }, 1000);
        }

        function startMessagePolling() {
            // Poll for new messages every 5 seconds
            setInterval(async function() {
                if (currentSelectedUserId > 0) {
                    try {
                        const response = await fetch(`/Admin/GetNewMessages?lastCheck=${lastMessageCheck.toISOString()}`);
                        if (response.ok) {
                            const data = await response.json();

                            if (data.success && data.newMessages && data.newMessages.length > 0) {
                                handleNewMessages(data.newMessages);
                                lastMessageCheck = new Date();
                            }
                        }
                    } catch (error) {
                        console.error('Error polling for new messages:', error);
                    }
                }
            }, 5000);
        }

        function handleNewMessages(newMessages) {
            newMessages.forEach(message => {
                if (message.fromUserId === currentSelectedUserId || message.toUserId === currentSelectedUserId) {
                    addMessageToUI({
                        messageId: message.messageId,
                        content: message.content,
                        sentDate: message.sentDate,
                        isFromCurrentUser: message.fromUserId === currentUserId,
                        isRead: message.isRead,
                        subject: message.subject,
                        messageType: message.messageType,
                        readDate: message.readDate
                    });
                    scrollToBottom();
                }
            });

            updateContactsList();
        }

        async function updateContactsList() {
            try {
                const response = await fetch('/Admin/GetConversationsList');
                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        allConversations = data.conversations;
                        refreshContactsList();
                    }
                }
            } catch (error) {
                console.error('Error updating contacts list:', error);
            }
        }

        function refreshContactsList() {
            const contactsList = document.getElementById('contactsList');
            if (!contactsList || !allConversations) return;

            const contactsHtml = allConversations.map(conversation => `
                <div class="contact-item ${conversation.userId === currentSelectedUserId ? 'active' : ''}"
                     data-user-id="${conversation.userId}"
                     data-user-name="${escapeHtml(conversation.fullName)}"
                     data-user-initials="${conversation.userInitials}"
                     data-is-online="${conversation.isOnline}">
                    <div class="contact-avatar">
                        ${conversation.userInitials}
                        <div class="online-indicator ${conversation.isOnline ? 'online' : 'offline'}"></div>
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">${escapeHtml(conversation.fullName)}</div>
                        <div class="contact-last-message">${escapeHtml(conversation.lastMessage || 'No messages yet')}</div>
                        ${conversation.lastSeenFormatted ? `<div class="last-seen">${conversation.lastSeenFormatted}</div>` : ''}
                    </div>
                    <div class="contact-meta">
                        <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                            ${conversation.lastMessageTime || ''}
                        </div>
                        ${conversation.unreadCount > 0 ? `<div class="unread-badge">${conversation.unreadCount}</div>` : ''}
                    </div>
                </div>
            `).join('');

            contactsList.innerHTML = contactsHtml;

            // Re-setup click handlers after updating the HTML
            setupConversationClickHandlers();
        }

        function scrollToBottom() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                setTimeout(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 100);
            }
        }

        function markMessagesAsRead() {
            if (currentSelectedUserId > 0) {
                fetch('/Admin/MarkMessagesAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ userId: currentSelectedUserId })
                }).catch(error => {
                    console.error('Error marking messages as read:', error);
                });
            }
        }

        function handleNewMessages(newMessages) {
            newMessages.forEach(message => {
                // Only add messages that belong to the current conversation
                if ((message.fromUserId === currentSelectedUserId && message.toUserId === currentUserId) ||
                    (message.fromUserId === currentUserId && message.toUserId === currentSelectedUserId)) {
                    addMessageToUI({
                        messageId: message.messageId,
                        content: message.content,
                        sentDate: message.sentDate,
                        isFromCurrentUser: message.fromUserId === currentUserId,
                        isRead: message.isRead,
                        subject: message.subject,
                        messageType: message.messageType,
                        readDate: message.readDate
                    });
                    scrollToBottom();
                }
            });

            // Update contacts list without changing the current selection
            updateContactsListSilently();
        }

        // Update contacts list without affecting current selection
        async function updateContactsListSilently() {
            try {
                const response = await fetch('/Admin/GetConversationsList');
                if (response.ok) {
                    const data = await response.json();

                    if (data.success && data.conversations) {
                        // Update conversation data but preserve current selection
                        allConversations = data.conversations;

                        // Update unread counts and last messages without changing selection
                        updateContactsDisplay();
                    }
                }
            } catch (error) {
                console.error('Error updating contacts list silently:', error);
            }
        }

        // Update only the display of contacts without changing selection
        function updateContactsDisplay() {
            const contactItems = document.querySelectorAll('#contactsList .contact-item');

            contactItems.forEach(item => {
                const userId = parseInt(item.dataset.userId);
                const conversation = allConversations.find(c => c.userId === userId);

                if (conversation) {
                    // Update last message
                    const lastMessageElement = item.querySelector('.contact-last-message');
                    if (lastMessageElement) {
                        lastMessageElement.textContent = conversation.lastMessage || 'No messages yet';
                    }

                    // Update unread count
                    const existingBadge = item.querySelector('.unread-badge');
                    const metaContainer = item.querySelector('.contact-meta');

                    if (conversation.unreadCount > 0) {
                        if (!existingBadge) {
                            const badge = document.createElement('div');
                            badge.className = 'unread-badge';
                            badge.textContent = conversation.unreadCount;
                            metaContainer.appendChild(badge);
                        } else {
                            existingBadge.textContent = conversation.unreadCount;
                        }
                    } else if (existingBadge) {
                        existingBadge.remove();
                    }

                    // Update last message time
                    const timeElement = metaContainer.querySelector('div[style*="font-size: 0.7rem"]');
                    if (timeElement) {
                        timeElement.textContent = conversation.lastMessageTime || '';
                    }

                    // Update online status
                    const onlineIndicator = item.querySelector('.online-indicator');
                    if (onlineIndicator) {
                        onlineIndicator.className = `online-indicator ${conversation.isOnline ? 'online' : 'offline'}`;
                    }
                }
            });
        }

        // Modified updateContactsList that preserves selection
        async function updateContactsList() {
            console.log('updateContactsList called - preserving current selection:', currentSelectedUserId);

            try {
                const response = await fetch('/Admin/GetConversationsList');
                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        const previousSelection = currentSelectedUserId;
                        allConversations = data.conversations;

                        // Only refresh if no conversation is currently selected
                        if (!previousSelection || previousSelection <= 0) {
                            refreshContactsList();
                        } else {
                            // Just update the display without changing structure
                            updateContactsDisplay();
                        }
                    }
                }
            } catch (error) {
                console.error('Error updating contacts list:', error);
            }
        }

        // Modified refreshContactsList to preserve current selection
        function refreshContactsList() {
            const contactsList = document.getElementById('contactsList');
            if (!contactsList || !allConversations) return;

            console.log('refreshContactsList called - current selection:', currentSelectedUserId);

            const contactsHtml = allConversations.map(conversation => `
                <div class="contact-item ${conversation.userId === currentSelectedUserId ? 'active' : ''}"
                     data-user-id="${conversation.userId}"
                     data-user-name="${escapeHtml(conversation.fullName)}"
                     data-user-initials="${conversation.userInitials}"
                     data-is-online="${conversation.isOnline}">
                    <div class="contact-avatar">
                        ${conversation.userInitials}
                        <div class="online-indicator ${conversation.isOnline ? 'online' : 'offline'}"></div>
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">${escapeHtml(conversation.fullName)}</div>
                        <div class="contact-last-message">${escapeHtml(conversation.lastMessage || 'No messages yet')}</div>
                        ${conversation.lastSeenFormatted ? `<div class="last-seen">${conversation.lastSeenFormatted}</div>` : ''}
                    </div>
                    <div class="contact-meta">
                        <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                            ${conversation.lastMessageTime || ''}
                        </div>
                        ${conversation.unreadCount > 0 ? `<div class="unread-badge">${conversation.unreadCount}</div>` : ''}
                    </div>
                </div>
            `).join('');

            contactsList.innerHTML = contactsHtml;

            // Re-setup click handlers after updating the HTML
            setupConversationClickHandlers();

            // Re-add mobile touch handlers
            addMobileTouchHandlers();

            console.log('Contact list refreshed, preserved selection:', currentSelectedUserId);
        }

        function updateUserOnlineStatus(userId, isOnline, lastSeen) {
            const statusElement = document.getElementById(`userStatus-${userId}`);
            const avatarElement = statusElement?.closest('.chat-user-info')?.querySelector('.chat-avatar');

            if (statusElement) {
                statusElement.className = `chat-user-status ${isOnline ? 'status-online' : 'status-offline'}`;

                if (isOnline) {
                    statusElement.innerHTML = '<i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i><span>Online</span>';
                    if (avatarElement && !avatarElement.querySelector('.online-indicator')) {
                        avatarElement.style.position = 'relative';
                        const indicator = document.createElement('div');
                        indicator.className = 'online-indicator online';
                        avatarElement.appendChild(indicator);
                    }
                } else {
                    const lastSeenDate = new Date(lastSeen);
                    const formattedLastSeen = lastSeenDate.toLocaleDateString('en-US', {
                        month: 'short',
                        day: '2-digit',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    });
                    statusElement.innerHTML = `<span>Last seen ${formattedLastSeen}</span>`;
                    if (avatarElement) {
                        const indicator = avatarElement.querySelector('.online-indicator');
                        if (indicator) {
                            indicator.remove();
                        }
                    }
                }
            }
        }

        function toggleMessageSearch() {
            const headerSearch = document.getElementById('headerSearchInput');
            if (headerSearch) {
                headerSearch.focus();
            }
        }

        // Form submission handler
        document.addEventListener('DOMContentLoaded', function() {
            const newMessageForm = document.getElementById('newMessageForm');
            if (newMessageForm) {
                newMessageForm.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    console.log('Form submitted');

                    const formData = new FormData(this);
                    const sendBtn = document.getElementById('sendModalBtn');

                    const messageData = {
                        ToUserId: parseInt(formData.get('ToUserId')),
                        Subject: formData.get('Subject'),
                        Content: formData.get('Content'),
                        MessageType: formData.get('MessageType')
                    };

                    if (!messageData.ToUserId || !messageData.Subject || !messageData.Content) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    try {
                        sendBtn.disabled = true;
                        sendBtn.innerHTML = '<div class="loading-spinner"></div> Sending...';

                        const response = await fetch('/Admin/SendMessage', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify(messageData)
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const result = await response.json();

                        if (result.success) {
                            showToast('Message sent successfully!', 'success');
                            closeNewMessageModal();
                            updateContactsList();

                            // If the new message is to the currently selected user, refresh the conversation
                            if (messageData.ToUserId === currentSelectedUserId) {
                                if (window.innerWidth <= 768) {
                                    loadConversationMessages(currentSelectedUserId);
                                } else {
                                    location.reload();
                                }
                            }
                        } else {
                            showToast(result.message || 'Error sending message', 'error');
                        }
                    } catch (error) {
                        console.error('Error sending message:', error);
                        showToast('Error sending message. Please try again.', 'error');
                    } finally {
                        sendBtn.disabled = false;
                        sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send Message';
                    }
                });
            }
        });

        // Utility functions
        function formatTime(dateString) {
            try {
                const date = new Date(dateString);
                return date.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });
            } catch (error) {
                console.error('Error formatting time:', error);
                return '';
            }
        }

        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        function showLoadingSpinner() {
            // You can implement a global loading spinner here
            console.log('Loading...');
        }

        function hideLoadingSpinner() {
            // Hide global loading spinner
            console.log('Loading complete');
        }

        function showToast(message, type = 'info') {
            console.log(`Toast (${type}):`, message);

            // Create a simple toast notification
            const toast = document.createElement('div');
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                max-width: 300px;
                font-weight: 500;
            `;
            toast.textContent = message;

            document.body.appendChild(toast);

            setTimeout(() => {
                if (toast.parentNode) {
                    toast.parentNode.removeChild(toast);
                }
            }, 5000);
        }

        // Handle window resize
        window.addEventListener('resize', function() {
            setupMobileNavigation();
            if (window.innerWidth > 768) {
                // Desktop view - reset mobile classes
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.remove('hidden');
                if (chatArea) chatArea.classList.remove('active');
            }
        });

        // Handle browser back/forward navigation
        window.addEventListener('popstate', function(event) {
            console.log('Popstate event:', event.state);

            if (event.state && event.state.userId) {
                const userId = event.state.userId;
                const userName = event.state.userName;

                console.log('Handling popstate for userId:', userId);

                // Update current selection without causing another history change
                currentSelectedUserId = userId;

                // Update UI
                document.querySelectorAll('.contact-item').forEach(item => {
                    item.classList.remove('active');
                });

                const selectedContact = document.querySelector(`[data-user-id="${userId}"]`);
                if (selectedContact) {
                    selectedContact.classList.add('active');
                }

                // Load conversation
                loadConversationMessages(userId);
            }
        });

        // Handle browser back/forward navigation
        window.addEventListener('popstate', function(event) {
            console.log('Popstate event:', event.state);

            if (event.state && event.state.userId) {
                const userId = event.state.userId;
                const userName = event.state.userName;

                console.log('Handling popstate for userId:', userId);

                // Update current selection without causing another history change
                currentSelectedUserId = userId;

                // Update UI
                document.querySelectorAll('.contact-item').forEach(item => {
                    item.classList.remove('active');
                });

                const selectedContact = document.querySelector(`[data-user-id="${userId}"]`);
                if (selectedContact) {
                    selectedContact.classList.add('active');
                }

                // Load conversation
                loadConversationMessages(userId);
            }
        });

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            const modal = document.getElementById('newMessageModal');
            if (event.target === modal) {
                closeNewMessageModal();
            }
        });

        // Enhanced mobile back functionality
        function goBackToContactsList() {
            console.log('goBackToContactsList called');

            // Add haptic feedback for mobile (if supported)
            if (navigator.vibrate) {
                navigator.vibrate(50); // Short vibration
            }

            // Clear any loading states
            isLoadingConversation = false;

            // Stop polling
            if (messagePollingInterval) clearInterval(messagePollingInterval);
            if (onlineStatusInterval) clearInterval(onlineStatusInterval);

            // Show contacts list
            showContactsList();

            // Update URL for mobile (optional)
            if (window.innerWidth <= 768) {
                const newUrl = '/Admin/Messages';
                history.pushState({ showContacts: true }, '', newUrl);
            }

            console.log('Returned to contacts list');

            // Add a subtle animation to indicate the action
            const floatingBackBtn = document.getElementById('floatingBackBtn');
            if (floatingBackBtn) {
                floatingBackBtn.style.transform = 'scale(0.8)';
                setTimeout(() => {
                    floatingBackBtn.style.transform = 'scale(1)';
                }, 150);
            }
        }

        // Add touch-friendly event handlers for mobile
        function addMobileTouchHandlers() {
            if (window.innerWidth <= 768) {
                // Add touch event handlers for better mobile responsiveness
                const contactItems = document.querySelectorAll('.contact-item');

                contactItems.forEach(item => {
                    // Add touch feedback
                    item.addEventListener('touchstart', function() {
                        this.style.transform = 'scale(0.98)';
                    }, { passive: true });

                    item.addEventListener('touchend', function() {
                        this.style.transform = 'scale(1)';
                    }, { passive: true });
                });

                // Add touch feedback to buttons
                const buttons = document.querySelectorAll('.mobile-back-btn, .floating-back-btn, .send-btn, .compose-btn');
                buttons.forEach(btn => {
                    btn.addEventListener('touchstart', function() {
                        this.style.transform = 'scale(0.95)';
                    }, { passive: true });

                    btn.addEventListener('touchend', function() {
                        this.style.transform = 'scale(1)';
                    }, { passive: true });
                });

                // Add swipe gesture support for going back from chat to contacts
                addSwipeGestures();
            }
        }

        // Add swipe gesture support
        function addSwipeGestures() {
            const chatArea = document.getElementById('chatArea');
            let startX = 0;
            let startY = 0;
            let endX = 0;
            let endY = 0;

            if (chatArea) {
                chatArea.addEventListener('touchstart', function(e) {
                    startX = e.touches[0].clientX;
                    startY = e.touches[0].clientY;
                }, { passive: true });

                chatArea.addEventListener('touchend', function(e) {
                    endX = e.changedTouches[0].clientX;
                    endY = e.changedTouches[0].clientY;

                    // Calculate swipe distance and direction
                    const deltaX = endX - startX;
                    const deltaY = endY - startY;
                    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                    // If swipe is primarily horizontal, right direction, and long enough
                    if (Math.abs(deltaX) > Math.abs(deltaY) &&
                        deltaX > 50 &&
                        distance > 50 &&
                        window.innerWidth <= 768 &&
                        chatArea.classList.contains('active')) {

                        console.log('Swipe gesture detected - going back to contacts');
                        goBackToContactsList();

                        // Add haptic feedback
                        if (navigator.vibrate) {
                            navigator.vibrate(50);
                        }
                    }
                }, { passive: true });
            }
        }

        // Make functions globally accessible
        window.selectConversation = selectConversation;
        window.openNewMessageModal = openNewMessageModal;
        window.closeNewMessageModal = closeNewMessageModal;
        window.showContactsList = showContactsList;
        window.showChatArea = showChatArea;
        window.goBackToContactsList = goBackToContactsList;
        window.sendMessage = sendMessage;
        window.loadConversationMessages = loadConversationMessages;
        window.toggleMessageSearch = toggleMessageSearch;
        window.addMobileTouchHandlers = addMobileTouchHandlers;
        window.addSwipeGestures = addSwipeGestures;

        // Debug function to help troubleshoot conversation selection issues
        window.debugConversations = function() {
            console.log('=== CONVERSATION DEBUG INFO ===');
            console.log('Current selected user ID:', currentSelectedUserId);
            console.log('Current user ID:', currentUserId);
            console.log('Is loading conversation:', isLoadingConversation);
            console.log('All conversations:', allConversations);

            const contactItems = document.querySelectorAll('.contact-item');
            console.log('Contact items found:', contactItems.length);

            contactItems.forEach((item, index) => {
                const userId = item.dataset.userId;
                const userName = item.dataset.userName;
                const isActive = item.classList.contains('active');

                console.log(`Contact ${index + 1}:`, {
                    userId: userId,
                    userName: userName,
                    isActive: isActive,
                    dataset: item.dataset
                });
            });

            console.log('Message polling interval:', messagePollingInterval);
            console.log('Online status interval:', onlineStatusInterval);
            console.log('=== END DEBUG INFO ===');
        };

        // Add a test function to manually trigger conversation selection
        window.testConversationSelection = function(index = 0) {
            const contactItems = document.querySelectorAll('.contact-item');
            if (contactItems[index]) {
                const userId = parseInt(contactItems[index].dataset.userId);
                const userName = contactItems[index].dataset.userName;
                console.log(`Testing conversation selection for index ${index}:`, { userId, userName });

                // Stop any polling to prevent interference
                if (messagePollingInterval) clearInterval(messagePollingInterval);
                if (onlineStatusInterval) clearInterval(onlineStatusInterval);

                selectConversation(userId, userName);
            } else {
                console.log('No contact item found at index:', index);
            }
        };

        // Function to force refresh a specific conversation
        window.forceSelectConversation = function(userId) {
            console.log('Force selecting conversation:', userId);

            // Clear all intervals
            if (messagePollingInterval) clearInterval(messagePollingInterval);
            if (onlineStatusInterval) clearInterval(onlineStatusInterval);

            // Reset loading state
            isLoadingConversation = false;

            // Find the conversation in our data
            const conversation = allConversations.find(c => c.userId === parseInt(userId));
            if (conversation) {
                selectConversation(userId, conversation.fullName);
            } else {
                console.error('Conversation not found for userId:', userId);
                // Try to load it anyway
                currentSelectedUserId = parseInt(userId);
                loadConversationMessages(parseInt(userId));
            }
        };

        // Function to check if conversations are working
        window.testAllConversations = function() {
            console.log('Testing all conversations...');
            const contactItems = document.querySelectorAll('.contact-item');

            contactItems.forEach((item, index) => {
                const userId = item.dataset.userId;
                const userName = item.dataset.userName;

                console.log(`Contact ${index + 1}: userId=${userId}, userName=${userName}`);

                // Test the click event
                setTimeout(() => {
                    console.log(`Testing click for contact ${index + 1}`);
                    item.click();
                }, index * 1000); // Stagger the tests
            });
        };

        // Helper function to check conversation selection state
        window.checkConversationState = function() {
            console.log('=== CONVERSATION STATE CHECK ===');
            console.log('URL:', window.location.href);
            console.log('Selected User ID:', currentSelectedUserId);
            console.log('Is Loading:', isLoadingConversation);

            const activeContact = document.querySelector('.contact-item.active');
            if (activeContact) {
                console.log('Active contact userId:', activeContact.dataset.userId);
                console.log('Active contact userName:', activeContact.dataset.userName);
            } else {
                console.log('No active contact found');
            }

            const chatHeader = document.querySelector('.chat-header h4');
            if (chatHeader) {
                console.log('Chat header shows:', chatHeader.textContent);
            }

            console.log('=== END STATE CHECK ===');
        };

        // Add a function to manually clear all intervals (useful for debugging)
        window.clearAllIntervals = function() {
            console.log('Clearing all intervals...');
            if (messagePollingInterval) {
                clearInterval(messagePollingInterval);
                messagePollingInterval = null;
            }
            if (onlineStatusInterval) {
                clearInterval(onlineStatusInterval);
                onlineStatusInterval = null;
            }
            if (typingTimeout) {
                clearTimeout(typingTimeout);
                typingTimeout = null;
            }
            isLoadingConversation = false;
            console.log('All intervals cleared');
        };
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>