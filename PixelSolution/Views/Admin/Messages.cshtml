@model PixelSolution.ViewModels.MessagesPageViewModel
@{
    ViewData["Title"] = "Messages - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        /* FIXED SIDEBAR STYLES - HIDDEN BY DEFAULT */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: #1f2937;
            color: white;
            overflow-y: auto;
            z-index: 1000;
            transition: transform 0.3s ease;
            transform: translateX(-280px);
        }

            .sidebar.expanded {
                transform: translateX(0);
            }
            
            .sidebar.collapsed {
                transform: translateX(-240px);
                width: 40px;
            }

        /* FIXED MAIN CONTENT STYLES - FULL WIDTH BY DEFAULT */
        .main-content {
            margin-left: 0;
            min-height: 100vh;
            background: #f8fafc;
            transition: margin-left 0.3s ease;
            width: 100%;
        }

            .main-content.sidebar-open {
                margin-left: 280px;
                width: calc(100% - 280px);
            }
            
            .main-content.sidebar-collapsed {
                margin-left: 40px;
                width: calc(100% - 40px);
            }

        /* RESPONSIVE BEHAVIOR */
        @@media (max-width: 1024px) {
            .sidebar {
                transform: translateX(-100%);
                z-index: 1050;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0 !important;
                width: 100% !important;
            }

        /* Overlay for mobile */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

            .sidebar-overlay.active {
                display: block;
            }

        }

        /* Header Styles */
        .header {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            padding: 1rem 2rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .header-left {
            display: flex;
            align-items: center;
        }

        .page-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            margin: 0;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            color: #6b7280;
            font-size: 1.25rem;
            cursor: pointer;
            margin-right: 1rem;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
        }

            .sidebar-toggle:hover {
                background: #f3f4f6;
                color: #1f2937;
            }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .header-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 8px;
            background: #f1f5f9;
            color: #64748b;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

            .action-btn:hover {
                background: #e2e8f0;
                color: #475569;
            }

        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
        }

        .search-container {
            position: relative;
            margin-right: 1rem;
        }

            .search-container .search-input {
                width: 300px;
                padding: 0.5rem 1rem 0.5rem 2.5rem;
                border: 1px solid #d1d5db;
                border-radius: 8px;
                font-size: 0.875rem;
                background: white;
                transition: all 0.3s ease;
            }

                .search-container .search-input:focus {
                    outline: none;
                    border-color: #8b5cf6;
                    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
                }

            .search-container .search-icon {
                position: absolute;
                left: 0.75rem;
                top: 50%;
                transform: translateY(-50%);
                color: #6b7280;
            }

        /* Messages Container */
        .messages-container {
            height: calc(100vh - 80px);
            display: flex;
            background: #f8fafc;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin: 1rem;
        }

        /* Contacts Sidebar */
        .contacts-sidebar {
            width: 380px;
            background: white;
            border-right: 1px solid #e2e8f0;
            display: flex;
            flex-direction: column;
            transition: all 0.3s ease;
            transform: translateX(0);
        }

        .contacts-sidebar.collapsed {
            transform: translateX(-100%);
            width: 0;
            min-width: 0;
            overflow: hidden;
        }

        .contacts-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .contacts-search {
            padding: 1rem;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
        }

        .search-box {
            position: relative;
            width: 100%;
        }

        .search-input {
            width: 100%;
            padding: 0.75rem 1rem 0.75rem 2.5rem;
            border: 1px solid #d1d5db;
            border-radius: 12px;
            font-size: 0.875rem;
            background: white;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }

        .contacts-list {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .contact-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            z-index: 1;
            user-select: none;
        }

            .contact-item:hover {
                background: #f1f5f9;
                transform: translateX(4px);
            }

            .contact-item.active {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
                z-index: 2;
            }

            .contact-item.clicking {
                pointer-events: none;
                opacity: 0.7;
            }

            .contact-item * {
                pointer-events: none;
            }

        .contact-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            margin-right: 1rem;
            position: relative;
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid white;
        }

            .online-indicator.online {
                background: #10b981;
                animation: pulse 2s infinite;
            }

            .online-indicator.offline {
                background: #6b7280;
            }

        .contact-info {
            flex: 1;
            min-width: 0;
        }

        .contact-name {
            font-weight: 600;
            font-size: 0.95rem;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .contact-last-message {
            font-size: 0.8rem;
            opacity: 0.7;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 200px;
        }

        .contact-meta {
            text-align: right;
            font-size: 0.75rem;
            opacity: 0.7;
        }

        .unread-badge {
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        /* Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
            transition: all 0.3s ease;
        }

        .chat-area.expanded {
            width: 100%;
        }

        .chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e2e8f0;
            background: white;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-user-info {
            display: flex;
            align-items: center;
        }

        .chat-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-right: 1rem;
            position: relative;
        }

        .chat-user-details h4 {
            font-weight: 600;
            margin: 0;
            color: #1e293b;
        }

        .chat-user-status {
            font-size: 0.8rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        .status-online {
            color: #10b981;
        }

        .status-offline {
            color: #6b7280;
        }

        .chat-actions {
            display: flex;
            gap: 0.5rem;
        }

        .contacts-toggle {
            background: none;
            border: none;
            color: #6b7280;
            font-size: 1.25rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 6px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.5rem;
        }

        .contacts-toggle:hover {
            background: #f3f4f6;
            color: #1f2937;
        }

        .contacts-toggle.active {
            background: #8b5cf6;
            color: white;
        }

        .messages-container-inner {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: #f8fafc;
            scroll-behavior: smooth;
            max-height: calc(100vh - 300px);
        }

        .message-bubble {
            max-width: 70%;
            margin-bottom: 1rem;
            animation: slideInMessage 0.3s ease-out;
            display: flex;
            flex-direction: column;
        }

            @@keyframes slideInMessage {
            from

        {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .message-bubble.sent {
            margin-left: auto;
            align-items: flex-end;
        }

        .message-bubble.received {
            margin-right: auto;
            align-items: flex-start;
        }

        .message-content {
            padding: 1rem 1.25rem;
            border-radius: 20px;
            position: relative;
            word-wrap: break-word;
            line-height: 1.5;
            max-width: fit-content;
            display: inline-block;
        }

        .message-bubble.sent .message-content {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-bubble.received .message-content {
            background: white;
            color: #1e293b;
            border: 1px solid #e2e8f0;
            border-bottom-left-radius: 6px;
        }

        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
            font-size: 0.75rem;
            opacity: 0.7;
            max-width: fit-content;
        }

        .message-bubble.sent .message-meta {
            align-self: flex-end;
        }

        .message-bubble.received .message-meta {
            align-self: flex-start;
        }

        .message-time {
            color: #64748b;
        }

        .message-status {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            color: #64748b;
        }

        .message-bubble.sent .message-status {
            color: rgba(255, 255, 255, 0.8);
        }

        .status-icon {
            width: 16px;
            height: 16px;
        }

        .message-input-area {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid #e2e8f0;
        }

        .message-form {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .message-input-container {
            flex: 1;
            position: relative;
        }

        .message-input {
            width: 100%;
            min-height: 50px;
            max-height: 120px;
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 25px;
            resize: none;
            font-size: 0.875rem;
            line-height: 1.5;
            overflow-y: auto;
            transition: all 0.3s ease;
        }

            .message-input:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .send-btn {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
        }

            .send-btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
            }

            .send-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
                box-shadow: none;
            }

        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: #64748b;
            text-align: center;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        /* New Message Modal */
        .new-message-modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

        .new-message-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border: none;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }

        .typing-indicator {
            display: none;
            padding: 0.5rem 1rem;
            margin: 0.5rem 0;
            background: #f1f5f9;
            border-radius: 20px;
            max-width: 150px;
            align-items: center;
        }

        .typing-dots {
            display: flex;
            gap: 0.25rem;
        }

        .typing-dot {
            width: 6px;
            height: 6px;
            border-radius: 50%;
            background: #64748b;
            animation: typingDot 1.4s infinite ease-in-out;
        }

            .typing-dot:nth-child(2) {
                animation-delay: 0.2s;
            }

            .typing-dot:nth-child(3) {
                animation-delay: 0.4s;
            }

            @@keyframes typingDot {
            0%, 80%, 100%

        {
            transform: scale(0.8);
            opacity: 0.5;
        }

        40% {
            transform: scale(1);
            opacity: 1;
        }

        }

            @@keyframes pulse {
            0%

        {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.7);
        }

        70% {
            box-shadow: 0 0 0 10px rgba(16, 185, 129, 0);
        }

        100% {
            box-shadow: 0 0 0 0 rgba(16, 185, 129, 0);
        }

        }

        /* Mobile Responsive Enhancements */
            @@media (max-width: 768px) {
            .messages-container

        {
            height: calc(100vh - 80px);
            flex-direction: column;
            position: relative;
            margin: 0.5rem;
        }

        .search-container .search-input {
            width: 200px;
        }

        .contacts-sidebar {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 10;
            transform: translateX(0);
            transition: transform 0.3s ease;
        }

            .contacts-sidebar.hidden {
                transform: translateX(-100%);
            }

        .chat-area {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 5;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

            .chat-area.active {
                transform: translateX(0);
            }

        .mobile-back-btn {
            display: flex !important;
            align-items: center;
            gap: 0.5rem;
            padding: 0.75rem 1rem;
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            cursor: pointer;
            font-size: 0.9rem;
            border-radius: 8px;
            font-weight: 600;
            transition: all 0.3s ease;
            margin-right: 1rem;
            min-width: 80px;
            touch-action: manipulation;
        }

            .mobile-back-btn:hover,
            .mobile-back-btn:focus {
                background: rgba(255, 255, 255, 0.3);
                border-color: rgba(255, 255, 255, 0.5);
                outline: none;
            }

            .mobile-back-btn:active {
                transform: scale(0.95);
                background: rgba(255, 255, 255, 0.15);
            }

        /* Enhanced chat header for mobile */
        .chat-header {
            padding: 1rem 1.5rem;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border-bottom: none;
        }

            .chat-header .chat-user-info h4 {
                color: white;
            }

            .chat-header .chat-user-status {
                color: rgba(255, 255, 255, 0.8);
            }

            .chat-header .action-btn {
                background: rgba(255, 255, 255, 0.15);
                color: white;
            }

                .chat-header .action-btn:hover {
                    background: rgba(255, 255, 255, 0.25);
                }

        .compose-btn {
            display: flex !important;
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border: none;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
            transition: all 0.3s ease;
            z-index: 1000;
            font-size: 1.2rem;
        }

        .contacts-header .action-btn {
            display: none;
        }

        .message-bubble {
            max-width: 85%;
        }

        .contacts-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        /* Enhanced touch targets for mobile */
        .contact-item {
            min-height: 72px;
            touch-action: manipulation;
            -webkit-tap-highlight-color: rgba(139, 92, 246, 0.2);
        }

        .send-btn,
        .compose-btn {
            touch-action: manipulation;
            -webkit-tap-highlight-color: transparent;
        }

        /* Better mobile message input */
        .message-input {
            font-size: 16px; /* Prevents zoom on iOS */
            -webkit-appearance: none;
            border-radius: 25px;
        }

        /* Swipe hint for conversations */
        .contacts-list::before {
            content: "👆 Tap any conversation to open • Swipe right in chat to go back";
            display: block;
            text-align: center;
            padding: 0.75rem;
            font-size: 0.8rem;
            color: #64748b;
            background: #f8fafc;
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 0.5rem;
            font-style: italic;
            border-radius: 8px 8px 0 0;
            line-height: 1.3;
        }

        }

            @@media (min-width: 769px) {
            .mobile-back-btn

        {
            display: none !important;
        }

        .chat-area {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .contacts-sidebar {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .compose-btn {
            display: none !important;
        }

        .contacts-header .action-btn {
            display: flex;
        }

        .chat-header {
            background: white;
            color: inherit;
        }

            .chat-header .chat-user-info h4 {
                color: #1e293b;
            }

            .chat-header .chat-user-status {
                color: #64748b;
            }

            .chat-header .action-btn {
                background: #f1f5f9;
                color: #64748b;
            }

        }

        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

            @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 0.875rem;
            transition: all 0.3s ease;
        }

            .form-control:focus {
                outline: none;
                border-color: #8b5cf6;
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
        }

        .last-seen {
            font-size: 0.7rem;
            color: #9ca3af;
        }

        /* Sidebar Navigation Styles */
        .sidebar-header {
            padding: 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .logo-container {
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            color: white;
            font-size: 1.25rem;
        }

        .logo-text {
            font-size: 1.5rem;
            font-weight: 700;
            color: white;
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #10b981, #059669);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
        }

        .user-details h4 {
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
            color: white;
        }

        .user-details p {
            margin: 0;
            font-size: 0.875rem;
            color: rgba(255, 255, 255, 0.7);
        }

        .nav-menu {
            padding: 1rem 0;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-section-title {
            padding: 0 1.5rem 0.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.5);
            text-transform: uppercase;
            letter-spacing: 0.1em;
        }

        .nav-item {
            margin: 0 1rem 0.25rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
            font-weight: 500;
        }

            .nav-link:hover {
                background: rgba(255, 255, 255, 0.1);
                color: white;
                transform: translateX(4px);
            }

            .nav-link.active {
                background: linear-gradient(135deg, #8b5cf6, #7c3aed);
                color: white;
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }

            .nav-link i {
                margin-right: 0.75rem;
                font-size: 1.1rem;
                width: 20px;
                text-align: center;
            }

        /* Select2 Custom Styling */
        .select2-container--default .select2-selection--single {
            height: 42px;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            padding: 0.75rem;
        }

            .select2-container--default .select2-selection--single .select2-selection__rendered {
                line-height: 26px;
                padding-left: 0;
            }

            .select2-container--default .select2-selection--single .select2-selection__arrow {
                height: 40px;
            }

        .select2-dropdown {
            border: 1px solid #d1d5db;
            border-radius: 8px;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }

        .select2-container--default .select2-results__option--highlighted[aria-selected] {
            background-color: #8b5cf6;
        }

        .select2-container--default .select2-results__option {
            padding: 0.75rem;
            border-bottom: 1px solid #f1f5f9;
        }

            .select2-container--default .select2-results__option:last-child {
                border-bottom: none;
            }

        .user-option {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .user-option-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, #8b5cf6);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 0.8rem;
        }

        .user-option-info {
            flex: 1;
        }

        .user-option-name {
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.125rem;
        }

        .user-option-details {
            font-size: 0.8rem;
            color: #64748b;
        }

        .message-type-badge {
            background: #3b82f6;
            color: white;
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.7rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            width: fit-content;
        }

            .message-type-badge.type-reminder {
                background: #f59e0b;
            }

            .message-type-badge.type-promotion {
                background: #10b981;
            }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>@(User.IsInRole("Admin") ? "Administrator" : User.IsInRole("Manager") ? "Manager" : "Employee")</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link active">
                    <i class="fas fa-envelope"></i>
                    Messages
                    @if (Model.UnreadCount > 0)
                    {
                        <span class="notification-badge">@Model.UnreadCount</span>
                    }
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Sidebar Overlay for Mobile -->
<div class="sidebar-overlay" id="sidebarOverlay"></div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Messages</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search messages..." id="headerSearchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="contacts-toggle" id="contactsToggle" title="Toggle Contacts Sidebar" onclick="toggleContactsSidebar()">
                    <i class="fas fa-users"></i>
                </button>
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="New Message" onclick="openNewMessageModal()">
                    <i class="fas fa-plus"></i>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Messages Container -->
    <div class="messages-container">
        <!-- Contacts Sidebar -->
        <div class="contacts-sidebar" id="contactsSidebar">
            <div class="contacts-header">
                <h2 style="margin: 0; font-size: 1.25rem; font-weight: 600;">
                    <i class="fas fa-comments" style="margin-right: 0.5rem;"></i>
                    Conversations
                </h2>
                <button class="mobile-back-btn" onclick="showContactsList()" style="display: none;">
                    <i class="fas fa-arrow-left"></i>
                    Back
                </button>
                <button class="action-btn" onclick="openNewMessageModal()" title="New Message" style="background: rgba(255,255,255,0.2); color: white;">
                    <i class="fas fa-plus"></i>
                </button>
            </div>

            <div class="contacts-search">
                <div class="search-box">
                    <input type="text" class="search-input" placeholder="Search conversations..." id="contactsSearchInput">
                    <i class="fas fa-search search-icon"></i>
                </div>
            </div>

            <div class="contacts-list" id="contactsList">
                @if (Model?.Conversations != null)
                {
                    @foreach (var conversation in Model.Conversations)
                    {
                        <div class="contact-item @(Model.SelectedConversation?.UserId == conversation.UserId ? "active" : "")"
                             data-user-id="@conversation.UserId"
                             data-user-name="@conversation.FullName"
                             data-user-initials="@conversation.UserInitials"
                             data-is-online="@conversation.IsOnline.ToString().ToLower()">
                            <div class="contact-avatar">
                                @conversation.UserInitials
                                <div class="online-indicator @(conversation.IsOnline ? "online" : "offline")"></div>
                            </div>
                            <div class="contact-info">
                                <div class="contact-name">@conversation.FullName</div>
                                <div class="contact-last-message">@(string.IsNullOrEmpty(conversation.LastMessage) ? "No messages yet" : conversation.LastMessage)</div>
                                @if (!string.IsNullOrEmpty(conversation.LastSeenFormatted))
                                {
                                    <div class="last-seen">@conversation.LastSeenFormatted</div>
                                }
                            </div>
                            <div class="contact-meta">
                                <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                                    @conversation.LastMessageTime
                                </div>
                                @if (conversation.UnreadCount > 0)
                                {
                                    <div class="unread-badge">@conversation.UnreadCount</div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <!-- Chat Area -->
        <div class="chat-area" id="chatArea">
            @if (Model?.SelectedConversation != null)
            {
                <!-- Chat Header -->
                <div class="chat-header">
                    <div style="display: flex; align-items: center; width: 100%;">
                        <button class="mobile-back-btn" onclick="goBackToContactsList()">
                            <i class="fas fa-arrow-left"></i>
                            <span>Back</span>
                        </button>
                        <div class="chat-user-info" style="flex: 1;">
                            <div class="chat-avatar" style="position: relative;">
                                @Model.SelectedConversation.UserInitials
                                @if (Model.SelectedConversation.IsOnline)
                                {
                                    <div class="online-indicator online"></div>
                                }
                            </div>
                            <div class="chat-user-details">
                                <h4>@Model.SelectedConversation.FullName</h4>
                                <div class="chat-user-status @(Model.SelectedConversation.IsOnline ? "status-online" : "status-offline")" id="userStatus-@Model.SelectedConversation.UserId">
                                    @if (Model.SelectedConversation.IsOnline)
                                    {
                                        <i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i>
                                        <span>Online</span>
                                    }
                                    else
                                    {
                                        <span>Last seen @Model.SelectedConversation.LastSeen?.ToString("MMM dd, HH:mm")</span>
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="chat-actions">
                            <button class="contacts-toggle" title="Toggle Contacts" onclick="toggleContactsSidebar()">
                                <i class="fas fa-users"></i>
                            </button>
                            <button class="action-btn" title="Search Messages" onclick="toggleMessageSearch()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button class="action-btn" title="More Options">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Messages Container -->
                <div class="messages-container-inner" id="messagesContainer">
                    @if (Model?.Messages != null)
                    {
                        @foreach (var message in Model.Messages.OrderBy(m => m.SentDate))
                        {
                            <div class="message-bubble @(message.IsFromCurrentUser ? "sent" : "received")" data-message-id="@message.MessageId">
                                @if (!string.IsNullOrEmpty(message.MessageType) && message.MessageType != "General")
                                {
                                    <div class="message-type-badge type-@message.MessageType.ToLower()">
                                        @message.MessageType
                                    </div>
                                }

                                @if (!string.IsNullOrEmpty(message.Subject))
                                {
                                    <div style="font-weight: 600; margin-bottom: 0.5rem; opacity: 0.9;">
                                        @message.Subject
                                    </div>
                                }

                                <div class="message-content">
                                    @message.Content
                                </div>

                                <div class="message-meta">
                                    <span class="message-time">@message.SentDate.ToString("HH:mm")</span>
                                    @if (message.IsFromCurrentUser)
                                    {
                                        <div class="message-status">
                                            @if (message.IsRead)
                                            {
                                                <i class="fas fa-eye status-icon" title="Read"></i>
                                                @if (message.ReadDate.HasValue)
                                                {
                                                    <span>@message.ReadDate.Value.ToString("HH:mm")</span>
                                                }
                                            }
                                            else
                                            {
                                                <i class="fas fa-check status-icon" title="Sent"></i>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    }

                    <!-- Typing Indicator -->
                    <div class="typing-indicator" id="typingIndicator">
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                        <span style="margin-left: 0.5rem; font-size: 0.8rem; color: #64748b;">typing...</span>
                    </div>
                </div>

                <!-- Message Input -->
                <div class="message-input-area">
                    <div class="message-form">
                        <div class="message-input-container">
                            <textarea id="messageInput"
                                      class="message-input"
                                      placeholder="Type your message..."
                                      rows="1"></textarea>
                        </div>
                        <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            }
            else
            {
                <!-- Empty State -->
                <div class="empty-state">
                    <i class="fas fa-comments empty-state-icon"></i>
                    <h3>Select a conversation</h3>
                    <p>Choose a contact from the sidebar to start messaging</p>
                    <button class="btn btn-primary" onclick="openNewMessageModal()" style="margin-top: 1rem;">
                        <i class="fas fa-plus"></i>
                        Start New Conversation
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<!-- Floating Compose Button (Mobile) -->
<button class="compose-btn" onclick="openNewMessageModal()">
    <i class="fas fa-plus"></i>
</button>

<!-- New Message Modal -->
<div id="newMessageModal" class="new-message-modal">
    <div class="new-message-content">
        <div class="modal-header">
            <h3 style="margin: 0; font-weight: 600;">
                <i class="fas fa-plus-circle" style="margin-right: 0.5rem;"></i>
                New Message
            </h3>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closeNewMessageModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="newMessageForm">
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label class="form-label" for="recipientSelect">Send To *</label>
                    <select id="recipientSelect" name="ToUserId" class="form-control" required>
                        <option value="">Search and select recipient...</option>
                        @if (Model?.AllUsers != null)
                        {
                            @foreach (var user in Model.AllUsers)
                            {
                                <option value="@user.UserId"
                                        data-email="@user.Email"
                                        data-usertype="@user.UserType"
                                        data-initials="@(user.FullName.Split(' ').Select(n => n.FirstOrDefault()).Take(2).Aggregate("", (acc, c) => acc + c).ToUpper())">
                                    @user.FullName (@user.UserType) - @user.Email
                                </option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageSubject">Subject *</label>
                    <input type="text" id="messageSubject" name="Subject" class="form-control" required placeholder="Enter message subject...">
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageType">Message Type</label>
                    <select id="messageType" name="MessageType" class="form-control">
                        <option value="General">General</option>
                        <option value="Reminder">Reminder</option>
                        <option value="Promotion">Promotion</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageContent">Message *</label>
                    <textarea id="messageContent" name="Content" class="form-control" rows="6" required placeholder="Type your message here..."></textarea>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeNewMessageModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="sendModalBtn">
                        <i class="fas fa-paper-plane"></i>
                        Send Message
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        // ========================================
        // GLOBAL VARIABLES
        // ========================================
        let currentSelectedUserId = @(Model.SelectedConversation?.UserId ?? 0);
        let currentUserId = @Model.CurrentUserId;
        let isTyping = false;
        let typingTimeout;
        let lastMessageCheck = new Date();
        let allConversations = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Conversations));
        let messagePollingInterval;
        let onlineStatusInterval;
        let isLoadingConversation = false;
        let sidebarState = {
            isInitialized: false,
            isDesktop: window.innerWidth > 1024,
            isOpen: false,
            isCollapsed: false
        };

        // ========================================
        // MAIN INITIALIZATION
        // ========================================
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 Initializing Messages Page...');
            initializeMessagesPage();
        });

        /**
         * Main initialization function for the messages page
         * Coordinates all component initialization in the correct order
         */
        function initializeMessagesPage() {
            try {
                console.log('📋 Starting component initialization...');

                // Core functionality initialization
                initializeSidebarToggle();
                setupMessageInput();
                setupSearch();
                setupConversationClickHandlers();
                initializeSelect2();
                setupMobileNavigation();
                addMobileTouchHandlers();
                setupFormHandlers();
                setupWindowEventHandlers();

                // Initialize current conversation state
                if (currentSelectedUserId > 0) {
                    markMessagesAsRead();
                    scrollToBottom();
                }

                // Start background processes with delay to avoid interference
                setTimeout(() => {
                    if (!isLoadingConversation) {
                        startMessagePolling();
                        startOnlineStatusPolling();
                    }
                }, 3000);

                console.log('✅ Messages page initialized successfully');
                console.log('📊 State:', {
                    selectedUserId: currentSelectedUserId,
                    isMobile: window.innerWidth <= 768,
                    conversationCount: allConversations?.length || 0
                });

            } catch (error) {
                console.error('❌ Error initializing messages page:', error);
                showToast('Failed to initialize messages page', 'error');
            }
        }

        // ========================================
        // SIDEBAR TOGGLE FUNCTIONALITY
        // ========================================

        /**
         * Initialize sidebar toggle functionality for both desktop and mobile
         * Handles responsive behavior and state management
         */
        function initializeSidebarToggle() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const mainContent = document.getElementById('mainContent');
            const sidebarOverlay = document.getElementById('sidebarOverlay');

            if (!sidebarToggle || !sidebar || !mainContent) {
                console.error('❌ Critical sidebar elements not found');
                return;
            }

            // Clean up existing listeners
            sidebarToggle.removeEventListener('click', handleSidebarToggle);
            if (sidebarOverlay) {
                sidebarOverlay.removeEventListener('click', closeSidebar);
            }
            document.removeEventListener('keydown', handleEscapeKey);

            // Add event listeners
            sidebarToggle.addEventListener('click', handleSidebarToggle);
            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', closeSidebar);
            }
            document.addEventListener('keydown', handleEscapeKey);

            // Initialize proper state - start hidden on desktop
            updateSidebarState();
            if (window.innerWidth > 1024) {
                sidebar.classList.remove('expanded', 'collapsed');
                mainContent.classList.remove('sidebar-open', 'sidebar-collapsed');
            }
            sidebarState.isInitialized = true;

            console.log('🎛️ Sidebar toggle initialized');

            /**
             * Handle sidebar toggle button clicks
             * Determines desktop vs mobile behavior
             */
            function handleSidebarToggle(event) {
                event.preventDefault();
                event.stopPropagation();

                console.log('🔄 Sidebar toggle clicked');

                updateSidebarState();

                if (sidebarState.isDesktop) {
                    handleDesktopToggle();
                } else {
                    handleMobileToggle();
                }
            }

            /**
             * Handle desktop sidebar toggle behavior
             * Slides sidebar in/out and adjusts main content
             */
            function handleDesktopToggle() {
                const isHidden = !sidebar.classList.contains('expanded') && !sidebar.classList.contains('collapsed');
                const isExpanded = sidebar.classList.contains('expanded');
                const isCollapsed = sidebar.classList.contains('collapsed');

                if (isHidden) {
                    // Show sidebar expanded
                    sidebar.classList.add('expanded');
                    mainContent.classList.add('sidebar-open');
                    sidebarToggle.setAttribute('aria-expanded', 'true');
                    sidebarState.isCollapsed = false;
                    console.log('💻 Desktop: Sidebar expanded from hidden');
                } else if (isExpanded) {
                    // Collapse sidebar
                    sidebar.classList.remove('expanded');
                    sidebar.classList.add('collapsed');
                    mainContent.classList.remove('sidebar-open');
                    mainContent.classList.add('sidebar-collapsed');
                    sidebarToggle.setAttribute('aria-expanded', 'false');
                    sidebarState.isCollapsed = true;
                    console.log('💻 Desktop: Sidebar collapsed');
                } else if (isCollapsed) {
                    // Hide sidebar completely
                    sidebar.classList.remove('collapsed');
                    mainContent.classList.remove('sidebar-collapsed');
                    sidebarToggle.setAttribute('aria-expanded', 'false');
                    sidebarState.isCollapsed = false;
                    console.log('💻 Desktop: Sidebar hidden');
                }

                // Save state to localStorage
                localStorage.setItem('sidebarCollapsed', sidebarState.isCollapsed.toString());
            }

            /**
             * Handle mobile sidebar toggle behavior
             * Shows/hides overlay sidebar
             */
            function handleMobileToggle() {
                if (sidebarState.isOpen) {
                    closeSidebar();
                } else {
                    openSidebar();
                }
            }

            /**
             * Open sidebar in mobile mode
             */
            function openSidebar() {
                sidebar.classList.add('open');
                if (sidebarOverlay) {
                    sidebarOverlay.classList.add('active');
                }
                sidebarToggle.setAttribute('aria-expanded', 'true');
                document.body.style.overflow = 'hidden';
                sidebarState.isOpen = true;

                console.log('📱 Mobile: Sidebar opened');

                // Add subtle animation to toggle button
                sidebarToggle.style.transform = 'rotate(90deg)';
                setTimeout(() => {
                    sidebarToggle.style.transform = '';
                }, 200);
            }

            /**
             * Close sidebar in mobile mode
             */
            function closeSidebar() {
                sidebar.classList.remove('open');
                if (sidebarOverlay) {
                    sidebarOverlay.classList.remove('active');
                }
                sidebarToggle.setAttribute('aria-expanded', 'false');
                document.body.style.overflow = '';
                sidebarState.isOpen = false;

                console.log('📱 Mobile: Sidebar closed');
            }

            /**
             * Handle escape key press to close mobile sidebar
             */
            function handleEscapeKey(event) {
                if (event.key === 'Escape' && !sidebarState.isDesktop && sidebarState.isOpen) {
                    closeSidebar();
                }
            }

            /**
             * Update sidebar state based on current screen size
             */
            function updateSidebarState() {
                const wasDesktop = sidebarState.isDesktop;
                sidebarState.isDesktop = window.innerWidth > 1024;

                if (wasDesktop !== sidebarState.isDesktop) {
                    handleScreenSizeChange();
                }
                
                // Initialize sidebar as hidden on desktop load
                if (sidebarState.isDesktop && !sidebarState.isInitialized) {
                    sidebar.classList.remove('expanded', 'collapsed');
                    mainContent.classList.remove('sidebar-open', 'sidebar-collapsed');
                }
                }
            }

            /**
             * Handle screen size changes between desktop and mobile
             */
            function handleScreenSizeChange() {
                if (sidebarState.isDesktop) {
                    // Switching to desktop
                    sidebar.classList.remove('open');
                    if (sidebarOverlay) {
                        sidebarOverlay.classList.remove('active');
                    }
                    document.body.style.overflow = '';
                    sidebarState.isOpen = false;

                    // Restore collapsed state from localStorage
                    const savedCollapsed = localStorage.getItem('sidebarCollapsed') === 'true';
                    if (savedCollapsed) {
                        sidebar.classList.add('collapsed');
                        mainContent.classList.add('expanded');
                        sidebarState.isCollapsed = true;
                    }

                    console.log('🖥️ Switched to desktop mode');
                } else {
                    // Switching to mobile
                    sidebar.classList.remove('collapsed');
                    mainContent.classList.remove('expanded');
                    sidebarState.isCollapsed = false;

                    console.log('📱 Switched to mobile mode');
                }
            }

            // Expose functions globally for external access
            window.openSidebar = openSidebar;
            window.closeSidebar = closeSidebar;
            window.toggleSidebar = handleSidebarToggle;

            // Handle window resize with debouncing
            let resizeTimeout;
            window.addEventListener('resize', function() {
                clearTimeout(resizeTimeout);
                resizeTimeout = setTimeout(() => {
                    updateSidebarState();
                    setupMobileNavigation();
                }, 150);
            });
        }

        // ========================================
        // MESSAGE INPUT FUNCTIONALITY
        // ========================================

        /**
         * Setup message input functionality
         * Handles typing, auto-resize, and send button state
         */
        function setupMessageInput() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !sendBtn) {
                console.warn('⚠️ Message input elements not found');
                return;
            }

            // Clean up existing listeners
            messageInput.removeEventListener('input', handleMessageInput);
            messageInput.removeEventListener('keydown', handleKeyDown);

            // Add event listeners
            messageInput.addEventListener('input', handleMessageInput);
            messageInput.addEventListener('keydown', handleKeyDown);

            // Initialize state
            sendBtn.disabled = true;

            console.log('📝 Message input setup completed');

            function handleMessageInput() {
                const hasContent = this.value.trim().length > 0;
                sendBtn.disabled = !hasContent;
                autoResizeTextarea(this);
                handleTyping();

                // Update send button appearance
                if (hasContent) {
                    sendBtn.classList.add('active');
                } else {
                    sendBtn.classList.remove('active');
                }
            }

            function handleKeyDown(event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    if (!sendBtn.disabled) {
                        sendMessage();
                    }
                }
            }
        }

        /**
         * Auto-resize textarea based on content
         */
        function autoResizeTextarea(textarea) {
            if (!textarea) return;

            textarea.style.height = 'auto';
            const newHeight = Math.min(textarea.scrollHeight, 120);
            textarea.style.height = newHeight + 'px';

            // Adjust container if needed
            const container = textarea.closest('.message-input-area');
            if (container && newHeight > 50) {
                container.style.paddingTop = '2rem';
            } else if (container) {
                container.style.paddingTop = '1.5rem';
            }
        }

        /**
         * Handle typing indicator
         */
        function handleTyping() {
            if (!isTyping && currentSelectedUserId > 0) {
                isTyping = true;
                // Note: In production, send typing status to server
                console.log('👨‍💻 User started typing');
            }

            clearTimeout(typingTimeout);
            typingTimeout = setTimeout(() => {
                if (isTyping) {
                    isTyping = false;
                    console.log('⏹️ User stopped typing');
                }
            }, 2000);
        }

        // ========================================
        // SEARCH FUNCTIONALITY
        // ========================================

        /**
         * Setup search functionality for both contacts and messages
         */
        function setupSearch() {
            const contactsSearch = document.getElementById('contactsSearchInput');
            const headerSearch = document.getElementById('headerSearchInput');

            if (contactsSearch) {
                contactsSearch.addEventListener('input', debounce(filterContacts, 300));
                contactsSearch.addEventListener('focus', function() {
                    this.parentElement.classList.add('focused');
                });
                contactsSearch.addEventListener('blur', function() {
                    this.parentElement.classList.remove('focused');
                });
            }

            if (headerSearch) {
                headerSearch.addEventListener('input', debounce(searchMessages, 300));
                headerSearch.addEventListener('focus', function() {
                    this.parentElement.classList.add('focused');
                });
                headerSearch.addEventListener('blur', function() {
                    this.parentElement.classList.remove('focused');
                });
            }

            console.log('🔍 Search functionality initialized');
        }

        /**
         * Filter contacts list based on search term
         */
        function filterContacts() {
            const searchTerm = document.getElementById('contactsSearchInput').value.toLowerCase().trim();
            const contactItems = document.querySelectorAll('#contactsList .contact-item');
            let visibleCount = 0;

            contactItems.forEach((item, index) => {
                try {
                    const nameElement = item.querySelector('.contact-name');
                    const lastMessageElement = item.querySelector('.contact-last-message');

                    if (!nameElement) {
                        console.warn(`⚠️ Contact name element missing for item ${index}`);
                        return;
                    }

                    const name = nameElement.textContent.toLowerCase();
                    const lastMessage = lastMessageElement ? lastMessageElement.textContent.toLowerCase() : '';
                    const shouldShow = !searchTerm || name.includes(searchTerm) || lastMessage.includes(searchTerm);

                    item.style.display = shouldShow ? 'flex' : 'none';

                    if (shouldShow) {
                        visibleCount++;
                        // Highlight matching text
                        highlightSearchTerm(nameElement, searchTerm);
                    }
                } catch (error) {
                    console.error(`❌ Error filtering contact item ${index}:`, error);
                }
            });

            console.log(`🔍 Filtered contacts: ${visibleCount}/${contactItems.length} visible`);

            // Show no results message if needed
            showNoResultsMessage(visibleCount === 0 && searchTerm.length > 0, 'contacts');
        }

        /**
         * Search messages in current conversation
         */
        function searchMessages() {
            const searchTerm = document.getElementById('headerSearchInput').value.toLowerCase().trim();
            const messageBubbles = document.querySelectorAll('.message-bubble');
            let visibleCount = 0;

            messageBubbles.forEach(bubble => {
                const content = bubble.querySelector('.message-content').textContent.toLowerCase();
                const subject = bubble.querySelector('[style*="font-weight: 600"]');
                const subjectText = subject ? subject.textContent.toLowerCase() : '';

                const shouldShow = !searchTerm || content.includes(searchTerm) || subjectText.includes(searchTerm);

                bubble.style.display = shouldShow ? 'flex' : 'none';

                if (shouldShow) {
                    visibleCount++;
                    // Highlight matching text
                    if (searchTerm) {
                        highlightSearchTerm(bubble.querySelector('.message-content'), searchTerm);
                    }
                }
            });

            console.log(`🔍 Filtered messages: ${visibleCount}/${messageBubbles.length} visible`);

            // Show no results message if needed
            showNoResultsMessage(visibleCount === 0 && searchTerm.length > 0, 'messages');
        }

        /**
         * Highlight search term in text content
         */
        function highlightSearchTerm(element, term) {
            if (!element || !term) return;

            const originalText = element.textContent;
            const regex = new RegExp(`(${escapeRegex(term)})`, 'gi');
            const highlightedText = originalText.replace(regex, '<mark>$1</mark>');

            if (highlightedText !== originalText) {
                element.innerHTML = highlightedText;
            }
        }

        /**
         * Show/hide no results message
         */
        function showNoResultsMessage(show, type) {
            const existingMessage = document.querySelector('.no-results-message');

            if (existingMessage) {
                existingMessage.remove();
            }

            if (show) {
                const container = type === 'contacts' ?
                    document.getElementById('contactsList') :
                    document.getElementById('messagesContainer');

                if (container) {
                    const message = document.createElement('div');
                    message.className = 'no-results-message';
                    message.innerHTML = `
                        <div style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-search" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                            <p>No ${type} found matching your search</p>
                        </div>
                    `;
                    container.appendChild(message);
                }
            }
        }

        // ========================================
        // CONVERSATION MANAGEMENT
        // ========================================

        /**
         * Setup conversation click handlers using event delegation
         */
        function setupConversationClickHandlers() {
            const contactsList = document.getElementById('contactsList');

            if (!contactsList) {
                console.warn('⚠️ Contacts list not found');
                return;
            }

            // Clean up existing listeners
            contactsList.removeEventListener('click', handleConversationClick);

            // Add event delegation listener
            contactsList.addEventListener('click', handleConversationClick);

            console.log('💬 Conversation click handlers setup');
        }

        /**
         * Handle conversation item clicks using event delegation
         */
        function handleConversationClick(event) {
            const contactItem = event.target.closest('.contact-item');

            if (!contactItem) {
                return;
            }

            // Prevent multiple clicks or clicks during loading
            if (contactItem.classList.contains('clicking') || isLoadingConversation) {
                console.log('⏸️ Click ignored - already processing');
                return;
            }

            const userId = parseInt(contactItem.dataset.userId);
            const userName = contactItem.dataset.userName;

            console.log('👆 Contact clicked:', { userId, userName });

            if (userId && userName && userId !== currentSelectedUserId) {
                // Add temporary class to prevent double clicks
                contactItem.classList.add('clicking');

                // Visual feedback
                contactItem.style.transform = 'scale(0.98)';
                setTimeout(() => {
                    contactItem.style.transform = '';
                    contactItem.classList.remove('clicking');
                }, 200);

                // Clear existing polling to prevent interference
                clearInterval(messagePollingInterval);
                clearInterval(onlineStatusInterval);

                selectConversation(userId, userName);
            } else if (userId === currentSelectedUserId) {
                console.log('ℹ️ Same conversation already selected');
            } else {
                console.error('❌ Invalid user data:', contactItem.dataset);
            }
        }

        /**
         * Select and load a conversation
         */
        function selectConversation(userId, userName) {
            console.log('🎯 Selecting conversation:', { userId, userName });

            if (!userId || userId <= 0) {
                console.error('❌ Invalid userId provided:', userId);
                return;
            }

            try {
                // Update active state in contacts list
                updateContactActiveState(userId);

                // Update current selected user
                currentSelectedUserId = userId;

                if (window.innerWidth <= 768) {
                    // Mobile: show chat area and load conversation
                    console.log('📱 Mobile: Loading conversation');
                    showChatArea();
                    loadConversationMessages(userId);
                } else {
                    // Desktop: Update URL and load conversation
                    console.log('💻 Desktop: Loading conversation');
                    const newUrl = `/Admin/Messages?userId=${userId}`;
                    history.pushState({ userId: userId, userName: userName }, '', newUrl);
                    loadConversationMessages(userId);
                }

                // Restart polling after delay
                setTimeout(() => {
                    startMessagePolling();
                    startOnlineStatusPolling();
                }, 2000);

            } catch (error) {
                console.error('❌ Error selecting conversation:', error);
                showToast('Error selecting conversation', 'error');
            }
        }

        /**
         * Update active state for contacts
         */
        function updateContactActiveState(userId) {
            document.querySelectorAll('.contact-item').forEach(item => {
                item.classList.remove('active');
            });

            const selectedContact = document.querySelector(`[data-user-id="${userId}"]`);
            if (selectedContact) {
                selectedContact.classList.add('active');
                console.log('✅ Active state updated for contact:', userId);
            } else {
                console.error('❌ Contact item not found for userId:', userId);
            }
        }

        /**
         * Load conversation messages
         */
        async function loadConversationMessages(userId) {
            console.log('📥 Loading conversation messages for userId:', userId);

            if (!userId || userId <= 0) {
                console.error('❌ Invalid userId for loading messages');
                return;
            }

            if (isLoadingConversation) {
                console.log('⏳ Already loading conversation, skipping...');
                return;
            }

            isLoadingConversation = true;
            showLoadingSpinner();

            try {
                const url = `/Admin/GetConversationMessages?userId=${userId}`;
                const response = await fetch(url);

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();

                if (data.success) {
                    // Ensure we're still on the same conversation
                    if (userId === currentSelectedUserId) {
                        updateChatArea(data.conversation, data.messages);
                        scrollToBottom();
                        markMessagesAsRead();
                        console.log('✅ Conversation loaded successfully');
                    } else {
                        console.log('ℹ️ User changed conversation while loading');
                    }
                } else {
                    console.error('❌ Server error:', data.message);
                    showToast(data.message || 'Error loading messages', 'error');
                }
            } catch (error) {
                console.error('❌ Error loading conversation:', error);
                showToast('Error loading conversation. Please try again.', 'error');
            } finally {
                isLoadingConversation = false;
                hideLoadingSpinner();
            }
        }

        /**
         * Update chat area with conversation data
         */
        function updateChatArea(conversation, messages) {
            const chatArea = document.getElementById('chatArea');

            if (!conversation) {
                chatArea.innerHTML = createEmptyStateHtml();
                return;
            }

            const messagesHtml = messages.map(createMessageHtml).join('');
            chatArea.innerHTML = createChatAreaHtml(conversation, messagesHtml);

            // Re-initialize components
            setupMessageInput();
            addMobileTouchHandlers();
        }

        /**
         * Create HTML for individual message
         */
        function createMessageHtml(message) {
            const messageTypeHtml = message.messageType && message.messageType !== 'General'
                ? `<div class="message-type-badge type-${message.messageType.toLowerCase()}">${message.messageType}</div>`
                : '';

            const subjectHtml = message.subject
                ? `<div style="font-weight: 600; margin-bottom: 0.5rem; opacity: 0.9;">${escapeHtml(message.subject)}</div>`
                : '';

            const statusHtml = message.isFromCurrentUser
                ? `<div class="message-status">
                     ${message.isRead
                       ? `<i class="fas fa-eye status-icon" title="Read"></i>${message.readDate ? `<span>${formatTime(message.readDate)}</span>` : ''}`
                       : `<i class="fas fa-check status-icon" title="Sent"></i>`}
                   </div>`
                : '';

            return `
                <div class="message-bubble ${message.isFromCurrentUser ? 'sent' : 'received'}" data-message-id="${message.messageId}">
                    ${messageTypeHtml}
                    ${subjectHtml}
                    <div class="message-content">${escapeHtml(message.content)}</div>
                    <div class="message-meta">
                        <span class="message-time">${formatTime(message.sentDate)}</span>
                        ${statusHtml}
                    </div>
                </div>
            `;
        }

        /**
         * Create HTML for complete chat area
         */
        function createChatAreaHtml(conversation, messagesHtml) {
            return `
                <div class="chat-header">
                    <div style="display: flex; align-items: center; width: 100%;">
                        <button class="mobile-back-btn" onclick="goBackToContactsList()">
                            <i class="fas fa-arrow-left"></i>
                            <span>Back</span>
                        </button>
                        <div class="chat-user-info" style="flex: 1;">
                            <div class="chat-avatar" style="position: relative;">
                                ${conversation.userInitials}
                                ${conversation.isOnline ? '<div class="online-indicator online"></div>' : ''}
                            </div>
                            <div class="chat-user-details">
                                <h4>${escapeHtml(conversation.fullName)}</h4>
                                <div class="chat-user-status ${conversation.isOnline ? 'status-online' : 'status-offline'}" id="userStatus-${conversation.userId}">
                                    ${conversation.isOnline
                                      ? '<i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i><span>Online</span>'
                                      : `<span>Last seen ${conversation.lastSeenFormatted || 'Unknown'}</span>`}
                                </div>
                            </div>
                        </div>
                        <div class="chat-actions">
                            <button class="action-btn" title="Search Messages" onclick="toggleMessageSearch()">
                                <i class="fas fa-search"></i>
                            </button>
                            <button class="action-btn" title="More Options">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>
                        </div>
                    </div>
                </div>

                <div class="messages-container-inner" id="messagesContainer">
                    ${messagesHtml}
                    <div class="typing-indicator" id="typingIndicator">
                        <div class="typing-dots">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                        <span style="margin-left: 0.5rem; font-size: 0.8rem; color: #64748b;">typing...</span>
                    </div>
                </div>

                <div class="message-input-area">
                    <div class="message-form">
                        <div class="message-input-container">
                            <textarea
                                id="messageInput"
                                class="message-input"
                                placeholder="Type your message..."
                                rows="1"></textarea>
                        </div>
                        <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            `;
        }

        /**
         * Create HTML for empty state
         */
        function createEmptyStateHtml() {
            return `
                <div class="empty-state">
                    <i class="fas fa-comments empty-state-icon"></i>
                    <h3>Select a conversation</h3>
                    <p>Choose a contact from the sidebar to start messaging</p>
                    <button class="btn btn-primary" onclick="openNewMessageModal()" style="margin-top: 1rem;">
                        <i class="fas fa-plus"></i>
                        Start New Conversation
                    </button>
                </div>
            `;
        }

        // ========================================
        // MESSAGE SENDING
        // ========================================

        /**
         * Send a quick message in the current conversation
         */
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !currentSelectedUserId || !messageInput.value.trim()) {
                console.log('⚠️ Cannot send message: missing requirements');
                return;
            }

            const messageContent = messageInput.value.trim();

            // Optimistic UI update
            const tempMessage = {
                messageId: 'temp-' + Date.now(),
                content: messageContent,
                sentDate: new Date().toISOString(),
                isFromCurrentUser: true,
                isRead: false,
                subject: '',
                messageType: 'General'
            };

            try {
                // Update UI immediately
                sendBtn.disabled = true;
                sendBtn.innerHTML = '<div class="loading-spinner"></div>';
                messageInput.value = '';
                autoResizeTextarea(messageInput);

                addMessageToUI(tempMessage);
                scrollToBottom();

                const response = await fetch('/Admin/SendQuickMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({
                        ToUserId: currentSelectedUserId,
                        Content: messageContent,
                        Subject: '',
                        MessageType: 'General'
                    })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    // Update temporary message with real data
                    updateTemporaryMessage(tempMessage.messageId, {
                        messageId: result.messageId,
                        sentDate: result.sentDate || tempMessage.sentDate
                    });

                    updateContactsList();
                    console.log('✅ Message sent successfully');
                } else {
                    removeTemporaryMessage(tempMessage.messageId);
                    showToast(result.message || 'Error sending message', 'error');
                }
            } catch (error) {
                console.error('❌ Error sending message:', error);
                removeTemporaryMessage(tempMessage.messageId);
                messageInput.value = messageContent; // Restore message
                showToast('Error sending message. Please try again.', 'error');
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
            }
        }

        /**
         * Add message to UI immediately for optimistic updates
         */
        function addMessageToUI(message) {
            const messagesContainer = document.getElementById('messagesContainer');
            const typingIndicator = document.getElementById('typingIndicator');

            if (!messagesContainer) return;

            const messageHtml = createMessageHtml(message);

            if (typingIndicator) {
                typingIndicator.insertAdjacentHTML('beforebegin', messageHtml);
            } else {
                messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
            }

            // Add animation
            const newMessage = messagesContainer.querySelector(`[data-message-id="${message.messageId}"]`);
            if (newMessage) {
                newMessage.style.opacity = '0';
                newMessage.style.transform = 'translateY(20px)';
                setTimeout(() => {
                    newMessage.style.transition = 'all 0.3s ease';
                    newMessage.style.opacity = '1';
                    newMessage.style.transform = 'translateY(0)';
                }, 10);
            }
        }

        /**
         * Update temporary message with real data
         */
        function updateTemporaryMessage(tempId, realData) {
            const messageElement = document.querySelector(`[data-message-id="${tempId}"]`);
            if (messageElement && realData.messageId) {
                messageElement.setAttribute('data-message-id', realData.messageId);
                messageElement.classList.add('sent-success');
            }
        }

        /**
         * Remove temporary message (on error)
         */
        function removeTemporaryMessage(tempId) {
            const messageElement = document.querySelector(`[data-message-id="${tempId}"]`);
            if (messageElement) {
                messageElement.style.opacity = '0';
                messageElement.style.transform = 'translateX(-20px)';
                setTimeout(() => {
                    messageElement.remove();
                }, 300);
            }
        }

        // ========================================
        // MOBILE NAVIGATION
        // ========================================

        /**
         * Setup mobile navigation behavior
         */
        function setupMobileNavigation() {
            const isMobile = window.innerWidth <= 768;
            console.log(`📱 Mobile navigation setup: ${isMobile ? 'mobile' : 'desktop'} mode`);

            if (isMobile) {
                if (currentSelectedUserId > 0) {
                    showChatArea();
                } else {
                    showContactsList();
                }
            } else {
                // Desktop: ensure everything is visible
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.remove('hidden');
                if (chatArea) chatArea.classList.remove('active');
            }
        }

        /**
         * Show chat area (mobile)
         */
        function showChatArea() {
            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.add('hidden');
                if (chatArea) chatArea.classList.add('active');

                console.log('📱 Chat area shown');
            }
        }

        /**
         * Show contacts list (mobile)
         */
        function showContactsList() {
            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.remove('hidden');
                if (chatArea) chatArea.classList.remove('active');

                // Clear current selection
                currentSelectedUserId = 0;
                document.querySelectorAll('.contact-item').forEach(item => {
                    item.classList.remove('active');
                });

                console.log('📱 Contacts list shown');
            }
        }

        /**
         * Go back to contacts list from chat
         */
        function goBackToContactsList() {
            console.log('🔙 Going back to contacts list');

            // Haptic feedback
            if (navigator.vibrate) {
                navigator.vibrate(50);
            }

            // Clear loading states
            isLoadingConversation = false;

            // Stop polling
            clearInterval(messagePollingInterval);
            clearInterval(onlineStatusInterval);

            showContactsList();

            // Update URL
            if (window.innerWidth <= 768) {
                history.pushState({ showContacts: true }, '', '/Admin/Messages');
            }
        }

        /**
         * Add mobile touch handlers for better UX
         */
        function addMobileTouchHandlers() {
            if (window.innerWidth <= 768) {
                // Touch feedback for contact items
                const contactItems = document.querySelectorAll('.contact-item');
                contactItems.forEach(addTouchFeedback);

                // Touch feedback for buttons
                const buttons = document.querySelectorAll('.mobile-back-btn, .send-btn, .compose-btn');
                buttons.forEach(addTouchFeedback);

                // Add swipe gestures
                addSwipeGestures();

                console.log('👆 Mobile touch handlers added');
            }
        }

        /**
         * Add touch feedback to element
         */
        function addTouchFeedback(element) {
            element.addEventListener('touchstart', function() {
                this.style.transform = 'scale(0.96)';
                this.style.transition = 'transform 0.1s ease';
            }, { passive: true });

            element.addEventListener('touchend', function() {
                this.style.transform = 'scale(1)';
            }, { passive: true });

            element.addEventListener('touchcancel', function() {
                this.style.transform = 'scale(1)';
            }, { passive: true });
        }

        /**
         * Add swipe gesture support
         */
        function addSwipeGestures() {
            const chatArea = document.getElementById('chatArea');
            if (!chatArea) return;

            let startX = 0, startY = 0, endX = 0, endY = 0;

            chatArea.addEventListener('touchstart', function(e) {
                startX = e.touches[0].clientX;
                startY = e.touches[0].clientY;
            }, { passive: true });

            chatArea.addEventListener('touchend', function(e) {
                endX = e.changedTouches[0].clientX;
                endY = e.changedTouches[0].clientY;

                const deltaX = endX - startX;
                const deltaY = endY - startY;
                const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);

                // Right swipe to go back
                if (Math.abs(deltaX) > Math.abs(deltaY) &&
                    deltaX > 50 &&
                    distance > 50 &&
                    window.innerWidth <= 768 &&
                    chatArea.classList.contains('active')) {

                    goBackToContactsList();

                    if (navigator.vibrate) {
                        navigator.vibrate(50);
                    }
                }
            }, { passive: true });
        }

        // ========================================
        // SELECT2 INITIALIZATION
        // ========================================

        /**
         * Initialize Select2 for user selection in new message modal
         */
        function initializeSelect2() {
            const selectElement = document.getElementById('recipientSelect');
            if (!selectElement) {
                console.warn('⚠️ Recipient select element not found');
                return;
            }

            try {
                $(selectElement).select2({
                    placeholder: 'Search and select recipient...',
                    allowClear: true,
                    width: '100%',
                    templateResult: formatUserOption,
                    templateSelection: formatUserSelection,
                    matcher: customUserMatcher,
                    dropdownParent: $('#newMessageModal'),
                    language: {
                        noResults: () => "No users found",
                        searching: () => "Searching users...",
                        inputTooShort: () => "Type to search users"
                    },
                    minimumInputLength: 0
                });

                console.log('🎯 Select2 initialized');
            } catch (error) {
                console.error('❌ Error initializing Select2:', error);
            }
        }

        /**
         * Format user option for Select2
         */
        function formatUserOption(user) {
            if (!user.id) return user.text;

            const userElement = user.element;
            const initials = userElement?.dataset?.initials || user.text.substring(0, 2).toUpperCase();
            const email = userElement?.dataset?.email || '';
            const userType = userElement?.dataset?.usertype || '';

            const $div = $('<div class="user-option">').append([
                $('<div class="user-option-avatar">').text(initials),
                $('<div class="user-option-info">').append([
                    $('<div class="user-option-name">').text(user.text.split(' (')[0]),
                    $('<div class="user-option-details">').text(`${userType} • ${email}`)
                ])
            ]);

            return $div;
        }

        /**
         * Format user selection for Select2
         */
        function formatUserSelection(user) {
            return user.id ? user.text.split(' (')[0] : user.text;
        }

        /**
         * Custom matcher for Select2 search
         */
        function customUserMatcher(params, data) {
            if (!params.term?.trim()) return data;

            const searchTerm = params.term.toLowerCase();
            const optionElement = data.element;
            const name = data.text.toLowerCase();
            const email = optionElement?.dataset?.email?.toLowerCase() || '';
            const userType = optionElement?.dataset?.usertype?.toLowerCase() || '';

            return (name.includes(searchTerm) ||
                    email.includes(searchTerm) ||
                    userType.includes(searchTerm)) ? data : null;
        }

        // ========================================
        // MODAL MANAGEMENT
        // ========================================

        /**
         * Open new message modal
         */
        function openNewMessageModal() {
            console.log('📬 Opening new message modal');

            const modal = document.getElementById('newMessageModal');
            const form = document.getElementById('newMessageForm');

            if (!modal) {
                console.error('❌ Modal not found');
                showToast('Error opening message modal', 'error');
                return;
            }

            try {
                // Reset form
                if (form) form.reset();

                // Reset Select2
                const recipientSelect = $('#recipientSelect');
                if (recipientSelect.length) {
                    recipientSelect.val('').trigger('change');
                }

                // Show modal
                modal.style.display = 'block';
                document.body.style.overflow = 'hidden';

                // Focus first input
                setTimeout(() => {
                    const firstInput = modal.querySelector('input, select, textarea');
                    if (firstInput) firstInput.focus();
                }, 100);

                console.log('✅ Modal opened');
            } catch (error) {
                console.error('❌ Error opening modal:', error);
                showToast('Error opening message modal', 'error');
            }
        }

        /**
         * Close new message modal
         */
        function closeNewMessageModal() {
            console.log('📪 Closing new message modal');

            const modal = document.getElementById('newMessageModal');
            const form = document.getElementById('newMessageForm');

            if (modal) {
                modal.style.display = 'none';
                document.body.style.overflow = '';

                // Reset form
                if (form) form.reset();

                // Reset Select2
                const recipientSelect = $('#recipientSelect');
                if (recipientSelect.length) {
                    recipientSelect.val('').trigger('change');
                }

                console.log('✅ Modal closed');
            }
        }

        // ========================================
        // FORM HANDLERS
        // ========================================

        /**
         * Setup form submission handlers
         */
        function setupFormHandlers() {
            const newMessageForm = document.getElementById('newMessageForm');

            if (newMessageForm) {
                newMessageForm.removeEventListener('submit', handleFormSubmit);
                newMessageForm.addEventListener('submit', handleFormSubmit);
                console.log('📝 Form handlers setup');
            }
        }

        /**
         * Handle new message form submission
         */
        async function handleFormSubmit(event) {
            event.preventDefault();
            console.log('📤 Form submitted');

            const formData = new FormData(event.target);
            const sendBtn = document.getElementById('sendModalBtn');

            const messageData = {
                ToUserId: parseInt(formData.get('ToUserId')),
                Subject: formData.get('Subject'),
                Content: formData.get('Content'),
                MessageType: formData.get('MessageType')
            };

            // Validation
            if (!messageData.ToUserId || !messageData.Subject || !messageData.Content) {
                showToast('Please fill in all required fields', 'error');
                return;
            }

            try {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '<div class="loading-spinner"></div> Sending...';

                const response = await fetch('/Admin/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify(messageData)
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const result = await response.json();

                if (result.success) {
                    showToast('Message sent successfully!', 'success');
                    closeNewMessageModal();
                    updateContactsList();

                    // Refresh conversation if sending to current user
                    if (messageData.ToUserId === currentSelectedUserId) {
                        setTimeout(() => loadConversationMessages(currentSelectedUserId), 1000);
                    }
                } else {
                    showToast(result.message || 'Error sending message', 'error');
                }
            } catch (error) {
                console.error('❌ Error sending message:', error);
                showToast('Error sending message. Please try again.', 'error');
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send Message';
            }
        }

        // ========================================
        // POLLING AND REAL-TIME UPDATES
        // ========================================

        /**
         * Start polling for new messages
         */
        function startMessagePolling() {
            clearInterval(messagePollingInterval);

            messagePollingInterval = setInterval(async function() {
                if (currentSelectedUserId > 0 && !isLoadingConversation) {
                    try {
                        const response = await fetch(`/Admin/GetNewMessages?lastCheck=${lastMessageCheck.toISOString()}`);

                        if (response.ok) {
                            const data = await response.json();

                            if (data.success && data.newMessages?.length > 0) {
                                handleNewMessages(data.newMessages);
                                lastMessageCheck = new Date();
                            }
                        }
                    } catch (error) {
                        console.error('❌ Error polling messages:', error);
                    }
                }
            }, 5000);

            console.log('🔄 Message polling started');
        }

        /**
         * Start polling for online status
         */
        function startOnlineStatusPolling() {
            clearInterval(onlineStatusInterval);

            onlineStatusInterval = setInterval(async function() {
                if (currentSelectedUserId > 0 && !isLoadingConversation) {
                    try {
                        const response = await fetch(`/Admin/GetUserOnlineStatus?userId=${currentSelectedUserId}`);

                        if (response.ok) {
                            const statusData = await response.json();
                            updateUserOnlineStatus(currentSelectedUserId, statusData.isOnline, statusData.lastSeen);
                        }
                    } catch (error) {
                        console.error('❌ Error checking online status:', error);
                    }
                }
            }, 30000);

            console.log('🟢 Online status polling started');
        }

        /**
         * Handle new incoming messages
         */
        function handleNewMessages(newMessages) {
            newMessages.forEach(message => {
                // Only show messages for current conversation
                if ((message.fromUserId === currentSelectedUserId && message.toUserId === currentUserId) ||
                    (message.fromUserId === currentUserId && message.toUserId === currentSelectedUserId)) {

                    addMessageToUI({
                        messageId: message.messageId,
                        content: message.content,
                        sentDate: message.sentDate,
                        isFromCurrentUser: message.fromUserId === currentUserId,
                        isRead: message.isRead,
                        subject: message.subject,
                        messageType: message.messageType,
                        readDate: message.readDate
                    });

                    scrollToBottom();

                    // Show notification for incoming messages
                    if (message.fromUserId === currentSelectedUserId) {
                        showNotification('New message received', message.content.substring(0, 50));
                    }
                }
            });

            updateContactsList();
        }

        /**
         * Update user online status in UI
         */
        function updateUserOnlineStatus(userId, isOnline, lastSeen) {
            const statusElement = document.getElementById(`userStatus-${userId}`);
            const avatarElement = statusElement?.closest('.chat-user-info')?.querySelector('.chat-avatar');

            if (statusElement) {
                statusElement.className = `chat-user-status ${isOnline ? 'status-online' : 'status-offline'}`;

                if (isOnline) {
                    statusElement.innerHTML = '<i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i><span>Online</span>';

                    if (avatarElement && !avatarElement.querySelector('.online-indicator')) {
                        const indicator = document.createElement('div');
                        indicator.className = 'online-indicator online';
                        avatarElement.appendChild(indicator);
                    }
                } else {
                    const lastSeenFormatted = formatLastSeen(lastSeen);
                    statusElement.innerHTML = `<span>Last seen ${lastSeenFormatted}</span>`;

                    const indicator = avatarElement?.querySelector('.online-indicator');
                    if (indicator) indicator.remove();
                }
            }

            // Update in contacts list
            const contactItem = document.querySelector(`[data-user-id="${userId}"]`);
            if (contactItem) {
                const indicator = contactItem.querySelector('.online-indicator');
                if (indicator) {
                    indicator.className = `online-indicator ${isOnline ? 'online' : 'offline'}`;
                }
            }
        }

        /**
         * Update contacts list
         */
        async function updateContactsList() {
            try {
                const response = await fetch('/Admin/GetConversationsList');

                if (response.ok) {
                    const data = await response.json();

                    if (data.success) {
                        const previousSelection = currentSelectedUserId;
                        allConversations = data.conversations;

                        // Only refresh if no conversation is selected
                        if (!previousSelection || previousSelection <= 0) {
                            refreshContactsList();
                        } else {
                            updateContactsDisplay();
                        }
                    }
                }
            } catch (error) {
                console.error('❌ Error updating contacts list:', error);
            }
        }

        /**
         * Refresh contacts list HTML
         */
        function refreshContactsList() {
            const contactsList = document.getElementById('contactsList');

            if (!contactsList || !allConversations) return;

            const contactsHtml = allConversations.map(conversation => `
                <div class="contact-item ${conversation.userId === currentSelectedUserId ? 'active' : ''}"
                     data-user-id="${conversation.userId}"
                     data-user-name="${escapeHtml(conversation.fullName)}"
                     data-user-initials="${conversation.userInitials}"
                     data-is-online="${conversation.isOnline}">
                    <div class="contact-avatar">
                        ${conversation.userInitials}
                        <div class="online-indicator ${conversation.isOnline ? 'online' : 'offline'}"></div>
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">${escapeHtml(conversation.fullName)}</div>
                        <div class="contact-last-message">${escapeHtml(conversation.lastMessage || 'No messages yet')}</div>
                        ${conversation.lastSeenFormatted ? `<div class="last-seen">${conversation.lastSeenFormatted}</div>` : ''}
                    </div>
                    <div class="contact-meta">
                        <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                            ${conversation.lastMessageTime || ''}
                        </div>
                        ${conversation.unreadCount > 0 ? `<div class="unread-badge">${conversation.unreadCount}</div>` : ''}
                    </div>
                </div>
            `).join('');

            contactsList.innerHTML = contactsHtml;

            // Re-setup handlers
            setupConversationClickHandlers();
            addMobileTouchHandlers();
        }

        /**
         * Update contacts display without full refresh
         */
        function updateContactsDisplay() {
            const contactItems = document.querySelectorAll('#contactsList .contact-item');

            contactItems.forEach(item => {
                const userId = parseInt(item.dataset.userId);
                const conversation = allConversations.find(c => c.userId === userId);

                if (conversation) {
                    // Update last message
                    const lastMessageElement = item.querySelector('.contact-last-message');
                    if (lastMessageElement) {
                        lastMessageElement.textContent = conversation.lastMessage || 'No messages yet';
                    }

                    // Update unread count
                    const existingBadge = item.querySelector('.unread-badge');
                    const metaContainer = item.querySelector('.contact-meta');

                    if (conversation.unreadCount > 0) {
                        if (!existingBadge && metaContainer) {
                            const badge = document.createElement('div');
                            badge.className = 'unread-badge';
                            badge.textContent = conversation.unreadCount;
                            metaContainer.appendChild(badge);
                        } else if (existingBadge) {
                            existingBadge.textContent = conversation.unreadCount;
                        }
                    } else if (existingBadge) {
                        existingBadge.remove();
                    }

                    // Update time
                    const timeElement = metaContainer?.querySelector('div[style*="font-size: 0.7rem"]');
                    if (timeElement) {
                        timeElement.textContent = conversation.lastMessageTime || '';
                    }

                    // Update online status
                    const indicator = item.querySelector('.online-indicator');
                    if (indicator) {
                        indicator.className = `online-indicator ${conversation.isOnline ? 'online' : 'offline'}`;
                    }
                }
            });
        }

        // ========================================
        // WINDOW EVENT HANDLERS
        // ========================================

        /**
         * Setup window event handlers
         */
        function setupWindowEventHandlers() {
            // Handle window resize
            window.addEventListener('resize', debounce(() => {
                setupMobileNavigation();
                updateSidebarState();
            }, 150));

            // Handle browser navigation
            window.addEventListener('popstate', handlePopState);

            // Handle modal clicks
            window.addEventListener('click', handleModalClick);

            // Handle visibility change for polling
            document.addEventListener('visibilitychange', handleVisibilityChange);

            console.log('🪟 Window event handlers setup');
        }

        /**
         * Handle browser back/forward navigation
         */
        function handlePopState(event) {
            console.log('🔙 Popstate event:', event.state);

            if (event.state?.userId) {
                const userId = event.state.userId;

                currentSelectedUserId = userId;
                updateContactActiveState(userId);
                loadConversationMessages(userId);
            }
        }

        /**
         * Handle modal background clicks
         */
        function handleModalClick(event) {
            const modal = document.getElementById('newMessageModal');
            if (event.target === modal) {
                closeNewMessageModal();
            }
        }

        /**
         * Handle page visibility changes
         */
        function handleVisibilityChange() {
            if (document.hidden) {
                // Page is hidden, reduce polling frequency
                clearInterval(messagePollingInterval);
                clearInterval(onlineStatusInterval);
            } else {
                // Page is visible, resume normal polling
                if (currentSelectedUserId > 0) {
                    startMessagePolling();
                    startOnlineStatusPolling();
                }
            }
        }

        // ========================================
        // UTILITY FUNCTIONS
        // ========================================

        /**
         * Mark messages as read
         */
        function markMessagesAsRead() {
            if (currentSelectedUserId > 0) {
                fetch('/Admin/MarkMessagesAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ userId: currentSelectedUserId })
                }).catch(error => {
                    console.error('❌ Error marking messages as read:', error);
                });
            }
        }

        /**
         * Scroll to bottom of messages
         */
        function scrollToBottom() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                requestAnimationFrame(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                });
            }
        }

        /**
         * Toggle message search focus
         */
        function toggleMessageSearch() {
            const headerSearch = document.getElementById('headerSearchInput');
            if (headerSearch) {
                headerSearch.focus();
                headerSearch.select();
            }
        }

        /**
         * Toggle contacts sidebar
         */
        function toggleContactsSidebar() {
            const contactsSidebar = document.getElementById('contactsSidebar');
            const chatArea = document.getElementById('chatArea');
            const toggleBtn = document.getElementById('contactsToggle');

            if (!contactsSidebar || !chatArea) return;

            const isCollapsed = contactsSidebar.classList.contains('collapsed');

            if (isCollapsed) {
                contactsSidebar.classList.remove('collapsed');
                chatArea.classList.remove('expanded');
                if (toggleBtn) {
                    toggleBtn.classList.remove('active');
                    toggleBtn.title = 'Hide Contacts Sidebar';
                }
            } else {
                contactsSidebar.classList.add('collapsed');
                chatArea.classList.add('expanded');
                if (toggleBtn) {
                    toggleBtn.classList.add('active');
                    toggleBtn.title = 'Show Contacts Sidebar';
                }
            }
        }

        /**
         * Format time string
         */
        function formatTime(dateString) {
            try {
                return new Date(dateString).toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });
            } catch (error) {
                console.error('❌ Error formatting time:', error);
                return '';
            }
        }

        /**
         * Format last seen time
         */
        function formatLastSeen(dateString) {
            try {
                const date = new Date(dateString);
                const now = new Date();
                const diffMs = now - date;
                const diffMins = Math.floor(diffMs / 60000);

                if (diffMins < 1) return 'just now';
                if (diffMins < 60) return `${diffMins}m ago`;

                const diffHours = Math.floor(diffMins / 60);
                if (diffHours < 24) return `${diffHours}h ago`;

                return date.toLocaleDateString('en-US', {
                    month: 'short',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            } catch (error) {
                return 'Unknown';
            }
        }

        /**
         * Escape HTML characters
         */
        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        /**
         * Escape regex special characters
         */
        function escapeRegex(string) {
            return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }

        /**
         * Get anti-forgery token
         */
        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token?.value || '';
        }

        /**
         * Debounce function calls
         */
        function debounce(func, wait) {
            let timeout;
            return function executedFunction(...args) {
                const later = () => {
                    clearTimeout(timeout);
                    func.apply(this, args);
                };
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
            };
        }

        /**
         * Show loading spinner
         */
        function showLoadingSpinner() {
            const existingSpinner = document.querySelector('.global-loading-spinner');
            if (existingSpinner) return;

            const spinner = document.createElement('div');
            spinner.className = 'global-loading-spinner';
            spinner.style.cssText = `
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 10001;
                background: rgba(139, 92, 246, 0.9);
                color: white;
                padding: 1rem 2rem;
                border-radius: 8px;
                display: flex;
                align-items: center;
                gap: 1rem;
            `;
            spinner.innerHTML = '<div class="loading-spinner"></div><span>Loading...</span>';

            document.body.appendChild(spinner);
        }

        /**
         * Hide loading spinner
         */
        function hideLoadingSpinner() {
            const spinner = document.querySelector('.global-loading-spinner');
            if (spinner) {
                spinner.remove();
            }
        }

        /**
         * Show toast notification
         */
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: ${type === 'error' ? '#ef4444' : type === 'success' ? '#10b981' : '#3b82f6'};
                color: white;
                padding: 1rem 1.5rem;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
                z-index: 10000;
                max-width: 350px;
                font-weight: 500;
                transform: translateX(100%);
                transition: transform 0.3s ease;
                cursor: pointer;
            `;

            const icon = type === 'error' ? '❌' : type === 'success' ? '✅' : 'ℹ️';
            toast.innerHTML = `<span style="margin-right: 0.5rem;">${icon}</span>${message}`;

            document.body.appendChild(toast);

            // Animate in
            requestAnimationFrame(() => {
                toast.style.transform = 'translateX(0)';
            });

            // Click to dismiss
            toast.addEventListener('click', () => {
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            });

            // Auto dismiss
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.style.transform = 'translateX(100%)';
                    setTimeout(() => toast.remove(), 300);
                }
            }, 5000);

            console.log(`🍞 Toast (${type}): ${message}`);
        }

        /**
         * Show browser notification
         */
        function showNotification(title, body) {
            if ('Notification' in window && Notification.permission === 'granted') {
                new Notification(title, {
                    body: body,
                    icon: '/favicon.ico',
                    silent: false
                });
            }
        }

        // ========================================
        // GLOBAL FUNCTION EXPOSURE
        // ========================================

        // Make functions available globally for HTML onclick handlers
        window.selectConversation = selectConversation;
        window.openNewMessageModal = openNewMessageModal;
        window.closeNewMessageModal = closeNewMessageModal;
        window.showContactsList = showContactsList;
        window.showChatArea = showChatArea;
        window.goBackToContactsList = goBackToContactsList;
        window.sendMessage = sendMessage;
        window.loadConversationMessages = loadConversationMessages;
        window.toggleMessageSearch = toggleMessageSearch;
        window.toggleContactsSidebar = toggleContactsSidebar;

        // ========================================
        // DEBUG AND MAINTENANCE FUNCTIONS
        // ========================================

        /**
         * Debug conversation state
         */
        window.debugConversations = function() {
            console.log('🔍 === CONVERSATION DEBUG INFO ===');
            console.log('Current selected user ID:', currentSelectedUserId);
            console.log('Current user ID:', currentUserId);
            console.log('Is loading conversation:', isLoadingConversation);
            console.log('All conversations:', allConversations);
            console.log('Sidebar state:', sidebarState);

            const contactItems = document.querySelectorAll('.contact-item');
            console.log('Contact items found:', contactItems.length);

            contactItems.forEach((item, index) => {
                console.log(`Contact ${index + 1}:`, {
                    userId: item.dataset.userId,
                    userName: item.dataset.userName,
                    isActive: item.classList.contains('active'),
                    dataset: item.dataset
                });
            });

            console.log('Polling states:', {
                messagePolling: !!messagePollingInterval,
                onlineStatusPolling: !!onlineStatusInterval
            });
            console.log('🔍 === END DEBUG INFO ===');
        };

        /**
         * Clear all intervals and timeouts
         */
        window.clearAllIntervals = function() {
            console.log('🧹 Clearing all intervals and timeouts...');

            if (messagePollingInterval) {
                clearInterval(messagePollingInterval);
                messagePollingInterval = null;
            }

            if (onlineStatusInterval) {
                clearInterval(onlineStatusInterval);
                onlineStatusInterval = null;
            }

            if (typingTimeout) {
                clearTimeout(typingTimeout);
                typingTimeout = null;
            }

            isLoadingConversation = false;

            console.log('✅ All intervals cleared');
        };

        /**
         * Force refresh conversation
         */
        window.forceRefreshConversation = function(userId = currentSelectedUserId) {
            console.log('🔄 Force refreshing conversation:', userId);

            if (!userId) {
                console.log('❌ No user ID provided');
                return;
            }

            clearInterval(messagePollingInterval);
            clearInterval(onlineStatusInterval);
            isLoadingConversation = false;

            selectConversation(userId, 'Force Refresh');
        };

        /**
         * Test all conversations (for debugging)
         */
        window.testAllConversations = function() {
            console.log('🧪 Testing all conversations...');

            const contactItems = document.querySelectorAll('.contact-item');
            contactItems.forEach((item, index) => {
                setTimeout(() => {
                    const userId = item.dataset.userId;
                    const userName = item.dataset.userName;
                    console.log(`Testing conversation ${index + 1}: ${userName} (${userId})`);

                    // Simulate click
                    item.dispatchEvent(new Event('click', { bubbles: true }));
                }, index * 2000);
            });
        };

        // ========================================
        // INITIALIZATION COMPLETE
        // ========================================

        console.log('🎉 Messages script loaded successfully');
        console.log('📊 Initial state:', {
            currentUserId,
            selectedUserId: currentSelectedUserId,
            conversationsCount: allConversations?.length || 0,
            isMobile: window.innerWidth <= 768
        });

    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>