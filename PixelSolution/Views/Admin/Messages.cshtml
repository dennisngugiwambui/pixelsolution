@model PixelSolution.ViewModels.MessagesPageViewModel
@{
    ViewData["Title"] = "Messages - PixelSolution";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        :root {
            --primary: #8b5cf6;
            --primary-dark: #7c3aed;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --gray-50: #f9fafb;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
        }

        /* Sidebar */
        .sidebar {
            position: fixed;
            left: 0;
            top: 0;
            width: 280px;
            height: 100vh;
            background: var(--gray-900);
            color: white;
            overflow-y: auto;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

            .sidebar-overlay.show {
                opacity: 1;
                visibility: visible;
            }

        .main-content {
            margin-left: 280px;
            width: calc(100% - 280px);
            transition: all 0.3s ease;
            min-height: 100vh;
        }

        /* Sidebar States */
        .sidebar.collapsed {
            width: 80px;
        }

            .sidebar.collapsed + .main-content {
                margin-left: 80px;
                width: calc(100% - 80px);
            }

        .sidebar.hidden {
            transform: translateX(-100%);
        }

            .sidebar.hidden + .main-content {
                margin-left: 0;
                width: 100%;
            }

        /* Mobile */
            @@media (max-width: 1024px) {
            .sidebar

        {
            transform: translateX(-100%);
            z-index: 1050;
        }

        .sidebar.open {
            transform: translateX(0);
        }

        .main-content {
            margin-left: 0 !important;
            width: 100% !important;
        }

        }

        /* Sidebar Content */
        .sidebar-header {
            padding: 2rem 1.5rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .logo-container {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
        }

        .logo-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1.2rem;
        }

        .logo-text {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, var(--primary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-right: 1rem;
        }

        .user-details h4 {
            font-size: 1rem;
            font-weight: 600;
            margin: 0 0 0.25rem 0;
        }

        .user-details p {
            font-size: 0.875rem;
            color: rgba(255, 255, 255, 0.7);
            margin: 0;
        }

        /* Navigation */
        .nav-menu {
            padding: 1rem 0;
        }

        .nav-section {
            margin-bottom: 2rem;
        }

        .nav-section-title {
            padding: 0 1.5rem;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: rgba(255, 255, 255, 0.5);
            margin-bottom: 0.5rem;
        }

        .nav-item {
            margin-bottom: 0.25rem;
        }

        .nav-link {
            display: flex;
            align-items: center;
            padding: 0.75rem 1.5rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            transition: all 0.3s ease;
            position: relative;
        }

            .nav-link:hover {
                background: rgba(255, 255, 255, 0.05);
                color: white;
            }

            .nav-link.active {
                background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                color: white;
            }

            .nav-link i {
                width: 20px;
                margin-right: 0.75rem;
                text-align: center;
            }

        .nav-badge {
            background: var(--danger);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
            margin-left: auto;
        }

        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid var(--gray-200);
            padding: 1rem 1.5rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .sidebar-toggle {
            background: none;
            border: none;
            font-size: 1.25rem;
            color: var(--gray-600);
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

            .sidebar-toggle:hover {
                background: var(--gray-100);
                color: var(--gray-700);
            }

        .page-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--gray-900);
            margin: 0;
        }

        .header-right {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .search-container {
            position: relative;
        }

        .search-input {
            padding: 0.5rem 0.75rem 0.5rem 2.5rem;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
            font-size: 0.875rem;
            width: 300px;
            transition: all 0.3s ease;
        }

            .search-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .search-icon {
            position: absolute;
            left: 0.75rem;
            top: 50%;
            transform: translateY(-50%);
            color: var(--gray-600);
        }

        .header-actions {
            display: flex;
            gap: 0.5rem;
        }

        .action-btn {
            padding: 0.5rem;
            border: none;
            border-radius: 8px;
            background: var(--gray-50);
            color: var(--gray-600);
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .action-btn:hover {
                background: var(--gray-200);
                color: var(--gray-700);
            }

        .notification-badge {
            position: absolute;
            top: -4px;
            right: -4px;
            background: var(--danger);
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
        }

        /* Dashboard Content */
        .dashboard-content {
            padding: 1.5rem;
        }

        .messages-container {
            height: calc(100vh - 140px);
            display: flex;
            background: var(--gray-50);
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        /* Contacts Sidebar */
        .contacts-sidebar {
            width: 380px;
            background: white;
            border-right: 1px solid var(--gray-200);
            display: flex;
            flex-direction: column;
        }

        .contacts-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .contacts-search {
            padding: 1rem;
            background: var(--gray-50);
            border-bottom: 1px solid var(--gray-200);
        }

        .search-box {
            position: relative;
            width: 100%;
        }

        .contacts-list {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
        }

        .contact-item {
            display: flex;
            align-items: center;
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-radius: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
        }

            .contact-item:hover {
                background: var(--gray-100);
            }

            .contact-item.active {
                background: linear-gradient(135deg, var(--primary), var(--primary-dark));
                color: white;
            }

        .contact-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, var(--primary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            font-size: 1.1rem;
            margin-right: 1rem;
            position: relative;
        }

        .online-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            border: 2px solid white;
            background: var(--success);
        }

        .contact-info {
            flex: 1;
            min-width: 0;
        }

        .contact-name {
            font-weight: 600;
            font-size: 0.95rem;
            margin-bottom: 0.25rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .contact-last-message {
            font-size: 0.8rem;
            opacity: 0.7;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .contact-meta {
            text-align: right;
            font-size: 0.75rem;
            opacity: 0.7;
        }

        .unread-badge {
            background: var(--danger);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
            font-weight: 600;
            margin-top: 0.25rem;
        }

        /* Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .chat-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .chat-user-info {
            display: flex;
            align-items: center;
        }

        .chat-avatar {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: linear-gradient(135deg, #6366f1, var(--primary));
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: 600;
            margin-right: 1rem;
            position: relative;
        }

        .chat-user-details h4 {
            font-weight: 600;
            margin: 0;
            color: var(--gray-800);
        }

        .chat-user-status {
            font-size: 0.8rem;
            color: var(--gray-600);
            margin-top: 0.25rem;
        }

        .status-online {
            color: var(--success);
        }

        .chat-actions {
            display: flex;
            gap: 0.5rem;
        }

        .messages-container-inner {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            background: var(--gray-50);
            scroll-behavior: smooth;
        }

        .message-bubble {
            max-width: 70%;
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            animation: slideIn 0.3s ease-out;
        }

            @@keyframes slideIn {
            from

        {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }

        }

        .message-bubble.sent {
            margin-left: auto;
            align-items: flex-end;
        }

        .message-bubble.received {
            margin-right: auto;
            align-items: flex-start;
        }

        .message-content {
            padding: 1rem 1.25rem;
            border-radius: 20px;
            word-wrap: break-word;
            line-height: 1.5;
        }

        .message-bubble.sent .message-content {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border-bottom-right-radius: 6px;
        }

        .message-bubble.received .message-content {
            background: white;
            color: var(--gray-800);
            border: 1px solid var(--gray-200);
            border-bottom-left-radius: 6px;
        }

        .message-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 0.5rem;
            font-size: 0.75rem;
            opacity: 0.7;
        }

        .message-time {
            color: var(--gray-600);
        }

        .message-status {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            color: var(--gray-600);
        }

        .message-bubble.sent .message-status {
            color: rgba(255, 255, 255, 0.8);
        }

        /* Enhanced Message Status Icons */
        .message-status i {
            font-size: 0.875rem;
            transition: all 0.3s ease;
            opacity: 1;
        }

        /* Single tick for sent/delivered messages */
        .message-status .fa-check {
            color: rgba(255, 255, 255, 0.9) !important;
            font-weight: 600;
        }

        /* Double tick for read messages */
        .message-status .fa-check-double {
            color: #10b981 !important;
            font-weight: 600;
        }

        /* Ensure visibility on sent messages */
        .message-bubble.sent .message-status .fa-check {
            color: rgba(255, 255, 255, 0.95) !important;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        .message-bubble.sent .message-status .fa-check-double {
            color: #10b981 !important;
            text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
        }

        /* Status for received messages (if needed) */
        .message-bubble.received .message-status .fa-check,
        .message-bubble.received .message-status .fa-check-double {
            color: var(--gray-600);
        }

        /* Message status animation */
        .message-status-updating {
            animation: statusPulse 1s ease-in-out;
        }

        @@keyframes statusPulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .message-input-area {
            padding: 1.5rem;
            background: white;
            border-top: 1px solid var(--gray-200);
        }

        .message-form {
            display: flex;
            gap: 1rem;
            align-items: flex-end;
        }

        .message-input-container {
            flex: 1;
        }

        .message-input {
            width: 100%;
            min-height: 50px;
            max-height: 120px;
            padding: 0.75rem 1rem;
            border: 1px solid var(--gray-300);
            border-radius: 25px;
            resize: none;
            font-size: 0.875rem;
            line-height: 1.5;
            overflow-y: auto;
        }

            .message-input:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .send-btn {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .send-btn:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
            }

            .send-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none;
            }

        /* Empty State */
        .empty-state {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            height: 100%;
            color: var(--gray-600);
            text-align: center;
        }

        .empty-state-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            opacity: 0.3;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 0;
            border: none;
            border-radius: 16px;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 1.5rem 2rem;
            border-radius: 16px 16px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-body {
            padding: 2rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: var(--gray-700);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
            font-size: 0.875rem;
        }

            .form-control:focus {
                outline: none;
                border-color: var(--primary);
                box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
            }

        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
        }

            .btn-primary:hover:not(:disabled) {
                transform: translateY(-1px);
            }

        .btn-secondary {
            background: var(--gray-600);
            color: white;
        }

        .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }

        /* Select2 Custom Styling */
        .select2-container--default .select2-selection--single {
            height: 42px;
            border: 1px solid var(--gray-300);
            border-radius: 8px;
        }

            .select2-container--default .select2-selection--single .select2-selection__rendered {
                line-height: 40px;
            }

        .select2-dropdown {
            border: 1px solid var(--gray-300);
            border-radius: 8px;
        }

        .select2-container--default .select2-results__option--highlighted[aria-selected] {
            background-color: var(--primary);
        }

        /* Loading Spinner */
        .loading-spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid rgba(255,255,255,.3);
            border-radius: 50%;
            border-top-color: #fff;
            animation: spin 1s ease-in-out infinite;
        }

            @@keyframes spin {
            to

        {
            transform: rotate(360deg);
        }

        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            z-index: 10000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
            color: white;
            font-weight: 500;
        }

            .toast.show {
                transform: translateX(0);
            }

            .toast.success {
                background: var(--success);
            }

            .toast.error {
                background: var(--danger);
            }

            .toast.info {
                background: #3b82f6;
            }

        /* Mobile Responsiveness */
            @@media (max-width: 768px) {
            .search-input

        {
            width: 200px;
        }

        .messages-container {
            height: calc(100vh - 100px);
            flex-direction: column;
            position: relative;
        }

        .contacts-sidebar {
            width: 100%;
            height: 100%;
            position: absolute;
            z-index: 10;
        }

            .contacts-sidebar.hidden {
                transform: translateX(-100%);
            }

        .chat-area {
            width: 100%;
            height: 100%;
            position: absolute;
            z-index: 5;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

            .chat-area.active {
                transform: translateX(0);
            }

        .mobile-back-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: 500;
        }

        .message-bubble {
            max-width: 85%;
        }

        .compose-btn {
            position: fixed;
            bottom: 1rem;
            right: 1rem;
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            border: none;
            border-radius: 50%;
            width: 56px;
            height: 56px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 8px 25px rgba(139, 92, 246, 0.4);
            z-index: 1000;
            font-size: 1.2rem;
        }

        }

            @@media (min-width: 769px) {
            .mobile-back-btn

        {
            display: none !important;
        }

        .chat-area {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .contacts-sidebar {
            transform: translateX(0) !important;
            position: relative !important;
        }

        .compose-btn {
            display: none !important;
        }

        }</style>
}

<!-- Sidebar Overlay -->
<div class="sidebar-overlay" id="sidebarOverlay"></div>

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link active">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Messages</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search messages..." id="headerSearchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" id="notificationBtn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    @if (Model.UnreadCount > 0)
                    {
                        <span class="notification-badge" id="notificationBadge">@Model.UnreadCount</span>
                    }
                </button>
                <button class="action-btn" onclick="openNewMessageModal()" title="New Message">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Messages Container -->
    <div class="dashboard-content">
        <div class="messages-container">
            <!-- Contacts Sidebar -->
            <div class="contacts-sidebar" id="contactsSidebar">
                <div class="contacts-header">
                    <h2 style="margin: 0; font-size: 1.25rem; font-weight: 600;">
                        <i class="fas fa-comments" style="margin-right: 0.5rem;"></i>
                        Conversations
                    </h2>
                    <button class="action-btn" onclick="openNewMessageModal()" title="New Message" style="background: rgba(255,255,255,0.2); color: white;">
                        <i class="fas fa-plus"></i>
                    </button>
                </div>

                <div class="contacts-search">
                    <div class="search-box">
                        <input type="text" class="search-input" placeholder="Search conversations..." id="contactsSearchInput">
                        <i class="fas fa-search search-icon"></i>
                    </div>
                </div>

                <div class="contacts-list" id="contactsList">
                    @if (Model?.Conversations != null && Model.Conversations.Any())
                    {
                        @foreach (var conversation in Model.Conversations)
                        {
                            <div class="contact-item"
                                 data-user-id="@conversation.UserId"
                                 data-user-name="@conversation.FullName">
                                <div class="contact-avatar">
                                    @conversation.UserInitials
                                    @if (conversation.IsOnline)
                                    {
                                        <div class="online-indicator"></div>
                                    }
                                </div>
                                <div class="contact-info">
                                    <div class="contact-name">@conversation.FullName</div>
                                    <div class="contact-last-message">@(string.IsNullOrEmpty(conversation.LastMessage) ? "No messages yet" : conversation.LastMessage)</div>
                                </div>
                                <div class="contact-meta">
                                    <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                                        @conversation.LastMessageTime
                                    </div>
                                    @if (conversation.UnreadCount > 0)
                                    {
                                        <div class="unread-badge">@conversation.UnreadCount</div>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div style="text-align: center; padding: 2rem; color: #64748b;">
                            <i class="fas fa-inbox" style="font-size: 2rem; margin-bottom: 1rem; opacity: 0.3;"></i>
                            <p>No conversations yet</p>
                            <button class="btn btn-primary" onclick="openNewMessageModal()">
                                <i class="fas fa-plus"></i>
                                Start Conversation
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Chat Area -->
            <div class="chat-area" id="chatArea">
                <!-- Empty State - Always show by default -->
                <div class="empty-state">
                    <i class="fas fa-comments empty-state-icon"></i>
                    <h3>Select a conversation</h3>
                    <p>Choose a contact from the sidebar to start messaging</p>
                    <button class="btn btn-primary" onclick="openNewMessageModal()" style="margin-top: 1rem;">
                        <i class="fas fa-plus"></i>
                        Start New Conversation
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Floating Compose Button (Mobile) -->
<button class="compose-btn" onclick="openNewMessageModal()" style="display: none;">
    <i class="fas fa-plus"></i>
</button>

<!-- New Message Modal -->
<div id="newMessageModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 style="margin: 0; font-weight: 600;">
                <i class="fas fa-plus-circle" style="margin-right: 0.5rem;"></i>
                New Message
            </h3>
            <button style="background: none; border: none; color: white; font-size: 1.5rem; cursor: pointer;" onclick="closeNewMessageModal()">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="modal-body">
            <form id="newMessageForm">
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label class="form-label" for="recipientSelect">Send To *</label>
                    <select id="recipientSelect" name="ToUserId" class="form-control" required>
                        <option value="">Select recipient...</option>
                        @if (Model.AllUsers != null && Model.AllUsers.Any())
                        {
                            @foreach (var user in Model.AllUsers)
                            {
                                <option value="@user.UserId" data-email="@user.Email" data-initials="@user.UserInitials">
                                    @user.FullName (@user.UserType) - @user.Email
                                </option>
                            }
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageSubject">Subject *</label>
                    <input type="text" id="messageSubject" name="Subject" class="form-control" required placeholder="Enter message subject...">
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageType">Message Type</label>
                    <select id="messageType" name="MessageType" class="form-control">
                        <option value="General">General</option>
                        <option value="Reminder">Reminder</option>
                        <option value="Promotion">Promotion</option>
                    </select>
                </div>

                <div class="form-group">
                    <label class="form-label" for="messageContent">Message *</label>
                    <textarea id="messageContent" name="Content" class="form-control" rows="6" required placeholder="Type your message here..."></textarea>
                </div>

                <div style="display: flex; gap: 1rem; justify-content: flex-end; margin-top: 2rem;">
                    <button type="button" class="btn btn-secondary" onclick="closeNewMessageModal()">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="sendModalBtn">
                        <i class="fas fa-paper-plane"></i>
                        Send Message
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        // Global variables
        let currentSelectedUserId = 0; // Always start with no selection
        let currentUserId = @Model.CurrentUserId;
        let messagePollingInterval;
        let lastMessageCheck = new Date();
        let isLoadingConversation = false;

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            initializePage();
        });

        function initializePage() {
            console.log('Initializing Messages Page...');

            setupSidebarToggle();
            setupMessageInput();
            setupContactSearch();
            setupContactSelection();
            setupMobileView();

            // Don't auto-start polling - wait for user selection

            // Update unread count periodically
            setInterval(updateUnreadCount, 30000);

            console.log('Messages Page Initialized Successfully');
        }

        // Fixed Sidebar Toggle
        function setupSidebarToggle() {
            const sidebarToggle = document.getElementById('sidebarToggle');
            const sidebar = document.getElementById('sidebar');
            const sidebarOverlay = document.getElementById('sidebarOverlay');
            const mainContent = document.getElementById('mainContent');

            if (!sidebarToggle || !sidebar) return;

            // Initialize mobile sidebar as hidden
            if (window.innerWidth <= 1024) {
                sidebar.classList.remove('open');
                if (sidebarOverlay) sidebarOverlay.classList.remove('show');
                document.body.style.overflow = 'auto';
            }

            sidebarToggle.addEventListener('click', function() {
                const isMobile = window.innerWidth <= 1024;

                if (isMobile) {
                    // Mobile: Simple toggle
                    if (sidebar.classList.contains('open')) {
                        sidebar.classList.remove('open');
                        if (sidebarOverlay) sidebarOverlay.classList.remove('show');
                        document.body.style.overflow = 'auto';
                    } else {
                        sidebar.classList.add('open');
                        if (sidebarOverlay) sidebarOverlay.classList.add('show');
                        document.body.style.overflow = 'hidden';
                    }
                } else {
                    // Desktop: Show/Hide toggle
                    if (sidebar.classList.contains('hidden')) {
                        // Hidden -> Show
                        sidebar.classList.remove('hidden');
                    } else {
                        // Show -> Hide
                        sidebar.classList.add('hidden');
                    }
                }
            });

            // Close sidebar on overlay click
            if (sidebarOverlay) {
                sidebarOverlay.addEventListener('click', function() {
                    sidebar.classList.remove('open');
                    sidebarOverlay.classList.remove('show');
                    document.body.style.overflow = 'auto';
                });
            }

            // Handle window resize
            window.addEventListener('resize', function() {
                if (window.innerWidth <= 1024) {
                    // Mobile: Ensure sidebar is hidden by default
                    sidebar.classList.remove('hidden');
                    if (!sidebar.classList.contains('open')) {
                        if (sidebarOverlay) sidebarOverlay.classList.remove('show');
                        document.body.style.overflow = 'auto';
                    }
                } else {
                    // Desktop: Remove mobile classes
                    sidebar.classList.remove('open');
                    if (sidebarOverlay) sidebarOverlay.classList.remove('show');
                    document.body.style.overflow = 'auto';
                }
            });
        }

        // Message Input Setup
        function setupMessageInput() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !sendBtn) return;

            messageInput.addEventListener('input', function() {
                const hasContent = this.value.trim().length > 0;
                sendBtn.disabled = !hasContent;
                autoResizeTextarea(this);
            });

            messageInput.addEventListener('keydown', function(event) {
                if (event.key === 'Enter' && !event.shiftKey) {
                    event.preventDefault();
                    if (!sendBtn.disabled) {
                        sendMessage();
                    }
                }
            });
        }

        // Auto resize textarea
        function autoResizeTextarea(textarea) {
            textarea.style.height = 'auto';
            textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
        }

        // Contact Search
        function setupContactSearch() {
            const contactsSearchInput = document.getElementById('contactsSearchInput');
            if (contactsSearchInput) {
                contactsSearchInput.addEventListener('input', filterContacts);
            }
        }

        function filterContacts() {
            const searchTerm = document.getElementById('contactsSearchInput').value.toLowerCase();
            const contactItems = document.querySelectorAll('.contact-item');

            contactItems.forEach(item => {
                const name = item.querySelector('.contact-name')?.textContent.toLowerCase() || '';
                const lastMessage = item.querySelector('.contact-last-message')?.textContent.toLowerCase() || '';

                if (name.includes(searchTerm) || lastMessage.includes(searchTerm)) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        }

        // Contact Selection
        function setupContactSelection() {
            const contactsList = document.getElementById('contactsList');
            if (contactsList) {
                contactsList.addEventListener('click', function(e) {
                    const contactItem = e.target.closest('.contact-item');
                    if (contactItem && !contactItem.classList.contains('loading')) {
                        const userId = parseInt(contactItem.dataset.userId);
                        const userName = contactItem.dataset.userName;

                        if (userId && userId !== currentSelectedUserId) {
                            selectConversation(userId, userName);
                        }
                    }
                });
            }
        }

        // Select Conversation
        function selectConversation(userId, userName) {
            if (isLoadingConversation) return;

            console.log('Selecting conversation:', userId, userName);

            // Update active state
            document.querySelectorAll('.contact-item').forEach(item => {
                item.classList.remove('active');
            });

            const selectedContact = document.querySelector(`[data-user-id="${userId}"]`);
            if (selectedContact) {
                selectedContact.classList.add('active');
            }

            currentSelectedUserId = userId;

            // Mobile view handling
            if (window.innerWidth <= 768) {
                showChatArea();
            }

            loadConversationMessages(userId);
            startMessagePolling();
        }

        // Load Conversation Messages
        async function loadConversationMessages(userId) {
            if (isLoadingConversation || !userId) return;

            isLoadingConversation = true;
            console.log('Loading conversation messages for:', userId);

            try {
                const response = await fetch(`/Employee/GetConversationMessages?userId=${userId}`);
                const data = await response.json();

                if (data.success && data.conversation && data.messages) {
                    updateChatArea(data.conversation, data.messages);
                    // Auto-scroll to latest message with smooth animation
                    setTimeout(() => {
                        scrollToLatestMessage();
                    }, 100);
                    markMessagesAsRead(userId);
                } else {
                    showToast('Error loading conversation', 'error');
                }
            } catch (error) {
                console.error('Error loading conversation:', error);
                showToast('Error loading conversation', 'error');
            } finally {
                isLoadingConversation = false;
            }
        }

        // Update Chat Area
        function updateChatArea(conversation, messages) {
            const chatArea = document.getElementById('chatArea');

            if (!conversation) {
                chatArea.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-comments empty-state-icon"></i>
                        <h3>Select a conversation</h3>
                        <p>Choose a contact from the sidebar to start messaging</p>
                    </div>
                `;
                return;
            }

            const messagesHtml = messages.map(message => {
                const subjectHtml = message.subject ?
                    `<div style="font-weight: 600; margin-bottom: 0.5rem; font-size: 0.9rem; opacity: 0.8;">${escapeHtml(message.subject)}</div>` : '';

                const statusHtml = message.isFromCurrentUser ?
                    `<span class="message-status" data-message-id="${message.messageId}">
                        ${message.isRead ?
                            '<i class="fas fa-check-double" title="Read"></i>' :
                            '<i class="fas fa-check" title="Delivered"></i>'}
                    </span>` : '';

                return `
                    <div class="message-bubble ${message.isFromCurrentUser ? 'sent' : 'received'}" data-message-id="${message.messageId}">
                        ${subjectHtml}
                        <div class="message-content">${escapeHtml(message.content)}</div>
                        <div class="message-meta">
                            <span class="message-time">${formatTime(message.sentDate)}</span>
                            ${statusHtml}
                        </div>
                    </div>
                `;
            }).join('');

            chatArea.innerHTML = `
                <div class="chat-header">
                    <div class="chat-user-info">
                        <button class="mobile-back-btn" onclick="showContactsList()" style="display: none;">
                            <i class="fas fa-arrow-left"></i>
                            Back
                        </button>
                        <div class="chat-avatar">
                            ${conversation.userInitials}
                            ${conversation.isOnline ? '<div class="online-indicator"></div>' : ''}
                        </div>
                        <div class="chat-user-details">
                            <h4>${escapeHtml(conversation.fullName)}</h4>
                            <div class="chat-user-status ${conversation.isOnline ? 'status-online' : ''}">
                                ${conversation.isOnline ?
                                    '<i class="fas fa-circle" style="font-size: 0.5rem; margin-right: 0.25rem;"></i><span>Online</span>' :
                                    `<span>Last seen ${conversation.lastSeenFormatted || 'Unknown'}</span>`}
                            </div>
                        </div>
                    </div>
                    <div class="chat-actions">
                        <button class="action-btn" title="Search Messages">
                            <i class="fas fa-search"></i>
                        </button>
                        <button class="action-btn" title="More Options">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                    </div>
                </div>

                <div class="messages-container-inner" id="messagesContainer">
                    ${messagesHtml}
                </div>

                <div class="message-input-area">
                    <div class="message-form">
                        <div class="message-input-container">
                            <textarea id="messageInput" class="message-input" placeholder="Type your message..." rows="1"></textarea>
                        </div>
                        <button class="send-btn" id="sendBtn" onclick="sendMessage()" disabled>
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </div>
            `;

            // Re-initialize message input
            setupMessageInput();
            setupMobileView();
        }

        // Send Message
        async function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const sendBtn = document.getElementById('sendBtn');

            if (!messageInput || !currentSelectedUserId || messageInput.value.trim() === '') {
                return;
            }

            const messageContent = messageInput.value.trim();

            try {
                sendBtn.disabled = true;
                sendBtn.innerHTML = '<div class="loading-spinner"></div>';

                const response = await fetch('/Employee/SendQuickMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({
                        ToUserId: currentSelectedUserId,
                        Content: messageContent,
                        Subject: 'Quick Message',
                        MessageType: 'General'
                    })
                });

                const result = await response.json();

                if (result.success) {
                    messageInput.value = '';
                    autoResizeTextarea(messageInput);

                    // Add message to UI immediately
                    addMessageToUI({
                        messageId: result.messageId || Date.now(),
                        content: messageContent,
                        sentDate: new Date().toISOString(),
                        isFromCurrentUser: true,
                        isRead: false
                    });

                    scrollToLatestMessage();
                    showToast('Message sent!', 'success');
                } else {
                    showToast(result.message || 'Error sending message', 'error');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showToast('Error sending message', 'error');
            } finally {
                sendBtn.disabled = false;
                sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
            }
        }

        // Add Message to UI
        function addMessageToUI(message) {
            const messagesContainer = document.getElementById('messagesContainer');
            if (!messagesContainer) return;

            const subjectHtml = message.subject ?
                `<div style="font-weight: 600; margin-bottom: 0.5rem; font-size: 0.9rem; opacity: 0.8;">${escapeHtml(message.subject)}</div>` : '';

            const statusHtml = message.isFromCurrentUser ?
                `<span class="message-status" data-message-id="${message.messageId}">
                    ${message.isRead ?
                        '<i class="fas fa-check-double" title="Read"></i>' :
                        '<i class="fas fa-check" title="Delivered"></i>'}
                </span>` : '';

            const messageHtml = `
                <div class="message-bubble ${message.isFromCurrentUser ? 'sent' : 'received'}" data-message-id="${message.messageId}">
                    ${subjectHtml}
                    <div class="message-content">${escapeHtml(message.content)}</div>
                    <div class="message-meta">
                        <span class="message-time">${formatTime(message.sentDate)}</span>
                        ${statusHtml}
                    </div>
                </div>
            `;

            messagesContainer.insertAdjacentHTML('beforeend', messageHtml);
        }

        // New Message Modal
        function openNewMessageModal() {
            const modal = document.getElementById('newMessageModal');
            modal.style.display = 'block';

            // Reset form
            document.getElementById('newMessageForm').reset();

            // Initialize Select2
            setTimeout(initializeSelect2, 100);
        }

        function closeNewMessageModal() {
            const modal = document.getElementById('newMessageModal');
            modal.style.display = 'none';
        }

        // Fixed Select2 Initialization with Proper User Loading
        function initializeSelect2() {
            const recipientSelect = document.getElementById('recipientSelect');
            if (!recipientSelect) {
                console.error('Recipient select element not found');
                return;
            }

            // Check if there are options available
            const optionCount = recipientSelect.options.length - 1; // Subtract 1 for placeholder
            console.log('Available users for messaging:', optionCount);

            if (optionCount === 0) {
                console.warn('No users available for messaging');
                recipientSelect.innerHTML = '<option value="">No users available</option>';
                return;
            }

            // Destroy existing Select2 if it exists
            if (recipientSelect.select2) {
                $(recipientSelect).select2('destroy');
            }

            try {
                $(recipientSelect).select2({
                    placeholder: 'Search and select recipient...',
                    allowClear: true,
                    width: '100%',
                    templateResult: formatUserOption,
                    templateSelection: formatUserSelection,
                    matcher: customUserMatcher,
                    dropdownParent: $('#newMessageModal'),
                    minimumInputLength: 0,
                    language: {
                        noResults: function() {
                            return "No users found";
                        },
                        searching: function() {
                            return "Searching users...";
                        },
                        inputTooShort: function() {
                            return "Start typing to search users...";
                        }
                    },
                    escapeMarkup: function(markup) {
                        return markup; // Allow HTML in results
                    }
                });

                console.log('Select2 initialized successfully with', optionCount, 'users');
            } catch (error) {
                console.error('Error initializing Select2:', error);
            }
        }

        // Enhanced User Option Formatter
        function formatUserOption(user) {
            if (!user.id || user.id === '') {
                return user.text;
            }

            const userElement = user.element;
            if (!userElement) {
                return user.text;
            }

            const initials = userElement.dataset.initials || user.text.substring(0, 2).toUpperCase();
            const email = userElement.dataset.email || '';
            const userType = userElement.dataset.usertype || '';
            const fullName = user.text.split(' (')[0];

            return $(`
                <div class="user-option">
                    <div class="user-option-avatar">${initials}</div>
                    <div class="user-option-info">
                        <div class="user-option-name">${fullName}</div>
                        <div class="user-option-details">${userType} • ${email}</div>
                    </div>
                </div>
            `);
        }

        // Enhanced User Selection Formatter
        function formatUserSelection(user) {
            if (!user.id) return user.text;
            return user.text.split(' (')[0]; // Show only the name
        }

        // Enhanced Custom Matcher
        function customUserMatcher(params, data) {
            // If there are no search terms, return all data
            if ($.trim(params.term) === '') {
                return data;
            }

            // Skip the placeholder option
            if (!data.id || data.id === '') {
                return null;
            }

            const searchTerm = params.term.toLowerCase();
            const optionElement = data.element;

            if (!optionElement) {
                return null;
            }

            const name = data.text.toLowerCase();
            const email = (optionElement.dataset.email || '').toLowerCase();
            const userType = (optionElement.dataset.usertype || '').toLowerCase();

            // Search in name, email, and user type
            if (name.includes(searchTerm) ||
                email.includes(searchTerm) ||
                userType.includes(searchTerm)) {
                return data;
            }

            return null;
        }

        // Handle new message form submission
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('newMessageForm');
            if (form) {
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();

                    const formData = new FormData(this);
                    const sendBtn = document.getElementById('sendModalBtn');

                    const messageData = {
                        ToUserId: parseInt(formData.get('ToUserId')),
                        Subject: formData.get('Subject'),
                        Content: formData.get('Content'),
                        MessageType: formData.get('MessageType')
                    };

                    if (!messageData.ToUserId || !messageData.Subject || !messageData.Content) {
                        showToast('Please fill in all required fields', 'error');
                        return;
                    }

                    try {
                        sendBtn.disabled = true;
                        sendBtn.innerHTML = '<div class="loading-spinner"></div> Sending...';

                        const response = await fetch('/Employee/SendQuickMessage', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': getAntiForgeryToken()
                            },
                            body: JSON.stringify(messageData)
                        });

                        const result = await response.json();

                        if (result.success) {
                            showToast('Message sent successfully!', 'success');
                            closeNewMessageModal();

                            // If sent to current conversation, add to UI
                            if (messageData.ToUserId === currentSelectedUserId) {
                                addMessageToUI({
                                    messageId: result.messageId || Date.now(),
                                    content: messageData.Content,
                                    subject: messageData.Subject,
                                    sentDate: new Date().toISOString(),
                                    isFromCurrentUser: true,
                                    isRead: false
                                });
                                scrollToLatestMessage();
                            }

                            refreshConversationsList();
                        } else {
                            showToast(result.message || 'Error sending message', 'error');
                        }
                    } catch (error) {
                        console.error('Error sending message:', error);
                        showToast('Error sending message', 'error');
                    } finally {
                        sendBtn.disabled = false;
                        sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Send Message';
                    }
                });
            }
        });

        // Mobile View Setup
        function setupMobileView() {
            const isMobile = window.innerWidth <= 768;
            const backButtons = document.querySelectorAll('.mobile-back-btn');
            const composeBtn = document.querySelector('.compose-btn');

            backButtons.forEach(btn => {
                btn.style.display = isMobile ? 'flex' : 'none';
            });

            if (composeBtn) {
                composeBtn.style.display = isMobile ? 'flex' : 'none';
            }
        }

        function showChatArea() {
            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.add('hidden');
                if (chatArea) chatArea.classList.add('active');
            }
        }

        function showContactsList() {
            if (window.innerWidth <= 768) {
                const chatArea = document.getElementById('chatArea');
                const contactsSidebar = document.getElementById('contactsSidebar');

                if (contactsSidebar) contactsSidebar.classList.remove('hidden');
                if (chatArea) chatArea.classList.remove('active');
            }
        }

        // Message Polling for Real-time Updates
        function startMessagePolling() {
            if (messagePollingInterval) {
                clearInterval(messagePollingInterval);
            }

            messagePollingInterval = setInterval(async () => {
                if (currentSelectedUserId > 0 && !isLoadingConversation) {
                    try {
                        const response = await fetch(`/Employee/CheckNewMessages?userId=${currentSelectedUserId}&lastCheck=${lastMessageCheck.toISOString()}`);
                        if (response.ok) {
                            const data = await response.json();
                            if (data.success && data.newMessages && data.newMessages.length > 0) {
                                data.newMessages.forEach(message => {
                                    if ((message.fromUserId === currentSelectedUserId && message.toUserId === currentUserId) ||
                                        (message.fromUserId === currentUserId && message.toUserId === currentSelectedUserId)) {
                                        addMessageToUI({
                                            messageId: message.messageId,
                                            content: message.content,
                                            subject: message.subject,
                                            sentDate: message.sentDate,
                                            isFromCurrentUser: message.fromUserId === currentUserId,
                                            isRead: message.isRead
                                        });
                                        scrollToLatestMessage();

                                        // Show notification for received messages
                                        if (message.fromUserId !== currentUserId) {
                                            showToast(`New message from ${message.fromUserName}`, 'info');
                                        }
                                    }
                                });
                                lastMessageCheck = new Date();
                                refreshConversationsList();
                                
                                // Update message statuses for read messages
                                if (data.updatedStatuses) {
                                    data.updatedStatuses.forEach(status => {
                                        updateMessageStatus(status.messageId, status.isRead);
                                    });
                                }
                            }
                        }
                    } catch (error) {
                        console.error('Error polling for new messages:', error);
                    }
                }
            }, 3000); // Poll every 3 seconds
        }

        // Mark Messages as Read
        async function markMessagesAsRead(userId) {
            try {
                await fetch('/Employee/MarkMessagesAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getAntiForgeryToken()
                    },
                    body: JSON.stringify({ userId: userId })
                });
                updateUnreadCount();
            } catch (error) {
                console.error('Error marking messages as read:', error);
            }
        }

        // Update Unread Count
        async function updateUnreadCount() {
            try {
                const response = await fetch('/Employee/GetUnreadCount');
                const data = await response.json();

                if (data.success) {
                    const badge = document.getElementById('notificationBadge');
                    const sidebarBadge = document.getElementById('unreadMessagesCount');

                    if (data.unreadCount > 0) {
                        if (badge) {
                            badge.textContent = data.unreadCount;
                            badge.style.display = 'flex';
                        }
                        if (sidebarBadge) {
                            sidebarBadge.textContent = data.unreadCount;
                            sidebarBadge.style.display = 'flex';
                        }
                    } else {
                        if (badge) badge.style.display = 'none';
                        if (sidebarBadge) sidebarBadge.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('Error updating unread count:', error);
            }
        }

        // Refresh Conversations List
        async function refreshConversationsList() {
            try {
                const response = await fetch('/Employee/GetConversationsList');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.conversations) {
                        updateContactsList(data.conversations);
                    }
                }
            } catch (error) {
                console.error('Error refreshing conversations:', error);
            }
        }

        function updateContactsList(conversations) {
            const contactsList = document.getElementById('contactsList');
            if (!contactsList) return;

            const conversationsHtml = conversations.map(conv => `
                <div class="contact-item ${conv.userId === currentSelectedUserId ? 'active' : ''}"
                     data-user-id="${conv.userId}"
                     data-user-name="${conv.fullName}">
                    <div class="contact-avatar">
                        ${conv.userInitials}
                        ${conv.isOnline ? '<div class="online-indicator"></div>' : ''}
                    </div>
                    <div class="contact-info">
                        <div class="contact-name">${escapeHtml(conv.fullName)}</div>
                        <div class="contact-last-message">${escapeHtml(conv.lastMessage || 'No messages yet')}</div>
                    </div>
                    <div class="contact-meta">
                        <div style="font-size: 0.7rem; margin-bottom: 0.25rem;">
                            ${conv.lastMessageTime || ''}
                        </div>
                        ${conv.unreadCount > 0 ? `<div class="unread-badge">${conv.unreadCount}</div>` : ''}
                    </div>
                </div>
            `).join('');

            contactsList.innerHTML = conversationsHtml;
        }

        // Enhanced Scroll Functions
        function scrollToBottom() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                setTimeout(() => {
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                }, 100);
            }
        }

        function scrollToLatestMessage() {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                // Force immediate scroll to bottom first, then smooth scroll
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Small delay to ensure content is rendered, then smooth scroll
                setTimeout(() => {
                    messagesContainer.scrollTo({
                        top: messagesContainer.scrollHeight,
                        behavior: 'smooth'
                    });
                }, 50);
            }
        }

        // Update message status in real-time
        function updateMessageStatus(messageId, isRead) {
            const statusElement = document.querySelector(`[data-message-id="${messageId}"] .message-status`);
            if (statusElement) {
                statusElement.classList.add('message-status-updating');
                
                setTimeout(() => {
                    const icon = statusElement.querySelector('i');
                    if (icon) {
                        if (isRead) {
                            icon.className = 'fas fa-check-double';
                            icon.title = 'Read';
                        } else {
                            icon.className = 'fas fa-check';
                            icon.title = 'Delivered';
                        }
                    }
                    statusElement.classList.remove('message-status-updating');
                }, 300);
            }
        }

        function formatTime(dateString) {
            try {
                const date = new Date(dateString);
                return date.toLocaleTimeString('en-US', {
                    hour: '2-digit',
                    minute: '2-digit',
                    hour12: false
                });
            } catch {
                return '';
            }
        }

        function escapeHtml(text) {
            if (!text) return '';
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        function getAntiForgeryToken() {
            const token = document.querySelector('input[name="__RequestVerificationToken"]');
            return token ? token.value : '';
        }

        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);

            setTimeout(() => toast.classList.add('show'), 100);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Handle window resize
        window.addEventListener('resize', setupMobileView);

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            const modal = document.getElementById('newMessageModal');
            if (event.target === modal) {
                closeNewMessageModal();
            }
        });

        // Make functions globally accessible
        window.openNewMessageModal = openNewMessageModal;
        window.closeNewMessageModal = closeNewMessageModal;
        window.sendMessage = sendMessage;
        window.showContactsList = showContactsList;
        window.selectConversation = selectConversation;
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>