@model PixelSolution.ViewModels.CategoryDetailsViewModel
@{
    ViewData["Title"] = $"Category Details - {Model.Name}";
    Layout = "_AdminLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .category-details-container {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .category-header {
            background: white;
            border-radius: 16px;
            padding: 2.5rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            border-left: 6px solid #8b5cf6;
            position: relative;
            overflow: hidden;
        }

            .category-header::before {
                content: '';
                position: absolute;
                top: 0;
                right: 0;
                width: 200px;
                height: 200px;
                background: linear-gradient(135deg, rgba(139, 92, 246, 0.1), rgba(124, 58, 237, 0.05));
                border-radius: 50%;
                transform: translate(50%, -50%);
            }

        .category-header-content {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 2rem;
            align-items: start;
            position: relative;
            z-index: 1;
        }

        .category-image-section {
            text-align: center;
        }

        .category-image {
            width: 120px;
            height: 120px;
            border-radius: 16px;
            object-fit: cover;
            border: 3px solid #e5e7eb;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            transition: transform 0.3s ease;
        }

            .category-image:hover {
                transform: scale(1.05);
            }

        .category-image-placeholder {
            width: 120px;
            height: 120px;
            border-radius: 16px;
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            display: flex;
            align-items: center;
            justify-content: center;
            border: 3px solid #e5e7eb;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            color: white;
            font-size: 3rem;
        }

        .category-info {
            flex: 1;
            min-width: 0;
        }

        .category-title {
            font-size: 2.5rem;
            font-weight: 800;
            color: #1e293b;
            margin-bottom: 0.5rem;
            line-height: 1.2;
        }

        .category-description {
            font-size: 1.1rem;
            color: #64748b;
            line-height: 1.6;
            margin-bottom: 1.5rem;
        }

        .category-meta {
            display: flex;
            flex-wrap: wrap;
            gap: 1rem;
            align-items: center;
        }

        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.5rem 1rem;
            border-radius: 12px;
            font-weight: 600;
            font-size: 0.875rem;
        }

        .status-active {
            background: #dcfce7;
            color: #166534;
            border: 2px solid #bbf7d0;
        }

        .status-inactive {
            background: #fee2e2;
            color: #991b1b;
            border: 2px solid #fecaca;
        }

        .created-date {
            color: #6b7280;
            font-size: 0.875rem;
            font-weight: 500;
        }

        .category-actions {
            display: flex;
            flex-direction: column;
            gap: 0.75rem;
        }

        .stats-section {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
        }

        .stat-card {
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

            .stat-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                right: 0;
                height: 4px;
                background: linear-gradient(90deg, #8b5cf6, #7c3aed);
            }

            .stat-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                border-color: #8b5cf6;
            }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.875rem;
            color: #64748b;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .products-section {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        }

        .section-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1e293b;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .products-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .product-card {
            background: #f8fafc;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            padding: 1.5rem;
            transition: all 0.3s ease;
            position: relative;
        }

            .product-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                border-color: #8b5cf6;
            }

            .product-card.low-stock {
                border-left: 4px solid #f59e0b;
            }

            .product-card.inactive {
                opacity: 0.7;
                border-left: 4px solid #6b7280;
            }

        .product-info {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .product-image {
            width: 60px;
            height: 60px;
            border-radius: 8px;
            object-fit: cover;
            background: #e5e7eb;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #9ca3af;
            font-size: 1.5rem;
        }

        .product-details h4 {
            font-size: 1.1rem;
            font-weight: 600;
            color: #1e293b;
            margin-bottom: 0.25rem;
        }

        .product-sku {
            font-size: 0.875rem;
            color: #6b7280;
            font-weight: 500;
        }

        .product-metrics {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 1rem;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid #e2e8f0;
        }

        .metric {
            text-align: center;
        }

        .metric-value {
            font-size: 1rem;
            font-weight: 600;
            color: #1e293b;
            display: block;
        }

        .metric-label {
            font-size: 0.75rem;
            color: #64748b;
            margin-top: 0.25rem;
        }

        .breadcrumb {
            margin-bottom: 2rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

            .breadcrumb a {
                color: #8b5cf6;
                text-decoration: none;
                font-weight: 600;
                transition: color 0.3s ease;
            }

                .breadcrumb a:hover {
                    color: #7c3aed;
                    text-decoration: underline;
                }

        .breadcrumb-separator {
            color: #64748b;
            margin: 0 0.25rem;
        }

        .btn {
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            cursor: pointer;
            font-size: 0.875rem;
        }

        .btn-primary {
            background: linear-gradient(135deg, #8b5cf6, #7c3aed);
            color: white;
            border-color: #8b5cf6;
        }

            .btn-primary:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
            }

        .btn-secondary {
            background: #6b7280;
            color: white;
            border-color: #6b7280;
        }

            .btn-secondary:hover {
                background: #4b5563;
                border-color: #4b5563;
                transform: translateY(-1px);
            }

        .btn-danger {
            background: linear-gradient(135deg, #ef4444, #dc2626);
            color: white;
            border-color: #ef4444;
        }

            .btn-danger:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(239, 68, 68, 0.3);
            }

        .btn-warning {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
            border-color: #f59e0b;
        }

            .btn-warning:hover {
                transform: translateY(-1px);
                box-shadow: 0 4px 12px rgba(245, 158, 11, 0.3);
            }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }

        .empty-state {
            text-align: center;
            padding: 4rem;
            color: #64748b;
        }

            .empty-state i {
                font-size: 4rem;
                margin-bottom: 1rem;
                opacity: 0.3;
            }

        /* Mobile Responsive */
            @@media (max-width: 768px) {
            .category-details-container

        {
            padding: 1rem;
        }

        .category-header-content {
            grid-template-columns: 1fr;
            text-align: center;
            gap: 1.5rem;
        }

        .category-title {
            font-size: 2rem;
        }

        .category-actions {
            flex-direction: row;
            justify-content: center;
            flex-wrap: wrap;
        }

        .stats-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .products-grid {
            grid-template-columns: 1fr;
        }

        .section-header {
            flex-direction: column;
            align-items: stretch;
        }

        .category-meta {
            justify-content: center;
        }

        }

            @@media (max-width: 480px) {
            .stats-grid

        {
            grid-template-columns: 1fr;
        }

        .btn {
            padding: 0.6rem 1rem;
            font-size: 0.8rem;
        }

        .category-header {
            padding: 1.5rem;
        }

        }
    </style>
}

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>System Administrator</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Dashboard", "Admin")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Inventory", "Admin")" class="nav-link">
                    <i class="fas fa-box"></i>
                    Inventory
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Management</div>
            <div class="nav-item">
                <a href="@Url.Action("Users", "Admin")" class="nav-link">
                    <i class="fas fa-users"></i>
                    Employees
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Departments", "Admin")" class="nav-link">
                    <i class="fas fa-building"></i>
                    Departments
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Suppliers", "Admin")" class="nav-link">
                    <i class="fas fa-truck"></i>
                    Suppliers
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Categories", "Admin")" class="nav-link active">
                    <i class="fas fa-tags"></i>
                    Categories
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Products", "Admin")" class="nav-link">
                    <i class="fas fa-cube"></i>
                    Products
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Operations</div>
            <div class="nav-item">
                <a href="@Url.Action("PurchaseRequests", "Admin")" class="nav-link">
                    <i class="fas fa-file-invoice"></i>
                    Purchase Requests
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("CartManagement", "Admin")" class="nav-link">
                    <i class="fas fa-shopping-basket"></i>
                    Cart Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("WishlistManagement", "Admin")" class="nav-link">
                    <i class="fas fa-heart"></i>
                    Wishlist Management
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Admin")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Reports", "Admin")" class="nav-link">
                    <i class="fas fa-chart-bar"></i>
                    Reports
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">System</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Admin")" class="nav-link">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Category Details</h1>
        </div>
        <div class="header-right">
            <div class="search-container">
                <input type="text" class="search-input" placeholder="Search products in this category..." id="searchInput">
                <i class="fas fa-search search-icon"></i>
            </div>
            <div class="header-actions">
                <button class="action-btn" title="Notifications">
                    <i class="fas fa-bell"></i>
                    <span class="notification-badge">3</span>
                </button>
                <button class="action-btn" title="Messages">
                    <i class="fas fa-envelope"></i>
                    <span class="notification-badge">8</span>
                </button>
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Page Content -->
    <div class="category-details-container">
        <!-- Breadcrumb -->
        <div class="breadcrumb">
            <a href="@Url.Action("Categories", "Admin")">
                <i class="fas fa-tags"></i>
                Categories
            </a>
            <span class="breadcrumb-separator">/</span>
            <span>@Model.Name</span>
        </div>

        <!-- Category Header -->
        <div class="category-header">
            <div class="category-header-content">
                <div class="category-image-section">
                    @if (!string.IsNullOrEmpty(Model.ImageUrl))
                    {
                        <img src="@Model.ImageUrl" alt="@Model.Name" class="category-image" />
                    }
                    else
                    {
                        <div class="category-image-placeholder">
                            <i class="fas fa-tags"></i>
                        </div>
                    }
                </div>

                <div class="category-info">
                    <h1 class="category-title">@Model.Name</h1>

                    @if (!string.IsNullOrEmpty(Model.Description))
                    {
                        <div class="category-description">
                            @Model.Description
                        </div>
                    }

                    <div class="category-meta">
                        <div class="status-badge @(Model.IsActive ? "status-active" : "status-inactive")">
                            @if (Model.IsActive)
                            {
                                <i class="fas fa-check-circle"></i>
                                <span>Active</span>
                            }
                            else
                            {
                                <i class="fas fa-times-circle"></i>
                                <span>Inactive</span>
                            }
                        </div>
                        <div class="created-date">
                            <i class="fas fa-calendar-plus"></i>
                            Created @Model.CreatedAt.ToString("MMM dd, yyyy")
                        </div>
                    </div>
                </div>

                <div class="category-actions">
                    <a href="@Url.Action("Categories", "Admin")" class="btn btn-secondary btn-sm">
                        <i class="fas fa-arrow-left"></i>
                        Back to Categories
                    </a>
                    @if (User.IsInRole("Admin"))
                    {
                        <button onclick="editCategory(@Model.CategoryId)" class="btn btn-primary btn-sm">
                            <i class="fas fa-edit"></i>
                            Edit Category
                        </button>
                        <button onclick="toggleCategoryStatus(@Model.CategoryId, @Model.IsActive.ToString().ToLower())" class="btn btn-warning btn-sm">
                            <i class="fas fa-@(Model.IsActive ? "pause" : "play")"></i>
                            @(Model.IsActive ? "Deactivate" : "Activate")
                        </button>
                        <button onclick="deleteCategory(@Model.CategoryId)" class="btn btn-danger btn-sm">
                            <i class="fas fa-trash"></i>
                            Delete
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Category Statistics -->
       

        <!-- Products in Category -->
        <div class="products-section">
            <div class="section-header">
                <h2 class="section-title">
                    <i class="fas fa-cube"></i>
                    Products in this Category
                </h2>
                <div>
                    <a href="@Url.Action("Products", "Admin", new { category = Model.CategoryId })" class="btn btn-secondary btn-sm">
                        <i class="fas fa-external-link-alt"></i>
                        View All Products
                    </a>
                    @if (User.IsInRole("Admin"))
                    {
                        <a href="@Url.Action("Products", "Admin", new { create = true, categoryId = Model.CategoryId })" class="btn btn-primary btn-sm">
                            <i class="fas fa-plus"></i>
                            Add Product to Category
                        </a>
                    }
                </div>
            </div>

            <!-- Products in Category -->
            <div id="productsGrid" class="products-grid">
                <!-- Products will be loaded dynamically -->
            </div>

            <!-- Loading State -->
            <div id="loadingState" class="empty-state">
                <i class="fas fa-spinner fa-spin"></i>
                <h3>Loading products...</h3>
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="empty-state" style="display: none;">
                <i class="fas fa-cube"></i>
                <h3>No products in this category</h3>
                <p>This category doesn't have any products yet. Add some products to get started!</p>
                @if (User.IsInRole("Admin"))
                {
                    <a href="@Url.Action("Products", "Admin", new { create = true, categoryId = Model.CategoryId })" class="btn btn-primary" style="margin-top: 1rem;">
                        <i class="fas fa-plus"></i>
                        Add First Product
                    </a>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        let categoryData = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));

        document.addEventListener('DOMContentLoaded', function() {
            console.log('📂 Category Details Page Loaded:', categoryData);
            // Hide loading spinner since we're using server-side rendering
            const loadingSpinner = document.getElementById('categoryStatsLoading');
            if (loadingSpinner) {
                loadingSpinner.style.display = 'none';
            }
            // Load products for this category
            loadCategoryProducts();
        });

        // Load products for this category
        async function loadCategoryProducts() {
            try {
                console.log(`📦 Loading products for category ${categoryData.CategoryId}`);
                
                const response = await fetch(`/Admin/GetCategoryProducts?categoryId=${categoryData.CategoryId}`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const products = await response.json();
                console.log('📦 Products loaded:', products);
                
                document.getElementById('loadingState').style.display = 'none';
                
                if (products && Array.isArray(products) && products.length > 0) {
                    displayProducts(products);
                } else {
                    document.getElementById('emptyState').style.display = 'block';
                }
            } catch (error) {
                console.error('❌ Error loading category products:', error);
                document.getElementById('loadingState').innerHTML = `
                    <i class="fas fa-exclamation-triangle"></i>
                    <h3>Error loading products</h3>
                    <p>Unable to load products for this category. Please try refreshing the page.</p>
                `;
            }
        }

        // Display products in the grid
        function displayProducts(products) {
            const grid = document.getElementById('productsGrid');
            
            if (!products || products.length === 0) {
                document.getElementById('emptyState').style.display = 'block';
                return;
            }
            
            grid.innerHTML = products.map(product => `
                <div class="product-card ${product.isLowStock ? 'low-stock' : ''} ${!product.isActive ? 'inactive' : ''}">
                    <div class="product-info">
                        <div class="product-image">
                            ${product.imageUrl ? 
                                `<img src="${product.imageUrl}" alt="${product.name}" style="width: 100%; height: 100%; object-fit: cover; border-radius: 8px;">` :
                                '<i class="fas fa-cube"></i>'
                            }
                        </div>
                        <div class="product-details">
                            <h4>${product.name}</h4>
                            <div class="product-sku">SKU: ${product.sku}</div>
                        </div>
                    </div>
                    
                    <div class="product-metrics">
                        <div class="metric">
                            <span class="metric-value">KSh ${parseFloat(product.sellingPrice || 0).toLocaleString()}</span>
                            <span class="metric-label">Price</span>
                        </div>
                        <div class="metric">
                            <span class="metric-value ${product.isLowStock ? 'text-warning' : ''}">${product.stockQuantity || 0}</span>
                            <span class="metric-label">Stock</span>
                        </div>
                        <div class="metric">
                            <span class="metric-value ${product.isActive ? 'text-success' : 'text-danger'}">${product.isActive ? 'Active' : 'Inactive'}</span>
                            <span class="metric-label">Status</span>
                        </div>
                    </div>
                    
                    <div style="display: flex; gap: 0.5rem; margin-top: 1rem; flex-wrap: wrap;">
                        <button onclick="viewProduct(${product.productId})" class="btn btn-secondary btn-sm" title="View Details">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button onclick="editProduct(${product.productId})" class="btn btn-primary btn-sm" title="Edit Product">
                            <i class="fas fa-edit"></i>
                        </button>
                        ${product.isLowStock ? 
                            `<button onclick="updateStock(${product.productId}, ${product.stockQuantity})" class="btn btn-warning btn-sm" title="Low Stock - Restock">
                                <i class="fas fa-exclamation-triangle"></i>
                            </button>` : ''
                        }
                    </div>
                </div>
            `).join('');
            
            console.log(`✅ Displayed ${products.length} products`);
        }

        // Update product stock
        function updateStock(productId, currentStock) {
            const newStock = prompt(`Update stock for this product\nCurrent stock: ${currentStock}\nEnter new stock quantity:`, currentStock);
            
            if (newStock !== null && !isNaN(newStock) && parseInt(newStock) >= 0) {
                updateProductStock(productId, parseInt(newStock));
            }
        }

        // Update product stock via API
        async function updateProductStock(productId, newStock) {
            try {
                const response = await fetch('/Admin/UpdateStock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({
                        productId: productId,
                        newQuantity: newStock,
                        reason: 'Stock update from category details'
                    })
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => loadCategoryProducts(), 1000);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error updating stock:', error);
                showToast('Error updating stock.', 'error');
            }
        }

        // Utility function to get CSRF token
        function getCSRFToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Navigate to product details
        function viewProduct(productId) {
            console.log('👁️ Viewing product:', productId);
            window.location.href = `/Admin/ProductDetails/${productId}`;
        }

        // Navigate to edit product
        function editProduct(productId) {
            console.log('✏️ Editing product:', productId);
            window.location.href = `/Admin/Products?edit=${productId}`;
        }

        // Toast notification function
        function showToast(message, type = 'info') {
            const toast = document.createElement('div');
            toast.className = `toast toast-${type}`;
            toast.textContent = message;
            document.body.appendChild(toast);
            
            setTimeout(() => {
                toast.classList.add('show');
            }, 100);
            
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Category actions
        function editCategory(categoryId) {
            console.log('✏️ Editing category:', categoryId);
            window.location.href = `/Admin/Categories?edit=${categoryId}`;
        }

        async function toggleCategoryStatus(categoryId, currentStatus) {
            const newStatus = !currentStatus;

            if (!confirm(`Are you sure you want to ${newStatus ? 'activate' : 'deactivate'} this category?`)) {
                return;
            }

            try {
                const response = await fetch('/Admin/ToggleCategoryStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({ id: categoryId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => location.reload(), 1000);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error toggling category status:', error);
                showToast('Error updating category status.', 'error');
            }
        }

        async function deleteCategory(categoryId) {
            if (!confirm('Are you sure you want to delete this category? This action cannot be undone and will affect all products in this category.')) {
                return;
            }

            try {
                const response = await fetch('/Admin/DeleteCategory', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({ id: categoryId })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => {
                        window.location.href = '/Admin/Categories';
                    }, 1000);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error deleting category:', error);
                showToast('Error deleting category.', 'error');
            }
        }

        async function updateProductStock(productId, newStock) {
            try {
                const response = await fetch('/Admin/UpdateStock', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    },
                    body: JSON.stringify({
                        productId: productId,
                        newQuantity: newStock,
                        reason: 'Stock update from category details'
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast(result.message, 'success');
                    setTimeout(() => loadCategoryProducts(), 1000);
                } else {
                    showToast(result.message, 'error');
                }
            } catch (error) {
                console.error('❌ Error updating stock:', error);
                showToast('Error updating stock.', 'error');
            }
        }

        // Utility functions
        function getCSRFToken() {
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            return tokenInput ? tokenInput.value : '';
        }

        // Toast notification system
        function showToast(message, type) {
            const existingToasts = document.querySelectorAll('.toast');
            existingToasts.forEach(toast => toast.remove());

            const toast = document.createElement('div');
            toast.className = `toast ${type}`;
            toast.textContent = message;
            toast.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 9999;
                padding: 1rem 1.5rem;
                border-radius: 12px;
                color: white;
                font-weight: 600;
                opacity: 0;
                transform: translateX(100%);
                transition: all 0.3s ease;
                max-width: 350px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            `;

            switch(type) {
                case 'success':
                    toast.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                    break;
                case 'error':
                    toast.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                    break;
                case 'warning':
                    toast.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
                    break;
                case 'info':
                    toast.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
                    break;
            }

            document.body.appendChild(toast);

            setTimeout(() => {
                toast.style.opacity = '1';
                toast.style.transform = 'translateX(0)';
            }, 100);

            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }
    </script>
}

@* Hidden form for CSRF token *@
<form style="display: none;">
    @Html.AntiForgeryToken()
</form>