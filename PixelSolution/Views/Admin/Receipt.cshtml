@model PixelSolution.ViewModels.SaleDetailsViewModel
@{
    ViewData["Title"] = "Receipt";
    Layout = null; // No layout for clean receipt printing
    
    // Calculate subtotal and tax once
    var receiptSubtotal = Model.TotalAmount / 1.15m; // Remove 15% VAT to get subtotal
    var receiptTax = Model.TotalAmount - receiptSubtotal; // 15% VAT
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - PixelSolution</title>
    
    <!-- jsPDF CDN -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }
        
        .message {
            text-align: center;
            font-size: 18px;
            color: #333;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .loading {
            color: #007bff;
        }
        
        .success {
            color: #28a745;
        }
        
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #007bff;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 10px auto;
        }
        
        @@keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="message">
        <div class="spinner"></div>
        <h2 id="title">Generating Receipt PDF...</h2>
        <p id="status">Please wait while we create your professional receipt.</p>
    </div>

    <script>
        // Receipt data from server
        const receiptData = {
            saleNumber: '@Model.SaleNumber',
            saleDate: '@Model.SaleDate.ToString("dd/MM/yyyy HH:mm:ss")',
            cashierName: '@Model.CashierName',
            customerName: '@(Model.CustomerName ?? "")',
            paymentMethod: '@Model.PaymentMethod',
            totalAmount: @Model.TotalAmount,
            amountPaid: @Model.AmountPaid,
            changeGiven: @Model.ChangeGiven,
            subtotal: @receiptSubtotal,
            tax: @receiptTax,
            items: [
                @foreach (var item in Model.Items)
                {
                    @:{
                    @:    name: '@Html.Raw(item.ProductName.Replace("'", "\\'"))',
                    @:    quantity: @item.Quantity,
                    @:    unitPrice: @item.UnitPrice,
                    @:    totalPrice: @item.TotalPrice
                    @:},
                }
            ]
        };

        // Generate professional thermal receipt PDF
        function generateReceiptPDF() {
            try {
                // Update status
                document.getElementById('status').textContent = 'Loading PDF library...';
                
                // Check if jsPDF is loaded
                if (typeof window.jspdf === 'undefined') {
                    throw new Error('jsPDF library not loaded');
                }

                document.getElementById('status').textContent = 'Creating PDF document...';
                
                // Create PDF document (80mm thermal receipt width)
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF({
                    orientation: 'portrait',
                    unit: 'mm',
                    format: [80, 200] // 80mm width, auto height
                });

                let yPos = 8;
                const lineHeight = 4;
                const pageWidth = 80;
                const margin = 3;
                
                document.getElementById('status').textContent = 'Adding content to PDF...';

                // Helper functions
                function addCenteredText(text, fontSize = 9, fontStyle = 'normal') {
                    doc.setFontSize(fontSize);
                    doc.setFont('courier', fontStyle);
                    const textWidth = doc.getTextWidth(text);
                    const x = Math.max(margin, (pageWidth - textWidth) / 2);
                    doc.text(text, x, yPos);
                    yPos += lineHeight;
                }

                function addText(text, fontSize = 8) {
                    doc.setFontSize(fontSize);
                    doc.setFont('courier', 'normal');
                    doc.text(text, margin, yPos);
                    yPos += lineHeight;
                }

                function addRightAlignedText(text, fontSize = 8) {
                    doc.setFontSize(fontSize);
                    doc.setFont('courier', 'normal');
                    const textWidth = doc.getTextWidth(text);
                    const x = pageWidth - margin - textWidth;
                    doc.text(text, x, yPos);
                    yPos += lineHeight;
                }

                function addSeparatorLine() {
                    addText('========================================');
                }

                function addDottedLine() {
                    addText('........................................');
                }

                // Fancy Header - Company Info with styling
                
                // Add company name with clean styling
                doc.setTextColor(0, 0, 0); // Black text
                doc.setFontSize(14);
                doc.setFont('helvetica', 'bold');
                const companyName = 'PIXEL SOLUTION';
                const companyWidth = doc.getTextWidth(companyName);
                doc.text(companyName, (pageWidth - companyWidth) / 2, 12);
                
                // Add location and contact in smaller dark text
                doc.setFontSize(7);
                doc.setFont('helvetica', 'normal');
                const location = 'Chuka, Ndangani • Tel: +254758024400';
                const locationWidth = doc.getTextWidth(location);
                doc.text(location, (pageWidth - locationWidth) / 2, 19);
                
                // Add website
                const website = 'www.pixelsolution.co.ke';
                const websiteWidth = doc.getTextWidth(website);
                doc.text(website, (pageWidth - websiteWidth) / 2, 25);
                
                // Reset text color to black for rest of receipt
                doc.setTextColor(0, 0, 0);
                
                // Add decorative border line
                yPos = 33;
                doc.setDrawColor(150, 150, 150); // Gray border
                doc.setLineWidth(0.5);
                doc.line(margin, yPos, pageWidth - margin, yPos);
                yPos += 3;
                
                // Add fancy separator with dots
                doc.setTextColor(100, 100, 100); // Gray color for separator
                doc.setFontSize(8);
                doc.setFont('courier', 'normal');
                const fancySeparator = '• • • • • • • • • • • • • • • • • • • •';
                const sepWidth = doc.getTextWidth(fancySeparator);
                doc.text(fancySeparator, (pageWidth - sepWidth) / 2, yPos);
                yPos += 4;
                
                // Reset text color to black
                doc.setTextColor(0, 0, 0);

                // Receipt Details
                addText('Receipt: ' + receiptData.saleNumber, 9);
                addText('Date: ' + receiptData.saleDate, 8);
                addText('Served by: ' + receiptData.cashierName, 8);
                if (receiptData.customerName) {
                    addText('Customer: ' + receiptData.customerName, 8);
                }
                yPos += 2;
                addDottedLine();
                yPos += 2;

                // Items
                receiptData.items.forEach(function(item) {
                    // Item name
                    addText(item.name, 9);
                    
                    // Quantity and unit price on left, total on right
                    const itemLine = item.quantity + ' x KSh ' + item.unitPrice.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                    const totalPrice = 'KSh ' + item.totalPrice.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                    
                    doc.setFontSize(8);
                    doc.text(itemLine, margin, yPos);
                    const totalWidth = doc.getTextWidth(totalPrice);
                    doc.text(totalPrice, pageWidth - margin - totalWidth, yPos);
                    yPos += lineHeight + 1; // Extra space between items
                });

                yPos += 1;
                addDottedLine();
                yPos += 1;

                // Totals
                function addTotalLine(label, amount, bold = false) {
                    const amountText = 'KSh ' + amount.toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
                    doc.setFontSize(9);
                    doc.setFont('courier', bold ? 'bold' : 'normal');
                    doc.text(label, margin, yPos);
                    const amountWidth = doc.getTextWidth(amountText);
                    doc.text(amountText, pageWidth - margin - amountWidth, yPos);
                    yPos += lineHeight;
                }

                addTotalLine('Subtotal:', receiptData.subtotal);
                addTotalLine('VAT (15%):', receiptData.tax);
                yPos += 1;
                addSeparatorLine();
                yPos += 1;
                addTotalLine('TOTAL:', receiptData.totalAmount, true);
                yPos += 3;

                // Payment Info
                addText('Payment Method: ' + receiptData.paymentMethod, 8);
                addTotalLine('Amount Paid:', receiptData.amountPaid);
                if (receiptData.changeGiven > 0) {
                    addTotalLine('Change Given:', receiptData.changeGiven);
                }
                yPos += 3;
                addDottedLine();
                yPos += 3;

                // Footer
                addCenteredText('Thank You for Your Business!', 9, 'bold');
                addCenteredText('We appreciate your trust in our services', 7);
                addCenteredText('Customer Service: +254758024400', 7);
                yPos += 3;
                addCenteredText('Generated on ' + new Date().toLocaleString(), 6);
                addCenteredText('Powered by PixelSolution POS System', 6);

                document.getElementById('status').textContent = 'Saving PDF file...';
                
                // Generate filename with timestamp
                const timestamp = new Date().toISOString().replace(/[:.]/g, '-').slice(0, -5);
                const filename = `Receipt_${receiptData.saleNumber}_${timestamp}.pdf`;

                // Save the PDF to user's Downloads folder
                doc.save(filename);

                // Update UI to show success
                document.querySelector('.spinner').style.display = 'none';
                document.getElementById('title').textContent = 'Receipt Downloaded Successfully!';
                document.getElementById('title').className = 'success';
                document.getElementById('status').textContent = 'Your thermal receipt PDF has been saved to your Downloads folder.';
                
                console.log('Receipt PDF generated and downloaded:', filename);
                
                // Redirect after successful download
                setTimeout(function() {
                    if (window.opener) {
                        window.close();
                    } else {
                        window.location.href = '/Admin/SalesHistory';
                    }
                }, 3000);

            } catch (error) {
                console.error('Error generating receipt PDF:', error);
                
                // Update UI to show error
                document.querySelector('.spinner').style.display = 'none';
                document.getElementById('title').textContent = 'Error Generating PDF';
                document.getElementById('title').style.color = '#dc3545';
                document.getElementById('status').textContent = 'Unable to generate PDF. Please try again or contact support.';
                
                // Redirect back on error
                setTimeout(function() {
                    if (window.opener) {
                        window.close();
                    } else {
                        window.location.href = '/Admin/SalesHistory';
                    }
                }, 3000);
            }
        }

        // Start PDF generation when page loads
        window.addEventListener('load', function() {
            // Give a moment for jsPDF to fully load
            setTimeout(generateReceiptPDF, 1000);
        });

    </script>
</body>
</html>
