@{
    ViewData["Title"] = "Settings - PixelSolution";
    Layout = "_EmployeeLayout";
}

@section Styles {
    <link href="~/css/dashboard.css" rel="stylesheet">
    <style>
        .settings-container {
            max-width: 800px;
            margin: 0 auto;
            padding: 2rem;
        }

        .settings-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            padding: 2rem;
            margin-bottom: 2rem;
        }

        .settings-header {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        .settings-icon {
            width: 48px;
            height: 48px;
            background: #3b82f6;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.25rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 600;
            color: #374151;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.2s, box-shadow 0.2s;
        }

        .form-input:focus {
            outline: none;
            border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
            border: none;
            padding: 0.75rem 1.5rem;
            border-radius: 8px;
            font-weight: 600;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .alert {
            padding: 1rem;
            border-radius: 8px;
            margin-bottom: 1rem;
        }

        .alert-success {
            background: #dcfce7;
            color: #166534;
            border: 1px solid #bbf7d0;
        }

        .alert-error {
            background: #fef2f2;
            color: #dc2626;
            border: 1px solid #fecaca;
        }
    </style>
}

<!-- Employee Sidebar -->
<div class="sidebar" id="sidebar">
    <div class="sidebar-header">
        <div class="logo-container">
            <div class="logo-icon">
                <i class="fas fa-bolt"></i>
            </div>
            <div class="logo-text">PixelSolution</div>
        </div>
        <div class="user-info">
            <div class="user-avatar">@User.Identity.Name?.Substring(0, 2).ToUpper()</div>
            <div class="user-details">
                <h4>@User.Identity.Name</h4>
                <p>Employee</p>
            </div>
        </div>
    </div>

    <nav class="nav-menu">
        <div class="nav-section">
            <div class="nav-section-title">Main</div>
            <div class="nav-item">
                <a href="@Url.Action("Index", "Employee")" class="nav-link">
                    <i class="fas fa-chart-pie"></i>
                    Dashboard
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("Sales", "Employee")" class="nav-link">
                    <i class="fas fa-shopping-cart"></i>
                    Sales
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Communication</div>
            <div class="nav-item">
                <a href="@Url.Action("Messages", "Employee")" class="nav-link">
                    <i class="fas fa-envelope"></i>
                    Messages
                </a>
            </div>
        </div>

        <div class="nav-section">
            <div class="nav-section-title">Account</div>
            <div class="nav-item">
                <a href="@Url.Action("Settings", "Employee")" class="nav-link active">
                    <i class="fas fa-cog"></i>
                    Settings
                </a>
            </div>
            <div class="nav-item">
                <a href="@Url.Action("LogoutGet", "Auth")" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i>
                    Logout
                </a>
            </div>
        </div>
    </nav>
</div>

<!-- Main Content -->
<div class="main-content" id="mainContent">
    <!-- Header -->
    <header class="header">
        <div class="header-left">
            <button class="sidebar-toggle" id="sidebarToggle">
                <i class="fas fa-bars"></i>
            </button>
            <h1 class="page-title">Settings</h1>
        </div>
        <div class="header-right">
            <div class="header-actions">
                <button class="action-btn" title="Profile">
                    <i class="fas fa-user-circle"></i>
                </button>
            </div>
        </div>
    </header>

    <!-- Settings Content -->
    <div class="settings-container">
        <div class="settings-card">
            <div class="settings-header">
                <div class="settings-icon">
                    <i class="fas fa-user-cog"></i>
                </div>
                <div>
                    <h2>Profile Settings</h2>
                    <p>Manage your account information and preferences</p>
                </div>
            </div>

            <div id="settingsAlert" style="display: none;"></div>

            <form id="profileForm">
                <div class="form-group">
                    <label class="form-label">Full Name</label>
                    <input type="text" class="form-input" id="fullName" value="@User.Identity.Name" readonly>
                </div>

                <div class="form-group">
                    <label class="form-label">Email</label>
                    <input type="email" class="form-input" id="email" value="@User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value" readonly>
                </div>

                <div class="form-group">
                    <label class="form-label">Role</label>
                    <input type="text" class="form-input" id="role" value="@User.FindFirst(System.Security.Claims.ClaimTypes.Role)?.Value" readonly>
                </div>

                <div class="form-group">
                    <label class="form-label">Departments</label>
                    <input type="text" class="form-input" id="departments" value="@User.FindFirst("DepartmentNames")?.Value" readonly>
                </div>
            </form>
        </div>

        <div class="settings-card">
            <div class="settings-header">
                <div class="settings-icon">
                    <i class="fas fa-lock"></i>
                </div>
                <div>
                    <h2>Change Password</h2>
                    <p>Update your account password</p>
                </div>
            </div>

            <div id="passwordAlert" style="display: none;"></div>

            <form id="changePasswordForm">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <label class="form-label" for="currentPassword">Current Password</label>
                    <input type="password" class="form-input" id="currentPassword" name="currentPassword" required>
                </div>

                <div class="form-group">
                    <label class="form-label" for="newPassword">New Password</label>
                    <input type="password" class="form-input" id="newPassword" name="newPassword" required>
                    <small style="color: #6b7280; font-size: 0.875rem;">
                        Password must contain at least 8 characters, including uppercase, lowercase, number, and special character.
                    </small>
                </div>

                <div class="form-group">
                    <label class="form-label" for="confirmPassword">Confirm New Password</label>
                    <input type="password" class="form-input" id="confirmPassword" name="confirmPassword" required>
                </div>

                <button type="submit" class="btn-primary">
                    <i class="fas fa-save"></i>
                    Change Password
                </button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/dashboard.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const changePasswordForm = document.getElementById('changePasswordForm');
            
            changePasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const currentPassword = document.getElementById('currentPassword').value;
                const newPassword = document.getElementById('newPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                
                // Validate passwords match
                if (newPassword !== confirmPassword) {
                    showAlert('passwordAlert', 'Passwords do not match.', 'error');
                    return;
                }
                
                // Validate password strength
                function validatePasswordStrength(password) {
                    return password.length >= 8 &&
                           /[a-z]/.test(password) &&
                           /[A-Z]/.test(password) &&
                           /\d/.test(password) &&
                           /[@@!%*?&\$]/.test(password);
                }
                if (!validatePasswordStrength(newPassword)) {
                    showAlert('passwordAlert', 'Password must contain at least 8 characters, including uppercase, lowercase, number, and special character.', 'error');
                    return;
                }
                
                try {
                    const response = await fetch('@Url.Action("ChangePassword", "Auth")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: JSON.stringify({
                            currentPassword: currentPassword,
                            newPassword: newPassword,
                            confirmPassword: confirmPassword
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showAlert('passwordAlert', 'Password changed successfully!', 'success');
                        changePasswordForm.reset();
                    } else {
                        showAlert('passwordAlert', result.message || 'Failed to change password.', 'error');
                    }
                } catch (error) {
                    showAlert('passwordAlert', 'An error occurred. Please try again.', 'error');
                }
            });
        });
        
        function showAlert(containerId, message, type) {
            const container = document.getElementById(containerId);
            container.innerHTML = `<div class="alert alert-${type}">${message}</div>`;
            container.style.display = 'block';
            
            setTimeout(() => {
                container.style.display = 'none';
            }, 5000);
        }
    </script>
}
