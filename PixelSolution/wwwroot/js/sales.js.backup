
// Global variables
let cart = [];
let selectedPaymentMethod = null;
let currentTotal = 0;
let allProducts = [];
let allCategories = [];

// Get category-specific default icon
function getCategoryIcon(categoryName) {
    if (!categoryName) return 'fas fa-cube';
    
    const categoryLower = categoryName.toLowerCase();
    
    if (categoryLower.includes('electronic') || categoryLower.includes('computer') || categoryLower.includes('laptop')) {
        return 'fas fa-laptop';
    } else if (categoryLower.includes('phone') || categoryLower.includes('mobile') || categoryLower.includes('cell')) {
        return 'fas fa-mobile-alt';
    } else if (categoryLower.includes('fashion') || categoryLower.includes('clothing') || categoryLower.includes('apparel')) {
        return 'fas fa-tshirt';
    } else if (categoryLower.includes('home') || categoryLower.includes('garden') || categoryLower.includes('furniture')) {
        return 'fas fa-home';
    } else if (categoryLower.includes('sport') || categoryLower.includes('outdoor') || categoryLower.includes('fitness')) {
        return 'fas fa-dumbbell';
    } else if (categoryLower.includes('book') || categoryLower.includes('media') || categoryLower.includes('education')) {
        return 'fas fa-book';
    } else if (categoryLower.includes('health') || categoryLower.includes('beauty') || categoryLower.includes('cosmetic')) {
        return 'fas fa-heart';
    } else if (categoryLower.includes('food') || categoryLower.includes('beverage') || categoryLower.includes('grocery')) {
        return 'fas fa-utensils';
    } else if (categoryLower.includes('automotive') || categoryLower.includes('car') || categoryLower.includes('vehicle')) {
        return 'fas fa-car';
    } else if (categoryLower.includes('toy') || categoryLower.includes('game') || categoryLower.includes('entertainment')) {
        return 'fas fa-gamepad';
    } else {
        return 'fas fa-cube';
    }
}

// Initialize POS system
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ Initializing POS system...');
    loadProducts();
    loadCategories();
    updateCartDisplay();
    setupSearchFunctionality();
    loadTodayStats();
    setupKeyboardShortcuts();
    setupEventListeners();
});

// Load categories for filter
async function loadCategories() {
    try {
        const response = await fetch('/api/categories');
        allCategories = await response.json();

        const categoryFilter = document.getElementById('categoryFilter');
        categoryFilter.innerHTML = '<option value="">All Categories</option>';

                        allCategories.forEach(category => {
                            const option = document.createElement('option');
                            option.value = category.categoryId;
                            option.textContent = category.name;
                            categoryFilter.appendChild(option);
                        });

                        console.log(`‚úÖ Loaded ${allCategories.length} categories`);
                    } catch (error) {
                        console.error('Error loading categories:', error);
                    }
                }

                // Load products from server
                async function loadProducts() {
                    try {
                        console.log('üì¶ Loading products from server...');
                        showLoadingState();

                        const response = await fetch('/Admin/GetProductsForSale');
                        const data = await response.json();

                        console.log('üì¶ Products API response:', data);

                        if (data.success && data.products) {
                            allProducts = data.products;
                            console.log(`‚úÖ Loaded ${allProducts.length} products`);
                            displayProducts(allProducts);
                        } else {
                            console.error('‚ùå Failed to load products:', data.message || 'Unknown error');
                            displayEmptyState('Failed to load products. Please refresh the page.');
                        }
                    } catch (error) {
                        console.error('üí• Error loading products:', error);
                        displayEmptyState('Error loading products. Please check your connection.');
                    }
                }

                // Show loading state
                function showLoadingState() {
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `
                        <div style="text-align: center; padding: 4rem; color: #64748b;">
                            <i class="fas fa-spinner fa-spin" style="font-size: 2rem; margin-bottom: 1rem; color: #10b981;"></i>
                            <h3>Loading products...</h3>
                            <p>Please wait while we fetch the latest products.</p>
                        </div>
                    `;
                }

                // Display products in grid
                function displayProducts(products) {
                    const container = document.getElementById('productsContainer');

                    if (!products || products.length === 0) {
                        displayEmptyState('No products available matching your filters.');
                        return;
                    }

                    const productsGrid = document.createElement('div');
                    productsGrid.className = 'products-grid';

                    products.forEach(product => {
                        const stockClass = product.stockQuantity <= 0 ? "out-of-stock" :
                                         product.stockQuantity <= 5 ? "low-stock" : "";

                        const stockBadgeClass = product.stockQuantity <= 0 ? "out-of-stock" :
                                               product.stockQuantity <= 5 ? "low-stock" : "in-stock";

                        const stockText = product.stockQuantity <= 0 ? "Out" :
                                         product.stockQuantity <= 5 ? "Low" : "In Stock";

                        const productCard = document.createElement('div');
                        productCard.className = `product-card ${stockClass}`;
                        productCard.dataset.productId = product.productId;
                        productCard.dataset.categoryId = product.categoryId || '';
                        productCard.dataset.stockStatus = stockBadgeClass;

                        if (product.stockQuantity > 0) {
                            productCard.onclick = () => addToCart(product.productId);
                        } else {
                            productCard.onclick = () => showStockWarning(product.name);
                        }

                        // Get category-specific icon for this product
                        const defaultIcon = getCategoryIcon(product.categoryName);
                        
                        productCard.innerHTML = `
                            <div class="stock-badge ${stockBadgeClass}">
                                ${stockText}
                            </div>

                            ${product.imageUrl ?
                                `<img src="${product.imageUrl}" alt="${product.name}" class="product-image" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                                 <div class="product-image" style="display: none;">
                                     <i class="${defaultIcon}"></i>
                                 </div>` :
                                `<div class="product-image">
                                     <i class="${defaultIcon}"></i>
                                 </div>`
                            }

                            <div class="product-name">${product.name}</div>
                            <div class="product-sku">SKU: ${product.sku}</div>
                            <div class="product-price">KSh ${parseFloat(product.sellingPrice).toLocaleString('en-KE', { minimumFractionDigits: 2 })}</div>
                            <div class="product-stock">Stock: ${product.stockQuantity}</div>
                        `;

                        productsGrid.appendChild(productCard);
                    });

                    container.innerHTML = '';
                    container.appendChild(productsGrid);
                }

                // Display empty state
                function displayEmptyState(message) {
                    const container = document.getElementById('productsContainer');
                    container.innerHTML = `
                        <div class="no-products">
                            <i class="fas fa-cube"></i>
                            <h3>No products found</h3>
                            <p>${message}</p>
                            <button onclick="loadProducts()" class="btn" style="margin-top: 1rem; background: #10b981; color: white; padding: 0.75rem 1.5rem; border-radius: 8px; border: none; cursor: pointer;">
                                <i class="fas fa-refresh"></i> Retry
                            </button>
                        </div>
                    `;
                }

                // Show stock warning
                function showStockWarning(productName) {
                    const warning = document.getElementById('stockWarning');
                    const warningText = document.getElementById('stockWarningText');
                    warningText.textContent = `${productName} is out of stock. Please restock to continue selling.`;
                    warning.style.display = 'block';
                    setTimeout(() => {
                        warning.style.display = 'none';
                    }, 3000);
                }

                // Add product to cart
                function addToCart(productId) {
                    console.log(`üõí Adding product ${productId} to cart`);

                    const product = allProducts.find(p => p.productId === productId);
                    if (!product) {
                        console.error('‚ùå Product not found:', productId);
                        showToast('Product not found', 'error');
                        return;
                    }

                    if (product.stockQuantity <= 0) {
                        showStockWarning(product.name);
                        return;
                    }

                    // Check if product already exists in cart
                    const existingItem = cart.find(item => item.id === productId);

                    if (existingItem) {
                        if (existingItem.quantity < product.stockQuantity) {
                            existingItem.quantity++;
                            existingItem.total = existingItem.quantity * existingItem.price;
                            console.log(`‚úÖ Updated quantity for ${product.name}: ${existingItem.quantity}`);
                            showToast(`Updated ${product.name} quantity`, 'success');
                        } else {
                            showToast('Cannot add more. Insufficient stock', 'error');
                            return;
                        }
                    } else {
                        cart.push({
                            id: productId,
                            name: product.name,
                            sku: product.sku,
                            price: parseFloat(product.sellingPrice),
                            quantity: 1,
                            total: parseFloat(product.sellingPrice),
                            maxStock: product.stockQuantity,
                            imageUrl: product.imageUrl,
                            categoryName: product.categoryName
                        });
                        console.log(`‚úÖ Added ${product.name} to cart`);
                        showToast(`Added ${product.name} to cart`, 'success');
                    }

                    updateCartDisplay();
                }

                // Update cart display
                function updateCartDisplay() {
                    console.log('üîÑ Updating cart display, items:', cart.length);

                    const cartItemsContainer = document.getElementById('cartItems');
                    const cartItemCount = document.getElementById('cartItemCount');
                    const cartSubtotalDisplay = document.getElementById('cartSubtotalDisplay');

                    // Calculate totals
                    const subtotal = cart.reduce((sum, item) => sum + item.total, 0);
                    const tax = subtotal * 0.16; // 16% VAT
                    const total = subtotal + tax;
                    currentTotal = total;

                    // Update counters in header
                    cartItemCount.textContent = cart.length;
                    cartSubtotalDisplay.textContent = `KSh ${subtotal.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;

                    // Update total displays in footer
                    document.getElementById('subtotalAmount').textContent = `KSh ${subtotal.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                    document.getElementById('taxAmount').textContent = `KSh ${tax.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                    document.getElementById('totalAmount').textContent = `KSh ${total.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;

                    // Update button states
                    const hasItems = cart.length > 0;
                    document.getElementById('clearBtn').disabled = !hasItems;
                    document.getElementById('holdBtn').disabled = !hasItems;
                    document.getElementById('checkoutBtn').disabled = !hasItems;

                    // Update cart items display
                    if (cart.length === 0) {
                        cartItemsContainer.innerHTML = `
                            <div class="empty-cart">
                                <i class="fas fa-shopping-cart"></i>
                                <h3>Your cart is empty</h3>
                                <p>Add products to start a sale</p>
                            </div>
                        `;
                        return;
                                    <div class="cart-item-price">KSh ${item.price.toLocaleString('en-KE', { minimumFractionDigits: 2 })} each</div>
                                </div>

                                <div class="quantity-controls">
                                    <button class="quantity-btn" onclick="updateQuantity('${item.id}', -1)" type="button">
                                        <i class="fas fa-minus"></i>
                                    </button>
                                    <div class="quantity-display">${item.quantity}</div>
                                    <button class="quantity-btn" onclick="updateQuantity('${item.id}', 1)" type="button">
                                        <i class="fas fa-plus"></i>
                                    </button>
                                </div>

                                <div style="text-align: right; margin-left: 0.5rem;">
                                    <div style="font-weight: 700; color: #10b981; font-size: 0.9rem;">
                                        KSh ${item.total.toLocaleString('en-KE', { minimumFractionDigits: 2 })}
                                    </div>
                                    <button class="remove-btn" onclick="removeFromCart('${item.id}')" type="button" title="Remove item">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        `;
                    });

                    cartItemsContainer.innerHTML = cartHTML;

                    // Auto-scroll to bottom when new items are added
                    cartItemsContainer.scrollTop = cartItemsContainer.scrollHeight;
                }

                // Update quantity in cart
                function updateQuantity(productId, change) {
                    console.log(`üî¢ Updating quantity for product ${productId}, change: ${change}`);

                    const itemIndex = cart.findIndex(item => item.id == productId);
                    if (itemIndex === -1) return;

                    const item = cart[itemIndex];
                    const newQuantity = item.quantity + change;

                    if (newQuantity <= 0) {
                        removeFromCart(productId);
                        return;
                    }

                    if (newQuantity > item.maxStock) {
                        showToast(`Cannot exceed available stock (${item.maxStock})`, 'error');
                        return;
                    }

                    item.quantity = newQuantity;
                    item.total = item.quantity * item.price;

                    updateCartDisplay();
                }

                // Remove item from cart
                function removeFromCart(productId) {
                    console.log(`üóëÔ∏è Removing product ${productId} from cart`);

                    const itemIndex = cart.findIndex(item => item.id == productId);
                    if (itemIndex !== -1) {
                        const itemName = cart[itemIndex].name;
                        cart.splice(itemIndex, 1);
                        showToast(`Removed ${itemName} from cart`, 'info');
                        updateCartDisplay();
                    }
                }

                // Clear entire cart
                function clearCart() {
                    if (cart.length === 0) return;

                    if (confirm('Are you sure you want to clear the entire cart?')) {
                        console.log('üßπ Clearing entire cart');
                        cart = [];
                        updateCartDisplay();
                        showToast('Cart cleared', 'info');
                    }
                }

                // Hold sale (save to localStorage)
                function holdSale() {
                    if (cart.length === 0) return;

                    if (confirm('Hold this sale for later?')) {
                        const heldSaleId = 'heldSale_' + Date.now();
                        localStorage.setItem(heldSaleId, JSON.stringify(cart));
                        cart = [];
                        updateCartDisplay();
                        showToast('Sale held successfully', 'info');
                        console.log('üíæ Sale held with ID:', heldSaleId);
                    }
                }

                // Payment modal functions
                function openPaymentModal() {
                    if (cart.length === 0) {
                        showToast('Cart is empty. Add some products first.', 'error');
                        return;
                    }

                    console.log('üí≥ Opening payment modal, total:', currentTotal);
                    document.getElementById('modalTotalAmount').textContent = `KSh ${currentTotal.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                    document.getElementById('paymentModal').classList.add('show');
                    resetPaymentForm();
                }

                function closePaymentModal() {
                    console.log('‚ùå Closing payment modal');
                    document.getElementById('paymentModal').classList.remove('show');
                    resetPaymentForm();
                }

                function selectPaymentMethod(method) {
                    console.log('üí∞ Selected payment method:', method);
                    selectedPaymentMethod = method;

                    // Update selected state
                    document.querySelectorAll('.payment-option').forEach(option => {
                        option.classList.remove('selected');
                    });
                    event.currentTarget.classList.add('selected');

                    // Hide method selection
                    document.getElementById('paymentMethodSelection').style.display = 'none';

                    // Show appropriate form
                    if (method === 'cash') {
                        document.getElementById('cashPaymentForm').style.display = 'block';
                        document.getElementById('cashReceived').focus();
                        // Set exact amount by default
                        document.getElementById('cashReceived').value = currentTotal.toFixed(2);
                        calculateChange();
                    } else if (method === 'mpesa') {
                        document.getElementById('mpesaPaymentForm').style.display = 'block';
                        document.getElementById('customerPhone').focus();
                    }

                    updateCompleteButton();
                }

                function resetPaymentForm() {
                    selectedPaymentMethod = null;

                    // Show method selection
                    document.getElementById('paymentMethodSelection').style.display = 'block';

                    // Hide forms
                    document.getElementById('cashPaymentForm').style.display = 'none';
                    document.getElementById('mpesaPaymentForm').style.display = 'none';

                    // Reset form values
                    document.getElementById('cashReceived').value = '';
                    document.getElementById('customerPhone').value = '';
                    document.getElementById('changeDisplay').style.display = 'none';

                    // Remove selected state
                    document.querySelectorAll('.payment-option').forEach(option => {
                        option.classList.remove('selected');
                    });

                    updateCompleteButton();
                }

                function setQuickAmount(amount) {
                    const cashInput = document.getElementById('cashReceived');

                    if (amount === 'exact') {
                        cashInput.value = currentTotal.toFixed(2);
                    } else {
                        cashInput.value = amount.toFixed(2);
                    }

                    calculateChange();
                }

                function calculateChange() {
                    const cashReceived = parseFloat(document.getElementById('cashReceived').value) || 0;
                    const change = cashReceived - currentTotal;

                    const changeDisplay = document.getElementById('changeDisplay');
                    const changeAmount = document.getElementById('changeAmount');
                    const changeLabel = document.getElementById('changeLabel');

                    if (cashReceived > 0) {
                        changeDisplay.style.display = 'block';

                        if (change >= 0) {
                            changeDisplay.className = 'change-display positive';
                            changeLabel.textContent = 'Change:';
                            changeAmount.textContent = `KSh ${change.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                        } else {
                            changeDisplay.className = 'change-display negative';
                            changeLabel.textContent = 'Short by:';
                            changeAmount.textContent = `KSh ${Math.abs(change).toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                        }
                    } else {
                        changeDisplay.style.display = 'none';
                    }

                    updateCompleteButton();
                }

                function updateCompleteButton() {
                    const completeBtn = document.getElementById('completePaymentBtn');
                    let canComplete = false;

                    if (selectedPaymentMethod === 'cash') {
                        const cashReceived = parseFloat(document.getElementById('cashReceived').value) || 0;
                        canComplete = cashReceived >= currentTotal;
                    } else if (selectedPaymentMethod === 'mpesa') {
                        const phone = document.getElementById('customerPhone').value;
                        canComplete = phone && phone.length === 9 && /^[0-9]+$/.test(phone);
                    }

                    completeBtn.disabled = !canComplete;
                }

                // Complete payment
                async function completePayment() {
                    console.log('üí≥ Processing payment...');

                    if (!selectedPaymentMethod) {
                        showToast('Please select a payment method', 'error');
                        return;
                    }

                    const completeBtn = document.getElementById('completePaymentBtn');
                    const originalText = completeBtn.innerHTML;

                    // Show loading state
                    completeBtn.disabled = true;
                    completeBtn.innerHTML = '<div class="loading"></div> Processing...';

                    try {
                        let saleData = {
                            items: cart.map(item => ({
                                productId: parseInt(item.id),
                                quantity: item.quantity,
                                unitPrice: item.price,
                                totalPrice: item.total
                            })),
                            totalAmount: currentTotal,
                            paymentMethod: selectedPaymentMethod === 'cash' ? 'Cash' : 'M-Pesa',
                            customerName: '',
                            customerPhone: '',
                            customerEmail: ''
                        };

                        if (selectedPaymentMethod === 'cash') {
                            const cashReceived = parseFloat(document.getElementById('cashReceived').value) || 0;
                            const change = cashReceived - currentTotal;

                            if (change < 0) {
                                showToast(`Insufficient amount. Need KSh ${Math.abs(change).toFixed(2)} more.`, 'error');
                                return;
                            }

                            saleData.amountPaid = cashReceived;
                            saleData.changeGiven = change;
                        } else if (selectedPaymentMethod === 'mpesa') {
                            const phone = document.getElementById('customerPhone').value;
                            saleData.customerPhone = '+254' + phone;
                            saleData.amountPaid = currentTotal;
                            saleData.changeGiven = 0;
                        }

                        console.log('üì§ Sending sale data:', saleData);

                        // Get CSRF token
                        const tokenInput = document.querySelector('#hiddenTokenForm input[name="__RequestVerificationToken"]');
                        const token = tokenInput ? tokenInput.value : '';

                        const response = await fetch('/Admin/ProcessSale', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify(saleData)
                        });

                        const result = await response.json();
                        console.log('üì• Sale response:', result);

                        if (result.success) {
                            showToast('Sale completed successfully!', 'success');

                            // Clear cart and close modal
                            cart = [];
                            updateCartDisplay();
                            closePaymentModal();

                            // Update today's stats
                            updateTodayStats(result.totalAmount);

                            // Generate and show receipt
                            await generateReceipt(result.saleId, result.saleNumber, result.totalAmount, result.changeGiven, result.cashierName);

                            // Reload products to update stock
                            loadProducts();

                            console.log('‚úÖ Sale completed:', result.saleNumber);
                        } else {
                            console.error('‚ùå Sale failed:', result.message);
                            showToast(result.message || 'Sale processing failed', 'error');
                        }
                    } catch (error) {
                        console.error('üí• Error processing sale:', error);
                        showToast('Network error. Please check your connection and try again.', 'error');
                    } finally {
                        // Reset button
                        completeBtn.disabled = false;
                        completeBtn.innerHTML = originalText;
                    }
                }

                // Generate receipt with enhanced printing and saving functionality
                async function generateReceipt(saleId, saleNumber, totalAmount, changeGiven, cashierName) {
                    try {
                        console.log('üßæ Generating receipt for sale:', saleNumber);
                        
                        // Get receipt HTML from server
                        const response = await fetch(`/Admin/GetReceiptHtml?saleId=${saleId}`);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }
                        
                        const receiptHtml = await response.text();
                        
                        // Try to print automatically first
                        const printSuccess = await attemptAutoPrint(receiptHtml, saleNumber);
                        
                        if (!printSuccess) {
                            // If printing failed, offer to save the receipt
                            await offerReceiptSave(receiptHtml, saleNumber, saleId);
                        }
                        
                    } catch (error) {
                        console.error('‚ùå Error generating receipt:', error);
                        // Fallback to simple receipt dialog
                        showReceiptDialog(saleNumber, totalAmount, changeGiven, cashierName);
                    }
                }
                
                // Attempt automatic printing
                async function attemptAutoPrint(receiptHtml, saleNumber) {
                    return new Promise((resolve) => {
                        try {
                            // Create a hidden iframe for printing
                            const printFrame = document.createElement('iframe');
                            printFrame.style.position = 'absolute';
                            printFrame.style.top = '-1000px';
                            printFrame.style.left = '-1000px';
                            printFrame.style.width = '0';
                            printFrame.style.height = '0';
                            printFrame.style.border = 'none';
                            
                            document.body.appendChild(printFrame);
                            
                            // Write receipt HTML to iframe
                            const printDoc = printFrame.contentWindow.document;
                            printDoc.open();
                            printDoc.write(receiptHtml);
                            printDoc.close();
                            
                            // Wait for content to load then print
                            printFrame.onload = () => {
                                setTimeout(() => {
                                    try {
                                        printFrame.contentWindow.focus();
                                        printFrame.contentWindow.print();
                                        
                                        showToast('Receipt sent to printer successfully!', 'success');
                                        console.log('‚úÖ Receipt printed successfully:', saleNumber);
                                        
                                        // Clean up
                                        setTimeout(() => {
                                            document.body.removeChild(printFrame);
                                        }, 1000);
                                        
                                        resolve(true);
                                    } catch (printError) {
                                        console.warn('‚ö†Ô∏è Print failed:', printError);
                                        document.body.removeChild(printFrame);
                                        resolve(false);
                                    }
                                }, 500);
                            };
                            
                            // Fallback timeout
                            setTimeout(() => {
                                if (document.body.contains(printFrame)) {
                                    document.body.removeChild(printFrame);
                                    resolve(false);
                                }
                            }, 3000);
                            
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Auto-print setup failed:', error);
                            resolve(false);
                        }
                    });
                }
                
                // Offer receipt save options when printing fails
                async function offerReceiptSave(receiptHtml, saleNumber, saleId) {
                    const userChoice = confirm(
                        `Printing failed or no printer detected.\n\n` +
                        `Would you like to save the receipt as a file?\n\n` +
                        `Click OK to save, or Cancel to view receipt in browser.`
                    );
                    
                    if (userChoice) {
                        await saveReceiptAsFile(receiptHtml, saleNumber);
                    } else {
                        // Open receipt in new window for viewing
                        const receiptWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
                        receiptWindow.document.write(receiptHtml);
                        receiptWindow.document.close();
                        receiptWindow.focus();
                        
                        showToast('Receipt opened in new window', 'info');
                    }
                }
                
                // Save receipt as HTML file
                async function saveReceiptAsFile(receiptHtml, saleNumber) {
                    try {
                        // Create blob with receipt HTML
                        const blob = new Blob([receiptHtml], { type: 'text/html;charset=utf-8' });
                        
                        // Create download link
                        const downloadLink = document.createElement('a');
                        const url = window.URL.createObjectURL(blob);
                        
                        // Set filename with current date and sale number
                        const now = new Date();
                        const dateStr = now.toISOString().slice(0, 10); // YYYY-MM-DD
                        const timeStr = now.toTimeString().slice(0, 8).replace(/:/g, '-'); // HH-MM-SS
                        const filename = `Receipt_${saleNumber}_${dateStr}_${timeStr}.html`;
                        
                        downloadLink.href = url;
                        downloadLink.download = filename;
                        downloadLink.style.display = 'none';
                        
                        // Trigger download
                        document.body.appendChild(downloadLink);
                        downloadLink.click();
                        document.body.removeChild(downloadLink);
                        
                        // Clean up URL object
                        setTimeout(() => {
                            window.URL.revokeObjectURL(url);
                        }, 100);
                        
                        showToast(`Receipt saved as: ${filename}`, 'success');
                        console.log('üíæ Receipt saved successfully:', filename);
                        
                    } catch (error) {
                        console.error('‚ùå Error saving receipt:', error);
                        showToast('Failed to save receipt file', 'error');
                        
                        // Fallback: open in new window
                        const receiptWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
                        receiptWindow.document.write(receiptHtml);
                        receiptWindow.document.close();
                        receiptWindow.focus();
                    }
                }
                
                // Show receipt dialog as fallback
                function showReceiptDialog(saleNumber, totalAmount, changeGiven, cashierName) {
                    const cartItems = cart.map(item =>
                        `${item.name} x${item.quantity} - KSh ${item.total.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`
                    ).join('\n');

                    const receiptText = `
        PIXEL SOLUTION
        Chuka, Ndangani
        Tel: +254758024400

        Receipt: ${saleNumber}
        Date: ${new Date().toLocaleString()}
        Served by: ${cashierName}

        Items:
        ${cartItems}

        Total: KSh ${totalAmount.toLocaleString('en-KE', { minimumFractionDigits: 2 })}
        Change: KSh ${changeGiven.toLocaleString('en-KE', { minimumFractionDigits: 2 })}

        Thank you for your business!
                    `;

                    alert(receiptText);
                }

                // Setup search functionality
                function setupSearchFunctionality() {
                    const searchInput = document.getElementById('productSearch');
                    const categoryFilter = document.getElementById('categoryFilter');
                    const stockFilter = document.getElementById('stockFilter');

                    if (searchInput) {
                        searchInput.addEventListener('input', debounce(filterProducts, 300));
                    }
                    if (categoryFilter) {
                        categoryFilter.addEventListener('change', filterProducts);
                    }
                    if (stockFilter) {
                        stockFilter.addEventListener('change', filterProducts);
                    }
                }

                // Filter products
                function filterProducts() {
                    const searchTerm = document.getElementById('productSearch').value.toLowerCase();
                    const categoryFilter = document.getElementById('categoryFilter').value;
                    const stockFilter = document.getElementById('stockFilter').value;

                    let filteredProducts = allProducts.filter(product => {
                        // Search filter
                        const matchesSearch = !searchTerm ||
                            product.name.toLowerCase().includes(searchTerm) ||
                            product.sku.toLowerCase().includes(searchTerm) ||
                            (product.categoryName && product.categoryName.toLowerCase().includes(searchTerm));

                        // Category filter
                        const matchesCategory = !categoryFilter || product.categoryId == categoryFilter;

                        // Stock filter
                        let matchesStock = true;
                        if (stockFilter === 'in-stock') {
                            matchesStock = product.stockQuantity > 5;
                        } else if (stockFilter === 'low-stock') {
                            matchesStock = product.stockQuantity <= 5 && product.stockQuantity > 0;
                        }

                        return matchesSearch && matchesCategory && matchesStock;
                    });

                    displayProducts(filteredProducts);
                }

                // Setup keyboard shortcuts
                function setupKeyboardShortcuts() {
                    document.addEventListener('keydown', function(e) {
                        // F2 for checkout
                        if (e.key === 'F2' && cart.length > 0) {
                            e.preventDefault();
                            openPaymentModal();
                        }

                        // F3 for clear cart
                        if (e.key === 'F3' && cart.length > 0) {
                            e.preventDefault();
                            clearCart();
                        }

                        // Enter key in payment modal
                        if (e.key === 'Enter' && document.getElementById('paymentModal').classList.contains('show')) {
                            e.preventDefault();
                            const completeBtn = document.getElementById('completePaymentBtn');
                            if (!completeBtn.disabled) {
                                completePayment();
                            }
                        }
                    });
                }

                // Setup event listeners
                function setupEventListeners() {
                    // Cash input change listener
                    const cashInput = document.getElementById('cashReceived');
                    if (cashInput) {
                        cashInput.addEventListener('input', () => {
                            calculateChange();
                            updateCompleteButton();
                        });
                    }

                    // Phone input change listener
                    const phoneInput = document.getElementById('customerPhone');
                    if (phoneInput) {
                        phoneInput.addEventListener('input', updateCompleteButton);
                    }

                    // Modal close on outside click
                    document.getElementById('paymentModal').addEventListener('click', function(e) {
                        if (e.target === this) {
                            closePaymentModal();
                        }
                    });
                }

                // Load today's stats
                async function loadTodayStats() {
                    try {
                        const response = await fetch('/Admin/GetTodaysSalesStats');
                        const data = await response.json();

                        if (data.success) {
                            document.getElementById('todaySales').textContent = `KSh ${data.stats.totalSales.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                            document.getElementById('todayTransactions').textContent = data.stats.transactionCount.toString();
                            document.getElementById('avgTransaction').textContent = `KSh ${data.stats.averageTransaction.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                        }
                    } catch (error) {
                        console.log('Could not load today\'s stats:', error);
                    }
                }

                // Update today's stats after sale
                function updateTodayStats(amount) {
                    const currentSales = parseFloat(document.getElementById('todaySales').textContent.replace('KSh ', '').replace(/,/g, '')) || 0;
                    const currentTransactions = parseInt(document.getElementById('todayTransactions').textContent) || 0;

                    const newSalesTotal = currentSales + amount;
                    const newTransactionCount = currentTransactions + 1;
                    const newAvgTransaction = newSalesTotal / newTransactionCount;

                    document.getElementById('todaySales').textContent = `KSh ${newSalesTotal.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                    document.getElementById('todayTransactions').textContent = newTransactionCount.toString();
                    document.getElementById('avgTransaction').textContent = `KSh ${newAvgTransaction.toLocaleString('en-KE', { minimumFractionDigits: 2 })}`;
                }

                // Toast notification system
                function showToast(message, type) {
                    // Remove existing toasts
                    const existingToasts = document.querySelectorAll('.toast');
                    existingToasts.forEach(toast => toast.remove());

                    const toast = document.createElement('div');
                    toast.className = `toast ${type}`;
                    toast.textContent = message;
                    toast.style.cssText = `
                        position: fixed;
                        top: 20px;
                        right: 20px;
                        z-index: 9999;
                        padding: 1rem 1.5rem;
                        border-radius: 12px;
                        color: white;
                        font-weight: 600;
                        opacity: 0;
                        transform: translateX(100%);
                        transition: all 0.3s ease;
                        max-width: 300px;
                        box-shadow: 0 10px 30px rgba(0,0,0,0.3);
                    `;

                    switch(type) {
                        case 'success':
                            toast.style.background = 'linear-gradient(135deg, #10b981, #059669)';
                            break;
                        case 'error':
                            toast.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
                            break;
                        case 'warning':
                            toast.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
                            break;
                        case 'info':
                            toast.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
                            break;
                    }

                    document.body.appendChild(toast);

                    // Show toast
                    setTimeout(() => {
                        toast.style.opacity = '1';
                        toast.style.transform = 'translateX(0)';
                    }, 100);

                    // Hide toast after 3 seconds
                    setTimeout(() => {
                        toast.style.opacity = '0';
                        toast.style.transform = 'translateX(100%)';
                        setTimeout(() => {
                            toast.remove();
                        }, 300);
                    }, 3000);
                }

                // Utility function for debouncing
                function debounce(func, wait) {
                    let timeout;
                    return function executedFunction(...args) {
                        const later = () => {
                            clearTimeout(timeout);
                            func(...args);
                        };
                        clearTimeout(timeout);
                        timeout = setTimeout(later, wait);
                    };
                }

                // Initialize cart display on load
                updateCartDisplay();